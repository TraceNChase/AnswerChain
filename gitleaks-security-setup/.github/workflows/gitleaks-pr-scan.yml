name: Gitleaks PR Secret Check

on:
  pull_request:
    branches: [ main, master ]

jobs:
  scan:
    name: Check PR for Secrets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to scan all commits

      - name: Install Gitleaks
        run: |
          curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh | sh -s -- -b /usr/local/bin
          gitleaks version

      - name: Scan PR with Gitleaks
        id: gitleaks
        run: |
          PR_BASE_SHA=${{ github.event.pull_request.base.sha }}
          PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          echo "Scanning PR changes between $PR_BASE_SHA and $PR_HEAD_SHA"
          
          # Run gitleaks on the PR diff
          gitleaks detect \
            --source=. \
            --config=gitleaks-security-setup/configs/gitleaks.toml \
            --log-level=info \
            --report-format=json \
            --report-path=gitleaks-pr-results.json \
            --baseline-path=gitleaks-baseline.json \
            --commits-file=<(git rev-list $PR_BASE_SHA..$PR_HEAD_SHA)
          
          # Store exit code to determine if secrets were found
          GITLEAKS_EXIT_CODE=$?
          
          if [ $GITLEAKS_EXIT_CODE -eq 1 ]; then
            echo "SECRETS_FOUND=true" >> $GITHUB_OUTPUT
            echo "Found secrets in PR"
          else
            echo "SECRETS_FOUND=false" >> $GITHUB_OUTPUT
            echo "No secrets found in PR"
          fi
        continue-on-error: true
        shell: bash

      - name: Process scan results
        id: process-results
        if: steps.gitleaks.outputs.SECRETS_FOUND == 'true'
        run: |
          echo "Creating PR report"
          
          # Create markdown report
          echo "## 🔒 Gitleaks Secret Detection Results" > gitleaks-pr-report.md
          echo "" >> gitleaks-pr-report.md
          echo "⚠️ **Potential secrets were detected in this PR**" >> gitleaks-pr-report.md
          echo "" >> gitleaks-pr-report.md
          echo "### Detected Secrets" >> gitleaks-pr-report.md
          echo "" >> gitleaks-pr-report.md
          
          # Parse JSON and format findings
          jq -r '.[] | "- **Secret Type**: \(.RuleID)\n  - **File**: \(.File)\n  - **Line**: \(.StartLine)-\(.EndLine)\n  - **Commit**: \(.Commit)\n  - **Secret Found**: `\(.Secret | gsub("(?<first>.).+(?<last>.)";\"\(.first)******\(.last)\"))`\n\n"' gitleaks-pr-results.json >> gitleaks-pr-report.md
          
          echo "### Next Steps" >> gitleaks-pr-report.md
          echo "" >> gitleaks-pr-report.md
          echo "1. Review each finding and confirm if it's a real secret" >> gitleaks-pr-report.md
          echo "2. Remove any genuine secrets and rotate credentials immediately" >> gitleaks-pr-report.md
          echo "3. Consider using environment variables or secret management solutions" >> gitleaks-pr-report.md
          echo "4. If these are false positives, update the Gitleaks configuration" >> gitleaks-pr-report.md

      - name: Comment on PR
        uses: actions/github-script@v6
        if: steps.gitleaks.outputs.SECRETS_FOUND == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('gitleaks-pr-report.md', 'utf8');
            
            const issueNumber = context.issue.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: reportContent
            });
            
            // Add label to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['security-review-needed', 'contains-secrets']
            });

      - name: Add passing comment
        uses: actions/github-script@v6
        if: steps.gitleaks.outputs.SECRETS_FOUND != 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: "## 🔒 Gitleaks Secret Detection Results\n\n✅ No secrets were detected in this PR. Good job!"
            });
