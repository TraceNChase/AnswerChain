name: Snyk Security Scan for GitHub Actions

on:
  # Scan all workflows when changes are pushed to main or master
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/**'
  
  # Scan when workflow files are modified in PRs
  pull_request:
    branches: [ main, master ]
    paths:
      - '.github/workflows/**'
  
  # Regular scheduled scans
  schedule:
    - cron: '0 0 * * 1' # Weekly scan on Mondays at midnight
  
  # Manual trigger
  workflow_dispatch:

jobs:
  snyk-actions-scan:
    name: Scan GitHub Actions Workflows
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for scanning
      
      # Setup Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Use official Snyk GitHub Action to scan workflows
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --sarif-file-output=snyk-scan-results/results.sarif
          command: code test
      
      # Create directory for scan results
      - name: Create results directory
        run: mkdir -p snyk-scan-results
      
      # Generate summary for GitHub Actions
      - name: Generate workflow scan summary
        run: |
          echo "### Snyk GitHub Actions Scanner Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Workflows scanned: $(find .github/workflows -type f -name '*.yml' -o -name '*.yaml' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Scan completed at: $(date)" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "snyk-scan-results/results.sarif" ]; then
            echo "✅ Scan completed successfully. Results saved to SARIF format." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Scan completed but no SARIF file was generated." >> $GITHUB_STEP_SUMMARY
          fi
      
      # Upload SARIF file to GitHub Security
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: snyk-scan-results/results.sarif
          category: snyk-actions-scanner
      
      # Upload full results as artifacts
      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: snyk-scan-results
          path: snyk-scan-results
          retention-days: 7
      
      # Comment on PR with findings if running on a PR
      - name: Comment on PR
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Generate basic report
              let markdownReport = `## 🔍 Snyk GitHub Actions Workflow Security Scan\n\n`;
              markdownReport += `### ✅ Security scan completed\n\n`;
              markdownReport += `Workflows scanned: ${require('fs').readdirSync('.github/workflows').filter(f => f.endsWith('.yml') || f.endsWith('.yaml')).length}\n\n`;
              markdownReport += `For complete details, check the [Actions tab](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}).\n\n`;
              
              // Add best practices
              markdownReport += `## 📚 GitHub Actions Security Best Practices\n\n`;
              markdownReport += `- Use specific commit hashes instead of tags for third-party actions\n`;
              markdownReport += `- Minimize the permissions granted to the GitHub token\n`;
              markdownReport += `- Avoid using input data directly in commands (to prevent injection)\n`;
              markdownReport += `- Set the \`permissions\` field explicitly in your workflows\n`;
              markdownReport += `- Use secrets for sensitive data\n`;
              
              // Post the comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: markdownReport
              });
            } catch (error) {
              console.log(`Error creating PR comment: ${error.message}`);
            }
