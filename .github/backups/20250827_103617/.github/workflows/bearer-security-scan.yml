# DISABLED: This workflow was disabled because it contains external AI API dependencies.
# To re-enable, remove these comments and restore the original triggers.

name: Bearer Security Scan

on:
  # Original triggers disabled - contains external AI dependencies
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 1' # Run every Monday at midnight
  workflow_dispatch: # Allow manual triggering

jobs:
  bearer-scan:
    name: Bearer Data Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Bearer scan
        uses: bearer/bearer-action@v2
        with:
          api-key: ${{ secrets.BEARER_API_KEY }}
          report-format: sarif,text,json
          verbosity: 3
          diff-scan: ${{ github.event_name == 'pull_request' }}
          fail-on-severity: HIGH
          report-path: 'bearer-report'
          config-file: '.bearer/bearer.yaml'
          # Optional: Enable if you want to scan specific directories
          # scan-directory: 'src,api,backend'
      
      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: bearer-report/report.sarif
          category: bearer-security
      
      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: bearer-security-scan-results
          path: bearer-report/
          retention-days: 30

      - name: Comment on PR with findings
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              if (fs.existsSync('bearer-report/report.json')) {
                const reportJson = JSON.parse(fs.readFileSync('bearer-report/report.json', 'utf8'));
                
                // Check if we have any findings
                if (reportJson.findings && reportJson.findings.length > 0) {
                  // Count findings by severity
                  const severityCounts = {
                    CRITICAL: 0,
                    HIGH: 0,
                    MEDIUM: 0,
                    LOW: 0,
                    INFO: 0
                  };
                  
                  reportJson.findings.forEach(finding => {
                    const severity = finding.severity || "INFO";
                    severityCounts[severity]++;
                  });
                  
                  // Create markdown report
                  let markdownReport = `## 🔍 Bearer Security Scan Results\n\n`;
                  markdownReport += `Found **${reportJson.findings.length}** potential data security issues in this PR.\n\n`;
                  
                  // Add severity breakdown
                  markdownReport += `### Severity Breakdown\n\n`;
                  markdownReport += `- 🔴 CRITICAL: ${severityCounts.CRITICAL}\n`;
                  markdownReport += `- 🟠 HIGH: ${severityCounts.HIGH}\n`;
                  markdownReport += `- 🟡 MEDIUM: ${severityCounts.MEDIUM}\n`;
                  markdownReport += `- 🟢 LOW: ${severityCounts.LOW}\n`;
                  markdownReport += `- ℹ️ INFO: ${severityCounts.INFO}\n\n`;
                  
                  // Add top findings (up to 10)
                  markdownReport += `### Top Findings\n\n`;
                  
                  const sortedFindings = [...reportJson.findings].sort((a, b) => {
                    const severityOrder = { "CRITICAL": 0, "HIGH": 1, "MEDIUM": 2, "LOW": 3, "INFO": 4 };
                    return severityOrder[a.severity || "INFO"] - severityOrder[b.severity || "INFO"];
                  });
                  
                  const topFindings = sortedFindings.slice(0, 10);
                  
                  topFindings.forEach(finding => {
                    markdownReport += `#### ${finding.title}\n`;
                    markdownReport += `- **Severity**: ${finding.severity || "INFO"}\n`;
                    markdownReport += `- **Category**: ${finding.category_id || "Unknown"}\n`;
                    markdownReport += `- **File**: ${finding.location?.filename || "Unknown"}\n`;
                    
                    if (finding.description) {
                      markdownReport += `- **Description**: ${finding.description}\n`;
                    }
                    
                    if (finding.location?.line_start && finding.location?.line_end) {
                      markdownReport += `- **Lines**: ${finding.location.line_start}-${finding.location.line_end}\n`;
                    }
                    
                    markdownReport += `\n`;
                  });
                  
                  if (reportJson.findings.length > 10) {
                    markdownReport += `\n... and ${reportJson.findings.length - 10} more findings. See full report in GitHub Actions artifacts.\n\n`;
                  }
                  
                  markdownReport += `\nFull report available in the [Actions tab](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
                  
                  // Post comment on PR
                  const issueNumber = context.issue.number;
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: markdownReport
                  });
                  
                  // Add labels based on severity
                  const labels = ['security'];
                  if (severityCounts.CRITICAL > 0 || severityCounts.HIGH > 0) {
                    labels.push('security-critical');
                  }
                  
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels: labels
                  });
                } else {
                  // No findings - add success comment
                  const issueNumber = context.issue.number;
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: `## ✅ Bearer Security Scan Results\n\nNo data security issues found! Great job!`
                  });
                }
              } else {
                console.log('No report.json file found. Cannot generate PR comment.');
              }
            } catch (error) {
              console.log('Error processing Bearer results:', error);
            }
