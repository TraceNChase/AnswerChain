#!/usr/bin/env python3

import sys
import markdown
import os

def generate_html_report(markdown_file, output_html):
    """Convert markdown report to styled HTML"""
    if not os.path.exists(markdown_file):
        print(f"Error: Markdown file '{markdown_file}' not found!")
        return False
    
    try:
        with open(markdown_file, 'r') as f:
            md_content = f.read()
        
        html = markdown.markdown(md_content, extensions=['fenced_code', 'tables'])
        
        # Add styling
        styled_html = f"""<!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Enhanced Security Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; max-width: 1200px; margin: 0 auto; padding: 20px; }}
                h1 {{ color: #d9534f; }}
                h2 {{ color: #337ab7; border-bottom: 1px solid #eee; padding-bottom: 10px; }}
                h3 {{ margin-top: 30px; }}
                h4 {{ color: #5cb85c; }}
                table {{ border-collapse: collapse; width: 100%; margin-bottom: 30px; }}
                th, td {{ border: 1px solid #ddd; padding: 12px; }}
                th {{ background-color: #f2f2f2; }}
                code {{ background-color: #f8f8f8; padding: 2px 5px; border-radius: 3px; }}
                pre {{ background-color: #f8f8f8; padding: 15px; border-radius: 5px; overflow-x: auto; }}
                .diff-add {{ background-color: #e6ffed; }}
                .diff-remove {{ background-color: #ffeef0; }}
                .severity-critical {{ color: #d9534f; font-weight: bold; }}
                .severity-high {{ color: #f0ad4e; font-weight: bold; }}
                .severity-medium {{ color: #5bc0de; }}
                .severity-low {{ color: #5cb85c; }}
            </style>
        </head>
        <body>
            {html}
        </body>
        </html>"""
        
        with open(output_html, 'w') as f:
            f.write(styled_html)
        
        return True
    except Exception as e:
        print(f"Error generating HTML report: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: process_vulnerability_report.py <markdown_report> <output_html>")
        sys.exit(1)
    
    success = generate_html_report(sys.argv[1], sys.argv[2])
    if success:
        print(f"Successfully generated HTML report: {sys.argv[2]}")
    else:
        sys.exit(1)
