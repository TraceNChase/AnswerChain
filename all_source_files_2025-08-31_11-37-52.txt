========================================================================================================================
SOURCE CODE COLLECTION (directories visited breadth-first, files taken directly under each dir)
Base: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain
Max Depth: 2
Extensions: .js, .py
Excluded dir names: .cache, .env, .git, .hg, .idea, .mypy_cache, .pytest_cache, .ruff_cache, .svn, .venv, .vscode, __pycache__, build, dist, env, node_modules, out, venv
Timestamp: 2025-08-31_11-37-52
========================================================================================================================


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\Python_Code_Grabber.py
# HASH: 1088366189586f0bcc393a7206732d7a86a75496491a1f706047e6239d3b2b7a
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

# grab_source.py
# Robust, path-agnostic source collector that mirrors "non-recursive per directory" behavior
# Place this file at your project root (e.g., ...\AnswerChain) and run:
#   py grab_source.py
# Options:
#   --base BASE_DIR           Base directory to start from (default: this script's folder)
#   --max-depth N             Directory walk depth (default: 2; -1 means unlimited)
#   --exts .py,.js            Comma-separated list of file extensions to include
#   --exclude-dirs names      Comma-separated dir names to exclude (name-only match)
#   --output-dir PATH         Where to write the output file (default: BASE_DIR)
#   --dry-run                 Show what would be scanned, but do not write output

import argparse
import hashlib
import os
from collections import deque
from datetime import datetime
from pathlib import Path
from typing import Iterable, List, Set

DEFAULT_EXTS = {".py", ".js"}
DEFAULT_EXCLUDE_DIRS = {
    ".git", ".hg", ".svn",
    "node_modules",
    "__pycache__",
    ".venv", "venv", "env", ".env",
    ".idea", ".vscode",
    "dist", "build", "out", ".pytest_cache",
    ".mypy_cache", ".ruff_cache", ".cache"
}

HEADER_RULE = "#" * 120


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(
        description="Collect source files by scanning directories up to a max depth and concatenating files found directly in each visited directory."
    )
    p.add_argument(
        "--base",
        type=str,
        default=None,
        help="Base directory (default: folder containing this script)",
    )
    p.add_argument(
        "--max-depth",
        type=int,
        default=2,
        help="Max directory depth to traverse from base (default: 2). Use -1 for unlimited.",
    )
    p.add_argument(
        "--exts",
        type=str,
        default=",".join(sorted(DEFAULT_EXTS)),
        help="Comma-separated file extensions to include (e.g., .py,.js,.ts)",
    )
    p.add_argument(
        "--exclude-dirs",
        type=str,
        default=",".join(sorted(DEFAULT_EXCLUDE_DIRS)),
        help="Comma-separated directory NAMES to exclude (matched by name only).",
    )
    p.add_argument(
        "--output-dir",
        type=str,
        default=None,
        help="Directory to write the output file (default: base directory).",
    )
    p.add_argument(
        "--dry-run",
        action="store_true",
        help="Print summary of what would be scanned and exit without writing output.",
    )
    return p.parse_args()


def normalize_exts(ext_list: str) -> Set[str]:
    exts = set()
    for raw in ext_list.split(","):
        s = raw.strip()
        if not s:
            continue
        if not s.startswith("."):
            s = "." + s
        exts.add(s.lower())
    return exts


def normalize_excludes(names_csv: str) -> Set[str]:
    return {n.strip() for n in names_csv.split(",") if n.strip()}


def calculate_hash(content: str) -> str:
    return hashlib.sha256(content.encode("utf-8")).hexdigest()


def bfs_visit_dirs(base: Path, max_depth: int, exclude_names: Set[str]) -> Iterable[Path]:
    """
    Breadth-first traversal from base. Yields each directory visited (including base).
    Only visits up to 'max_depth' edges away from base; -1 means unlimited depth.
    Excludes directories whose name is in exclude_names (name-only check).
    """
    if max_depth < -1 or max_depth == 0:
        # 0 would mean "visit base only", but for clarity the user should pass 0 intentionally.
        pass

    visited: List[Path] = []
    q = deque([(base, 0)])
    seen = set()

    while q:
        cur, depth = q.popleft()
        cur_resolved = cur.resolve()
        if cur_resolved in seen:
            continue
        seen.add(cur_resolved)

        if not cur.exists() or not cur.is_dir():
            continue

        visited.append(cur)

        # If at depth limit (and not unlimited), don't enqueue children
        if max_depth != -1 and depth >= max_depth:
            continue

        try:
            for entry in cur.iterdir():
                if entry.is_dir():
                    if entry.name in exclude_names:
                        continue
                    q.append((entry, depth + 1))
        except PermissionError:
            # Skip directories we cannot access
            continue

    # Yield in a stable, sorted order (by path string)
    for d in sorted(visited, key=lambda p: str(p).lower()):
        yield d


def scan_files_directly_under(directory: Path, code_exts: Set[str]) -> List[Path]:
    """
    Return files directly in 'directory' whose extension is in code_exts (case-insensitive).
    Does not recurse into subfolders.
    """
    files: List[Path] = []
    try:
        for f in directory.iterdir():
            if f.is_file():
                if f.suffix.lower() in code_exts:
                    files.append(f)
    except PermissionError:
        # Skip folders we cannot read
        pass

    # Stable sort for reproducibility
    return sorted(files, key=lambda p: str(p).lower())


def include_file(file_path: Path, collected_content: List[str], timestamp: str) -> int:
    try:
        # Use tolerant decoding to avoid failures; treat as text source
        content = file_path.read_text(encoding="utf-8", errors="replace")
    except Exception as e:
        print(f"[WARNING] Could not read {file_path}: {e}")
        return 0

    file_hash = calculate_hash(content)
    collected_content.append(
        f"\n{HEADER_RULE}\n# FILE: {file_path}\n# HASH: {file_hash}\n# TIMESTAMP: {timestamp}\n{HEADER_RULE}\n"
    )
    collected_content.append(content)
    collected_content.append(f"\n{HEADER_RULE}\n# END OF FILE: {file_path}\n{HEADER_RULE}\n")
    return len(content)


def main() -> None:
    args = parse_args()

    base = Path(args.base).resolve() if args.base else Path(__file__).resolve().parent
    if not base.exists() or not base.is_dir():
        print(f"[ERROR] Base directory does not exist or is not a directory: {base}")
        return

    code_exts = normalize_exts(args.exts)
    exclude_names = normalize_excludes(args.exclude_dirs)
    output_dir = Path(args.output_dir).resolve() if args.output_dir else base

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_dir.mkdir(parents=True, exist_ok=True)
    output_file = output_dir / f"all_source_files_{timestamp}.txt"

    # Plan scan
    dirs_to_scan = list(bfs_visit_dirs(base, args.max_depth, exclude_names))

    if args.dry_run:
        print("[DRY-RUN] Would scan these directories (non-recursive per directory):")
        for d in dirs_to_scan:
            print("  -", d)
        print(f"[DRY-RUN] Extensions: {sorted(code_exts)}")
        print(f"[DRY-RUN] Excluded dir names: {sorted(exclude_names)}")
        print(f"[DRY-RUN] Output file would be: {output_file}")
        return

    collected_content: List[str] = []
    total_chars = 0
    total_files = 0

    collected_content.append(
        f"{'=' * 120}\n"
        f"SOURCE CODE COLLECTION (directories visited breadth-first, files taken directly under each dir)\n"
        f"Base: {base}\n"
        f"Max Depth: {args.max_depth}\n"
        f"Extensions: {', '.join(sorted(code_exts))}\n"
        f"Excluded dir names: {', '.join(sorted(exclude_names))}\n"
        f"Timestamp: {timestamp}\n"
        f"{'=' * 120}\n"
    )

    for d in dirs_to_scan:
        files = scan_files_directly_under(d, code_exts)
        for file_path in files:
            added = include_file(file_path, collected_content, timestamp)
            if added > 0:
                total_chars += added
                total_files += 1

    collected_content.append(
        f"\n{'=' * 120}\n"
        f"SUMMARY\n"
        f"Total Files: {total_files}\n"
        f"Total Characters: {total_chars}\n"
        f"Timestamp: {timestamp}\n"
        f"Visited Dirs: {len(dirs_to_scan)}\n"
        f"Output: {output_file}\n"
        f"{'=' * 120}\n"
    )

    try:
        output_file.write_text("\n".join(collected_content), encoding="utf-8")
        print(f"[INFO] Source contents saved to: {output_file}")
    except Exception as e:
        print(f"[ERROR] Could not write output file: {e}")


if __name__ == "__main__":
    main()


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\Python_Code_Grabber.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\Python_paths_files_Grabber.py
# HASH: 79e61b9ac023104c487008a4def13d22b8053950e1fabeb8731132a0271e7de2
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import os
from datetime import datetime

def export_tree(root_path, dest_path):
    # Timestamp for filename
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    out_file = os.path.join(dest_path, f"location of files folders ({timestamp}).txt")

    with open(out_file, "w", encoding="utf-8") as f:
        f.write("PROJECT INVENTORY\n")
        f.write(f"Root: {root_path}\n")
        f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")

        folder_count = 0
        file_count = 0

        f.write("=== FOLDERS ===\n")
        for dirpath, dirnames, filenames in os.walk(root_path):
            for d in dirnames:
                folder_count += 1
                fullpath = os.path.join(dirpath, d)
                f.write(f"{fullpath}\n")

        f.write("\n=== FILES ===\n")
        for dirpath, dirnames, filenames in os.walk(root_path):
            for fn in filenames:
                file_count += 1
                fullpath = os.path.join(dirpath, fn)
                f.write(f"{fullpath}\n")

        f.write("\n=== SUMMARY ===\n")
        f.write(f"Folders: {folder_count}\n")
        f.write(f"Files:   {file_count}\n")

    print(f"Done. Wrote: {out_file}")

if __name__ == "__main__":
    root = r"C:\Users\deskt\Desktop\Project_SECQ_CLI\SECQ_CLI\SECQ_CLI"
    dest = r"C:\Users\deskt\Desktop\Project_SECQ_CLI\SECQ_CLI"
    export_tree(root, dest)


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\Python_paths_files_Grabber.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\crypto-bridge.js
# HASH: 08eaee0b4269f4971e11d2831a20514c55d750b86ec55311c4d18f39d12623db
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

// bridge/crypto-bridge.js
import { stdin as i, stdout as o } from 'node:process';
import { timingSafeEqual } from 'node:crypto';
import { decode as b64d, encode as b64e } from './utils/base64url.js';
import { sha3_256 } from '@noble/hashes/sha3';
import { hmac } from '@noble/hashes/hmac';
import { sha256 } from '@noble/hashes/sha256';
import { hkdf } from '@noble/hashes/hkdf';
import { argon2id } from '@noble/hashes/argon2';
import { randomBytes as randHash } from '@noble/hashes/utils';
import { gcm } from '@noble/ciphers/aes';
import { chacha20poly1305, xchacha20poly1305 } from '@noble/ciphers/chacha';
import { randomBytes as randCipher } from '@noble/ciphers/webcrypto';

function randomBytes(n) { try { return randCipher(n); } catch { return randHash(n); } }
function toU8(b64) { return new Uint8Array(b64d(b64)); }
function toB64(u8) { return b64e(u8); }

async function main() {
  const raw = await new Promise((res) => {
    let buf = ''; i.setEncoding('utf8'); i.on('data', (d) => (buf += d)); i.on('end', () => res(buf));
  });
  const req = JSON.parse(Buffer.from(raw, 'base64url').toString('utf8'));
  const { op } = req;
  const out = {};
  try {
    switch (op) {
      case 'argon2id': {
        const { password_b64, salt_b64, mCost, t, p, dkLen } = req;
        const key = await argon2id(toU8(password_b64), toU8(salt_b64), { m: mCost, t, p, dkLen });
        out.ok = true; out.key_b64 = toB64(key); break;
      } case 'hkdf_sha256': {
        const { ikm_b64, salt_b64, info_b64, dkLen } = req;
        out.ok = true; out.key_b64 = toB64(hkdf(sha256, toU8(ikm_b64), toU8(salt_b64), toU8(info_b64), dkLen)); break;
      } case 'hmac_sha256': {
        out.ok = true; out.tag_b64 = toB64(hmac(sha256, toU8(req.key_b64), toU8(req.data_b64))); break;
      } case 'sha3_256': {
        out.ok = true; out.hash_b64 = toB64(sha3_256(toU8(req.data_b64))); break;
      } case 'aes_gcm_encrypt': {
        const { key_b64, nonce_b64, pt_b64, aad_b64 } = req;
        const aes = gcm(toU8(key_b64), toU8(nonce_b64), aad_b64 ? toU8(aad_b64) : undefined);
        out.ok = true; out.ct_b64 = toB64(aes.encrypt(toU8(pt_b64))); break;
      } case 'aes_gcm_decrypt': {
        const { key_b64, nonce_b64, ct_b64, aad_b64 } = req;
        const aes = gcm(toU8(key_b64), toU8(nonce_b64), aad_b64 ? toU8(aad_b64) : undefined);
        out.ok = true; out.pt_b64 = toB64(aes.decrypt(toU8(ct_b64))); break;
      } case 'chacha20poly1305_encrypt': {
        const { key_b64, nonce_b64, pt_b64, aad_b64 } = req;
        const ch = chacha20poly1305(toU8(key_b64), toU8(nonce_b64), aad_b64 ? toU8(aad_b64) : undefined);
        out.ok = true; out.ct_b64 = toB64(ch.encrypt(toU8(pt_b64))); break;
      } case 'chacha20poly1305_decrypt': {
        const { key_b64, nonce_b64, ct_b64, aad_b64 } = req;
        const ch = chacha20poly1305(toU8(key_b64), toU8(nonce_b64), aad_b64 ? toU8(aad_b64) : undefined);
        out.ok = true; out.pt_b64 = toB64(ch.decrypt(toU8(ct_b64))); break;
      } case 'xchacha20poly1305_encrypt': {
        const { key_b64, nonce_b64, pt_b64, aad_b64 } = req;
        const ch = xchacha20poly1305(toU8(key_b64), toU8(nonce_b64), aad_b64 ? toU8(aad_b64) : undefined);
        out.ok = true; out.ct_b64 = toB64(ch.encrypt(toU8(pt_b64))); break;
      } case 'xchacha20poly1305_decrypt': {
        const { key_b64, nonce_b64, ct_b64, aad_b64 } = req;
        const ch = xchacha20poly1305(toU8(key_b64), toU8(nonce_b64), aad_b64 ? toU8(aad_b64) : undefined);
        out.ok = true; out.pt_b64 = toB64(ch.decrypt(toU8(ct_b64))); break;
      } case 'random_bytes': {
        out.ok = true; out.bytes_b64 = toB64(randomBytes(req.n)); break;
      } case 'consttime_equal': {
        const bufA = Buffer.from(toU8(req.a_b64)), bufB = Buffer.from(toU8(req.b_b64));
        out.ok = true; out.equal = bufA.length === bufB.length && timingSafeEqual(bufA, bufB); break;
      } default: throw new Error(`Unknown op: ${op}`);
    }
  } catch (e) { out.ok = false; out.error = String(e?.message || e); }
  o.write(Buffer.from(JSON.stringify(out), 'utf8').toString('base64url'));
}
await main();

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\crypto-bridge.js
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\utils\base64url.js
# HASH: a4d4f8c10a71555792ca538347f6ba7ae87031ec5f61276ca3d81136439f4dfd
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

// bridge/utils/base64url.js
export function encode(u8) {
  return Buffer.from(u8).toString('base64url');
}
export function decode(b64url) {
  return new Uint8Array(Buffer.from(b64url, 'base64url'));
}

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\utils\base64url.js
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\vendor\noble-ciphers.js
# HASH: 254c2bd211ee19daa8a4338c9a38ac34fa92df88b83719daf7f4fc6a22ebe578
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

var nobleCiphers = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // input.js
  var input_exports = {};
  __export(input_exports, {
    aeskw: () => aeskw,
    aeskwp: () => aeskwp,
    cbc: () => cbc,
    chacha12: () => chacha12,
    chacha20: () => chacha20,
    chacha20poly1305: () => chacha20poly1305,
    chacha8: () => chacha8,
    ctr: () => ctr,
    ecb: () => ecb,
    gcm: () => gcm,
    salsa20: () => salsa20,
    siv: () => siv,
    utils: () => utils,
    xchacha20poly1305: () => xchacha20poly1305,
    xsalsa20poly1305: () => xsalsa20poly1305
  });

  // ../../utils.js
  function isBytes(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
  }
  function abool(b) {
    if (typeof b !== "boolean")
      throw new Error(`boolean expected, not ${b}`);
  }
  function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error("positive integer expected, got " + n);
  }
  function abytes(value, length, title = "") {
    const bytes = isBytes(value);
    const len = value?.length;
    const needsLen = length !== void 0;
    if (!bytes || needsLen && len !== length) {
      const prefix = title && `"${title}" `;
      const ofLen = needsLen ? ` of length ${length}` : "";
      const got = bytes ? `length=${len}` : `type=${typeof value}`;
      throw new Error(prefix + "expected Uint8Array" + ofLen + ", got " + got);
    }
    return value;
  }
  function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function aoutput(out, instance) {
    abytes(out, void 0, "output");
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error("digestInto() expects output buffer of length at least " + min);
    }
  }
  function u8(arr) {
    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
  }
  function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  }
  function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
      arrays[i].fill(0);
    }
  }
  function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  }
  var isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
  var hasHexBuiltin = /* @__PURE__ */ (() => (
    // @ts-ignore
    typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
  ))();
  var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
  function bytesToHex(bytes) {
    abytes(bytes);
    if (hasHexBuiltin)
      return bytes.toHex();
    let hex = "";
    for (let i = 0; i < bytes.length; i++) {
      hex += hexes[bytes[i]];
    }
    return hex;
  }
  var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
  function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
      return ch - asciis._0;
    if (ch >= asciis.A && ch <= asciis.F)
      return ch - (asciis.A - 10);
    if (ch >= asciis.a && ch <= asciis.f)
      return ch - (asciis.a - 10);
    return;
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    if (hasHexBuiltin)
      return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("hex string expected, got unpadded hex of length " + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex.charCodeAt(hi));
      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex[hi] + hex[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array[ai] = n1 * 16 + n2;
    }
    return array;
  }
  function overlapBytes(a, b) {
    return a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy
    a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end
    b.byteOffset < a.byteOffset + a.byteLength;
  }
  function complexOverlapBytes(input, output) {
    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)
      throw new Error("complex overlap of input and output is not supported");
  }
  function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      abytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function checkOpts(defaults, opts) {
    if (opts == null || typeof opts !== "object")
      throw new Error("options must be defined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function equalBytes(a, b) {
    if (a.length !== b.length)
      return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
      diff |= a[i] ^ b[i];
    return diff === 0;
  }
  var wrapCipher = /* @__NO_SIDE_EFFECTS__ */ (params, constructor) => {
    function wrappedCipher(key, ...args) {
      abytes(key, void 0, "key");
      if (!isLE)
        throw new Error("Non little-endian hardware is not yet supported");
      if (params.nonceLength !== void 0) {
        const nonce = args[0];
        abytes(nonce, params.varSizeNonce ? void 0 : params.nonceLength, "nonce");
      }
      const tagl = params.tagLength;
      if (tagl && args[1] !== void 0)
        abytes(args[1], void 0, "AAD");
      const cipher = constructor(key, ...args);
      const checkOutput = (fnLength, output) => {
        if (output !== void 0) {
          if (fnLength !== 2)
            throw new Error("cipher output not supported");
          abytes(output, void 0, "output");
        }
      };
      let called = false;
      const wrCipher = {
        encrypt(data, output) {
          if (called)
            throw new Error("cannot encrypt() twice with same key + nonce");
          called = true;
          abytes(data);
          checkOutput(cipher.encrypt.length, output);
          return cipher.encrypt(data, output);
        },
        decrypt(data, output) {
          abytes(data);
          if (tagl && data.length < tagl)
            throw new Error('"ciphertext" expected length bigger than tagLength=' + tagl);
          checkOutput(cipher.decrypt.length, output);
          return cipher.decrypt(data, output);
        }
      };
      return wrCipher;
    }
    Object.assign(wrappedCipher, params);
    return wrappedCipher;
  };
  function getOutput(expectedLength, out, onlyAligned = true) {
    if (out === void 0)
      return new Uint8Array(expectedLength);
    if (out.length !== expectedLength)
      throw new Error('"output" expected Uint8Array of length ' + expectedLength + ", got: " + out.length);
    if (onlyAligned && !isAligned32(out))
      throw new Error("invalid output, must be aligned");
    return out;
  }
  function u64Lengths(dataLength, aadLength, isLE2) {
    abool(isLE2);
    const num = new Uint8Array(16);
    const view = createView(num);
    view.setBigUint64(0, BigInt(aadLength), isLE2);
    view.setBigUint64(8, BigInt(dataLength), isLE2);
    return num;
  }
  function isAligned32(bytes) {
    return bytes.byteOffset % 4 === 0;
  }
  function copyBytes(bytes) {
    return Uint8Array.from(bytes);
  }
  function randomBytes(bytesLength = 32) {
    const cr = typeof globalThis === "object" ? globalThis.crypto : null;
    if (typeof cr?.getRandomValues !== "function")
      throw new Error("crypto.getRandomValues must be defined");
    return cr.getRandomValues(new Uint8Array(bytesLength));
  }
  function managedNonce(fn, randomBytes_ = randomBytes) {
    const { nonceLength } = fn;
    anumber(nonceLength);
    const addNonce = (nonce, ciphertext) => {
      const out = concatBytes(nonce, ciphertext);
      ciphertext.fill(0);
      return out;
    };
    return (key, ...args) => ({
      encrypt(plaintext) {
        abytes(plaintext);
        const nonce = randomBytes_(nonceLength);
        const encrypted = fn(key, nonce, ...args).encrypt(plaintext);
        if (encrypted instanceof Promise)
          return encrypted.then((ct) => addNonce(nonce, ct));
        return addNonce(nonce, encrypted);
      },
      decrypt(ciphertext) {
        abytes(ciphertext);
        const nonce = ciphertext.subarray(0, nonceLength);
        const decrypted = ciphertext.subarray(nonceLength);
        return fn(key, nonce, ...args).decrypt(decrypted);
      }
    });
  }

  // ../../_polyval.js
  var BLOCK_SIZE = 16;
  var ZEROS16 = /* @__PURE__ */ new Uint8Array(16);
  var ZEROS32 = u32(ZEROS16);
  var POLY = 225;
  var mul2 = (s0, s1, s2, s3) => {
    const hiBit = s3 & 1;
    return {
      s3: s2 << 31 | s3 >>> 1,
      s2: s1 << 31 | s2 >>> 1,
      s1: s0 << 31 | s1 >>> 1,
      s0: s0 >>> 1 ^ POLY << 24 & -(hiBit & 1)
      // reduce % poly
    };
  };
  var swapLE = (n) => (n >>> 0 & 255) << 24 | (n >>> 8 & 255) << 16 | (n >>> 16 & 255) << 8 | n >>> 24 & 255 | 0;
  function _toGHASHKey(k) {
    k.reverse();
    const hiBit = k[15] & 1;
    let carry = 0;
    for (let i = 0; i < k.length; i++) {
      const t = k[i];
      k[i] = t >>> 1 | carry;
      carry = (t & 1) << 7;
    }
    k[0] ^= -hiBit & 225;
    return k;
  }
  var estimateWindow = (bytes) => {
    if (bytes > 64 * 1024)
      return 8;
    if (bytes > 1024)
      return 4;
    return 2;
  };
  var GHASH = class {
    blockLen = BLOCK_SIZE;
    outputLen = BLOCK_SIZE;
    s0 = 0;
    s1 = 0;
    s2 = 0;
    s3 = 0;
    finished = false;
    t;
    W;
    windowSize;
    // We select bits per window adaptively based on expectedLength
    constructor(key, expectedLength) {
      abytes(key, 16, "key");
      key = copyBytes(key);
      const kView = createView(key);
      let k0 = kView.getUint32(0, false);
      let k1 = kView.getUint32(4, false);
      let k2 = kView.getUint32(8, false);
      let k3 = kView.getUint32(12, false);
      const doubles = [];
      for (let i = 0; i < 128; i++) {
        doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k2), s3: swapLE(k3) });
        ({ s0: k0, s1: k1, s2: k2, s3: k3 } = mul2(k0, k1, k2, k3));
      }
      const W = estimateWindow(expectedLength || 1024);
      if (![1, 2, 4, 8].includes(W))
        throw new Error("ghash: invalid window size, expected 2, 4 or 8");
      this.W = W;
      const bits = 128;
      const windows = bits / W;
      const windowSize = this.windowSize = 2 ** W;
      const items = [];
      for (let w = 0; w < windows; w++) {
        for (let byte = 0; byte < windowSize; byte++) {
          let s0 = 0, s1 = 0, s2 = 0, s3 = 0;
          for (let j = 0; j < W; j++) {
            const bit = byte >>> W - j - 1 & 1;
            if (!bit)
              continue;
            const { s0: d0, s1: d1, s2: d2, s3: d3 } = doubles[W * w + j];
            s0 ^= d0, s1 ^= d1, s2 ^= d2, s3 ^= d3;
          }
          items.push({ s0, s1, s2, s3 });
        }
      }
      this.t = items;
    }
    _updateBlock(s0, s1, s2, s3) {
      s0 ^= this.s0, s1 ^= this.s1, s2 ^= this.s2, s3 ^= this.s3;
      const { W, t, windowSize } = this;
      let o0 = 0, o1 = 0, o2 = 0, o3 = 0;
      const mask = (1 << W) - 1;
      let w = 0;
      for (const num of [s0, s1, s2, s3]) {
        for (let bytePos = 0; bytePos < 4; bytePos++) {
          const byte = num >>> 8 * bytePos & 255;
          for (let bitPos = 8 / W - 1; bitPos >= 0; bitPos--) {
            const bit = byte >>> W * bitPos & mask;
            const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w * windowSize + bit];
            o0 ^= e0, o1 ^= e1, o2 ^= e2, o3 ^= e3;
            w += 1;
          }
        }
      }
      this.s0 = o0;
      this.s1 = o1;
      this.s2 = o2;
      this.s3 = o3;
    }
    update(data) {
      aexists(this);
      abytes(data);
      data = copyBytes(data);
      const b32 = u32(data);
      const blocks = Math.floor(data.length / BLOCK_SIZE);
      const left = data.length % BLOCK_SIZE;
      for (let i = 0; i < blocks; i++) {
        this._updateBlock(b32[i * 4 + 0], b32[i * 4 + 1], b32[i * 4 + 2], b32[i * 4 + 3]);
      }
      if (left) {
        ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
        this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);
        clean(ZEROS32);
      }
      return this;
    }
    destroy() {
      const { t } = this;
      for (const elm of t) {
        elm.s0 = 0, elm.s1 = 0, elm.s2 = 0, elm.s3 = 0;
      }
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      this.finished = true;
      const { s0, s1, s2, s3 } = this;
      const o32 = u32(out);
      o32[0] = s0;
      o32[1] = s1;
      o32[2] = s2;
      o32[3] = s3;
      return out;
    }
    digest() {
      const res = new Uint8Array(BLOCK_SIZE);
      this.digestInto(res);
      this.destroy();
      return res;
    }
  };
  var Polyval = class extends GHASH {
    constructor(key, expectedLength) {
      abytes(key);
      const ghKey = _toGHASHKey(copyBytes(key));
      super(ghKey, expectedLength);
      clean(ghKey);
    }
    update(data) {
      aexists(this);
      abytes(data);
      data = copyBytes(data);
      const b32 = u32(data);
      const left = data.length % BLOCK_SIZE;
      const blocks = Math.floor(data.length / BLOCK_SIZE);
      for (let i = 0; i < blocks; i++) {
        this._updateBlock(swapLE(b32[i * 4 + 3]), swapLE(b32[i * 4 + 2]), swapLE(b32[i * 4 + 1]), swapLE(b32[i * 4 + 0]));
      }
      if (left) {
        ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
        this._updateBlock(swapLE(ZEROS32[3]), swapLE(ZEROS32[2]), swapLE(ZEROS32[1]), swapLE(ZEROS32[0]));
        clean(ZEROS32);
      }
      return this;
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      this.finished = true;
      const { s0, s1, s2, s3 } = this;
      const o32 = u32(out);
      o32[0] = s0;
      o32[1] = s1;
      o32[2] = s2;
      o32[3] = s3;
      return out.reverse();
    }
  };
  function wrapConstructorWithKey(hashCons) {
    const hashC = (msg, key) => hashCons(key, msg.length).update(msg).digest();
    const tmp = hashCons(new Uint8Array(16), 0);
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (key, expectedLength) => hashCons(key, expectedLength);
    return hashC;
  }
  var ghash = wrapConstructorWithKey((key, expectedLength) => new GHASH(key, expectedLength));
  var polyval = wrapConstructorWithKey((key, expectedLength) => new Polyval(key, expectedLength));

  // ../../aes.js
  var BLOCK_SIZE2 = 16;
  var BLOCK_SIZE32 = 4;
  var EMPTY_BLOCK = /* @__PURE__ */ new Uint8Array(BLOCK_SIZE2);
  var POLY2 = 283;
  function validateKeyLength(key) {
    if (![16, 24, 32].includes(key.length))
      throw new Error('"aes key" expected Uint8Array of length 16/24/32, got length=' + key.length);
  }
  function mul22(n) {
    return n << 1 ^ POLY2 & -(n >> 7);
  }
  function mul(a, b) {
    let res = 0;
    for (; b > 0; b >>= 1) {
      res ^= a & -(b & 1);
      a = mul22(a);
    }
    return res;
  }
  var incBytes = (data, isLE2, carry = 1) => {
    if (!Number.isSafeInteger(carry))
      throw new Error("incBytes: wrong carry " + carry);
    abytes(data);
    for (let i = 0; i < data.length; i++) {
      const pos = !isLE2 ? data.length - 1 - i : i;
      carry = carry + (data[pos] & 255) | 0;
      data[pos] = carry & 255;
      carry >>>= 8;
    }
  };
  var sbox = /* @__PURE__ */ (() => {
    const t = new Uint8Array(256);
    for (let i = 0, x = 1; i < 256; i++, x ^= mul22(x))
      t[i] = x;
    const box = new Uint8Array(256);
    box[0] = 99;
    for (let i = 0; i < 255; i++) {
      let x = t[255 - i];
      x |= x << 8;
      box[t[i]] = (x ^ x >> 4 ^ x >> 5 ^ x >> 6 ^ x >> 7 ^ 99) & 255;
    }
    clean(t);
    return box;
  })();
  var invSbox = /* @__PURE__ */ sbox.map((_, j) => sbox.indexOf(j));
  var rotr32_8 = (n) => n << 24 | n >>> 8;
  var rotl32_8 = (n) => n << 8 | n >>> 24;
  var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  function genTtable(sbox2, fn) {
    if (sbox2.length !== 256)
      throw new Error("Wrong sbox length");
    const T0 = new Uint32Array(256).map((_, j) => fn(sbox2[j]));
    const T1 = T0.map(rotl32_8);
    const T2 = T1.map(rotl32_8);
    const T3 = T2.map(rotl32_8);
    const T01 = new Uint32Array(256 * 256);
    const T23 = new Uint32Array(256 * 256);
    const sbox22 = new Uint16Array(256 * 256);
    for (let i = 0; i < 256; i++) {
      for (let j = 0; j < 256; j++) {
        const idx = i * 256 + j;
        T01[idx] = T0[i] ^ T1[j];
        T23[idx] = T2[i] ^ T3[j];
        sbox22[idx] = sbox2[i] << 8 | sbox2[j];
      }
    }
    return { sbox: sbox2, sbox2: sbox22, T0, T1, T2, T3, T01, T23 };
  }
  var tableEncoding = /* @__PURE__ */ genTtable(sbox, (s) => mul(s, 3) << 24 | s << 16 | s << 8 | mul(s, 2));
  var tableDecoding = /* @__PURE__ */ genTtable(invSbox, (s) => mul(s, 11) << 24 | mul(s, 13) << 16 | mul(s, 9) << 8 | mul(s, 14));
  var xPowers = /* @__PURE__ */ (() => {
    const p = new Uint8Array(16);
    for (let i = 0, x = 1; i < 16; i++, x = mul22(x))
      p[i] = x;
    return p;
  })();
  function expandKeyLE(key) {
    abytes(key);
    const len = key.length;
    validateKeyLength(key);
    const { sbox2 } = tableEncoding;
    const toClean = [];
    if (!isAligned32(key))
      toClean.push(key = copyBytes(key));
    const k32 = u32(key);
    const Nk = k32.length;
    const subByte = (n) => applySbox(sbox2, n, n, n, n);
    const xk = new Uint32Array(len + 28);
    xk.set(k32);
    for (let i = Nk; i < xk.length; i++) {
      let t = xk[i - 1];
      if (i % Nk === 0)
        t = subByte(rotr32_8(t)) ^ xPowers[i / Nk - 1];
      else if (Nk > 6 && i % Nk === 4)
        t = subByte(t);
      xk[i] = xk[i - Nk] ^ t;
    }
    clean(...toClean);
    return xk;
  }
  function expandKeyDecLE(key) {
    const encKey = expandKeyLE(key);
    const xk = encKey.slice();
    const Nk = encKey.length;
    const { sbox2 } = tableEncoding;
    const { T0, T1, T2, T3 } = tableDecoding;
    for (let i = 0; i < Nk; i += 4) {
      for (let j = 0; j < 4; j++)
        xk[i + j] = encKey[Nk - i - 4 + j];
    }
    clean(encKey);
    for (let i = 4; i < Nk - 4; i++) {
      const x = xk[i];
      const w = applySbox(sbox2, x, x, x, x);
      xk[i] = T0[w & 255] ^ T1[w >>> 8 & 255] ^ T2[w >>> 16 & 255] ^ T3[w >>> 24];
    }
    return xk;
  }
  function apply0123(T01, T23, s0, s1, s2, s3) {
    return T01[s0 << 8 & 65280 | s1 >>> 8 & 255] ^ T23[s2 >>> 8 & 65280 | s3 >>> 24 & 255];
  }
  function applySbox(sbox2, s0, s1, s2, s3) {
    return sbox2[s0 & 255 | s1 & 65280] | sbox2[s2 >>> 16 & 255 | s3 >>> 16 & 65280] << 16;
  }
  function encrypt(xk, s0, s1, s2, s3) {
    const { sbox2, T01, T23 } = tableEncoding;
    let k = 0;
    s0 ^= xk[k++], s1 ^= xk[k++], s2 ^= xk[k++], s3 ^= xk[k++];
    const rounds = xk.length / 4 - 2;
    for (let i = 0; i < rounds; i++) {
      const t02 = xk[k++] ^ apply0123(T01, T23, s0, s1, s2, s3);
      const t12 = xk[k++] ^ apply0123(T01, T23, s1, s2, s3, s0);
      const t22 = xk[k++] ^ apply0123(T01, T23, s2, s3, s0, s1);
      const t32 = xk[k++] ^ apply0123(T01, T23, s3, s0, s1, s2);
      s0 = t02, s1 = t12, s2 = t22, s3 = t32;
    }
    const t0 = xk[k++] ^ applySbox(sbox2, s0, s1, s2, s3);
    const t1 = xk[k++] ^ applySbox(sbox2, s1, s2, s3, s0);
    const t2 = xk[k++] ^ applySbox(sbox2, s2, s3, s0, s1);
    const t3 = xk[k++] ^ applySbox(sbox2, s3, s0, s1, s2);
    return { s0: t0, s1: t1, s2: t2, s3: t3 };
  }
  function decrypt(xk, s0, s1, s2, s3) {
    const { sbox2, T01, T23 } = tableDecoding;
    let k = 0;
    s0 ^= xk[k++], s1 ^= xk[k++], s2 ^= xk[k++], s3 ^= xk[k++];
    const rounds = xk.length / 4 - 2;
    for (let i = 0; i < rounds; i++) {
      const t02 = xk[k++] ^ apply0123(T01, T23, s0, s3, s2, s1);
      const t12 = xk[k++] ^ apply0123(T01, T23, s1, s0, s3, s2);
      const t22 = xk[k++] ^ apply0123(T01, T23, s2, s1, s0, s3);
      const t32 = xk[k++] ^ apply0123(T01, T23, s3, s2, s1, s0);
      s0 = t02, s1 = t12, s2 = t22, s3 = t32;
    }
    const t0 = xk[k++] ^ applySbox(sbox2, s0, s3, s2, s1);
    const t1 = xk[k++] ^ applySbox(sbox2, s1, s0, s3, s2);
    const t2 = xk[k++] ^ applySbox(sbox2, s2, s1, s0, s3);
    const t3 = xk[k++] ^ applySbox(sbox2, s3, s2, s1, s0);
    return { s0: t0, s1: t1, s2: t2, s3: t3 };
  }
  function ctrCounter(xk, nonce, src, dst) {
    abytes(nonce, BLOCK_SIZE2, "nonce");
    abytes(src);
    const srcLen = src.length;
    dst = getOutput(srcLen, dst);
    complexOverlapBytes(src, dst);
    const ctr2 = nonce;
    const c32 = u32(ctr2);
    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
    const src32 = u32(src);
    const dst32 = u32(dst);
    for (let i = 0; i + 4 <= src32.length; i += 4) {
      dst32[i + 0] = src32[i + 0] ^ s0;
      dst32[i + 1] = src32[i + 1] ^ s1;
      dst32[i + 2] = src32[i + 2] ^ s2;
      dst32[i + 3] = src32[i + 3] ^ s3;
      incBytes(ctr2, false, 1);
      ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
    }
    const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
    if (start < srcLen) {
      const b32 = new Uint32Array([s0, s1, s2, s3]);
      const buf = u8(b32);
      for (let i = start, pos = 0; i < srcLen; i++, pos++)
        dst[i] = src[i] ^ buf[pos];
      clean(b32);
    }
    return dst;
  }
  function ctr32(xk, isLE2, nonce, src, dst) {
    abytes(nonce, BLOCK_SIZE2, "nonce");
    abytes(src);
    dst = getOutput(src.length, dst);
    const ctr2 = nonce;
    const c32 = u32(ctr2);
    const view = createView(ctr2);
    const src32 = u32(src);
    const dst32 = u32(dst);
    const ctrPos = isLE2 ? 0 : 12;
    const srcLen = src.length;
    let ctrNum = view.getUint32(ctrPos, isLE2);
    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
    for (let i = 0; i + 4 <= src32.length; i += 4) {
      dst32[i + 0] = src32[i + 0] ^ s0;
      dst32[i + 1] = src32[i + 1] ^ s1;
      dst32[i + 2] = src32[i + 2] ^ s2;
      dst32[i + 3] = src32[i + 3] ^ s3;
      ctrNum = ctrNum + 1 >>> 0;
      view.setUint32(ctrPos, ctrNum, isLE2);
      ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
    }
    const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
    if (start < srcLen) {
      const b32 = new Uint32Array([s0, s1, s2, s3]);
      const buf = u8(b32);
      for (let i = start, pos = 0; i < srcLen; i++, pos++)
        dst[i] = src[i] ^ buf[pos];
      clean(b32);
    }
    return dst;
  }
  var ctr = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 16 }, function aesctr(key, nonce) {
    function processCtr(buf, dst) {
      abytes(buf);
      if (dst !== void 0) {
        abytes(dst);
        if (!isAligned32(dst))
          throw new Error("unaligned destination");
      }
      const xk = expandKeyLE(key);
      const n = copyBytes(nonce);
      const toClean = [xk, n];
      if (!isAligned32(buf))
        toClean.push(buf = copyBytes(buf));
      const out = ctrCounter(xk, n, buf, dst);
      clean(...toClean);
      return out;
    }
    return {
      encrypt: (plaintext, dst) => processCtr(plaintext, dst),
      decrypt: (ciphertext, dst) => processCtr(ciphertext, dst)
    };
  });
  function validateBlockDecrypt(data) {
    abytes(data);
    if (data.length % BLOCK_SIZE2 !== 0) {
      throw new Error("aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size " + BLOCK_SIZE2);
    }
  }
  function validateBlockEncrypt(plaintext, pcks5, dst) {
    abytes(plaintext);
    let outLen = plaintext.length;
    const remaining = outLen % BLOCK_SIZE2;
    if (!pcks5 && remaining !== 0)
      throw new Error("aec/(cbc-ecb): unpadded plaintext with disabled padding");
    if (!isAligned32(plaintext))
      plaintext = copyBytes(plaintext);
    const b = u32(plaintext);
    if (pcks5) {
      let left = BLOCK_SIZE2 - remaining;
      if (!left)
        left = BLOCK_SIZE2;
      outLen = outLen + left;
    }
    dst = getOutput(outLen, dst);
    complexOverlapBytes(plaintext, dst);
    const o = u32(dst);
    return { b, o, out: dst };
  }
  function validatePCKS(data, pcks5) {
    if (!pcks5)
      return data;
    const len = data.length;
    if (!len)
      throw new Error("aes/pcks5: empty ciphertext not allowed");
    const lastByte = data[len - 1];
    if (lastByte <= 0 || lastByte > 16)
      throw new Error("aes/pcks5: wrong padding");
    const out = data.subarray(0, -lastByte);
    for (let i = 0; i < lastByte; i++)
      if (data[len - i - 1] !== lastByte)
        throw new Error("aes/pcks5: wrong padding");
    return out;
  }
  function padPCKS(left) {
    const tmp = new Uint8Array(16);
    const tmp32 = u32(tmp);
    tmp.set(left);
    const paddingByte = BLOCK_SIZE2 - left.length;
    for (let i = BLOCK_SIZE2 - paddingByte; i < BLOCK_SIZE2; i++)
      tmp[i] = paddingByte;
    return tmp32;
  }
  var ecb = /* @__PURE__ */ wrapCipher({ blockSize: 16 }, function aesecb(key, opts = {}) {
    const pcks5 = !opts.disablePadding;
    return {
      encrypt(plaintext, dst) {
        const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
        const xk = expandKeyLE(key);
        let i = 0;
        for (; i + 4 <= b.length; ) {
          const { s0, s1, s2, s3 } = encrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);
          o[i++] = s0, o[i++] = s1, o[i++] = s2, o[i++] = s3;
        }
        if (pcks5) {
          const tmp32 = padPCKS(plaintext.subarray(i * 4));
          const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);
          o[i++] = s0, o[i++] = s1, o[i++] = s2, o[i++] = s3;
        }
        clean(xk);
        return _out;
      },
      decrypt(ciphertext, dst) {
        validateBlockDecrypt(ciphertext);
        const xk = expandKeyDecLE(key);
        dst = getOutput(ciphertext.length, dst);
        const toClean = [xk];
        if (!isAligned32(ciphertext))
          toClean.push(ciphertext = copyBytes(ciphertext));
        complexOverlapBytes(ciphertext, dst);
        const b = u32(ciphertext);
        const o = u32(dst);
        for (let i = 0; i + 4 <= b.length; ) {
          const { s0, s1, s2, s3 } = decrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);
          o[i++] = s0, o[i++] = s1, o[i++] = s2, o[i++] = s3;
        }
        clean(...toClean);
        return validatePCKS(dst, pcks5);
      }
    };
  });
  var cbc = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescbc(key, iv, opts = {}) {
    const pcks5 = !opts.disablePadding;
    return {
      encrypt(plaintext, dst) {
        const xk = expandKeyLE(key);
        const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
        let _iv = iv;
        const toClean = [xk];
        if (!isAligned32(_iv))
          toClean.push(_iv = copyBytes(_iv));
        const n32 = u32(_iv);
        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
        let i = 0;
        for (; i + 4 <= b.length; ) {
          s0 ^= b[i + 0], s1 ^= b[i + 1], s2 ^= b[i + 2], s3 ^= b[i + 3];
          ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
          o[i++] = s0, o[i++] = s1, o[i++] = s2, o[i++] = s3;
        }
        if (pcks5) {
          const tmp32 = padPCKS(plaintext.subarray(i * 4));
          s0 ^= tmp32[0], s1 ^= tmp32[1], s2 ^= tmp32[2], s3 ^= tmp32[3];
          ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
          o[i++] = s0, o[i++] = s1, o[i++] = s2, o[i++] = s3;
        }
        clean(...toClean);
        return _out;
      },
      decrypt(ciphertext, dst) {
        validateBlockDecrypt(ciphertext);
        const xk = expandKeyDecLE(key);
        let _iv = iv;
        const toClean = [xk];
        if (!isAligned32(_iv))
          toClean.push(_iv = copyBytes(_iv));
        const n32 = u32(_iv);
        dst = getOutput(ciphertext.length, dst);
        if (!isAligned32(ciphertext))
          toClean.push(ciphertext = copyBytes(ciphertext));
        complexOverlapBytes(ciphertext, dst);
        const b = u32(ciphertext);
        const o = u32(dst);
        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
        for (let i = 0; i + 4 <= b.length; ) {
          const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;
          s0 = b[i + 0], s1 = b[i + 1], s2 = b[i + 2], s3 = b[i + 3];
          const { s0: o0, s1: o1, s2: o2, s3: o3 } = decrypt(xk, s0, s1, s2, s3);
          o[i++] = o0 ^ ps0, o[i++] = o1 ^ ps1, o[i++] = o2 ^ ps2, o[i++] = o3 ^ ps3;
        }
        clean(...toClean);
        return validatePCKS(dst, pcks5);
      }
    };
  });
  function computeTag(fn, isLE2, key, data, AAD) {
    const aadLength = AAD ? AAD.length : 0;
    const h = fn.create(key, data.length + aadLength);
    if (AAD)
      h.update(AAD);
    const num = u64Lengths(8 * data.length, 8 * aadLength, isLE2);
    h.update(data);
    h.update(num);
    const res = h.digest();
    clean(num);
    return res;
  }
  var gcm = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aesgcm(key, nonce, AAD) {
    if (nonce.length < 8)
      throw new Error("aes/gcm: invalid nonce length");
    const tagLength = 16;
    function _computeTag(authKey, tagMask, data) {
      const tag = computeTag(ghash, false, authKey, data, AAD);
      for (let i = 0; i < tagMask.length; i++)
        tag[i] ^= tagMask[i];
      return tag;
    }
    function deriveKeys() {
      const xk = expandKeyLE(key);
      const authKey = EMPTY_BLOCK.slice();
      const counter = EMPTY_BLOCK.slice();
      ctr32(xk, false, counter, counter, authKey);
      if (nonce.length === 12) {
        counter.set(nonce);
      } else {
        const nonceLen = EMPTY_BLOCK.slice();
        const view = createView(nonceLen);
        view.setBigUint64(8, BigInt(nonce.length * 8), false);
        const g = ghash.create(authKey).update(nonce).update(nonceLen);
        g.digestInto(counter);
        g.destroy();
      }
      const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);
      return { xk, authKey, counter, tagMask };
    }
    return {
      encrypt(plaintext) {
        const { xk, authKey, counter, tagMask } = deriveKeys();
        const out = new Uint8Array(plaintext.length + tagLength);
        const toClean = [xk, authKey, counter, tagMask];
        if (!isAligned32(plaintext))
          toClean.push(plaintext = copyBytes(plaintext));
        ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));
        const tag = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));
        toClean.push(tag);
        out.set(tag, plaintext.length);
        clean(...toClean);
        return out;
      },
      decrypt(ciphertext) {
        const { xk, authKey, counter, tagMask } = deriveKeys();
        const toClean = [xk, authKey, tagMask, counter];
        if (!isAligned32(ciphertext))
          toClean.push(ciphertext = copyBytes(ciphertext));
        const data = ciphertext.subarray(0, -tagLength);
        const passedTag = ciphertext.subarray(-tagLength);
        const tag = _computeTag(authKey, tagMask, data);
        toClean.push(tag);
        if (!equalBytes(tag, passedTag))
          throw new Error("aes/gcm: invalid ghash tag");
        const out = ctr32(xk, false, counter, data);
        clean(...toClean);
        return out;
      }
    };
  });
  var limit = (name, min, max) => (value) => {
    if (!Number.isSafeInteger(value) || min > value || value > max) {
      const minmax = "[" + min + ".." + max + "]";
      throw new Error("" + name + ": expected value in range " + minmax + ", got " + value);
    }
  };
  var gcmsiv = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aessiv(key, nonce, AAD) {
    const tagLength = 16;
    const AAD_LIMIT = limit("AAD", 0, 2 ** 36);
    const PLAIN_LIMIT = limit("plaintext", 0, 2 ** 36);
    const NONCE_LIMIT = limit("nonce", 12, 12);
    const CIPHER_LIMIT = limit("ciphertext", 16, 2 ** 36 + 16);
    abytes(key);
    validateKeyLength(key);
    NONCE_LIMIT(nonce.length);
    if (AAD !== void 0)
      AAD_LIMIT(AAD.length);
    function deriveKeys() {
      const xk = expandKeyLE(key);
      const encKey = new Uint8Array(key.length);
      const authKey = new Uint8Array(16);
      const toClean = [xk, encKey];
      let _nonce = nonce;
      if (!isAligned32(_nonce))
        toClean.push(_nonce = copyBytes(_nonce));
      const n32 = u32(_nonce);
      let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];
      let counter = 0;
      for (const derivedKey of [authKey, encKey].map(u32)) {
        const d32 = u32(derivedKey);
        for (let i = 0; i < d32.length; i += 2) {
          const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);
          d32[i + 0] = o0;
          d32[i + 1] = o1;
          s0 = ++counter;
        }
      }
      const res = { authKey, encKey: expandKeyLE(encKey) };
      clean(...toClean);
      return res;
    }
    function _computeTag(encKey, authKey, data) {
      const tag = computeTag(polyval, true, authKey, data, AAD);
      for (let i = 0; i < 12; i++)
        tag[i] ^= nonce[i];
      tag[15] &= 127;
      const t32 = u32(tag);
      let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];
      ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));
      t32[0] = s0, t32[1] = s1, t32[2] = s2, t32[3] = s3;
      return tag;
    }
    function processSiv(encKey, tag, input) {
      let block = copyBytes(tag);
      block[15] |= 128;
      const res = ctr32(encKey, true, block, input);
      clean(block);
      return res;
    }
    return {
      encrypt(plaintext) {
        PLAIN_LIMIT(plaintext.length);
        const { encKey, authKey } = deriveKeys();
        const tag = _computeTag(encKey, authKey, plaintext);
        const toClean = [encKey, authKey, tag];
        if (!isAligned32(plaintext))
          toClean.push(plaintext = copyBytes(plaintext));
        const out = new Uint8Array(plaintext.length + tagLength);
        out.set(tag, plaintext.length);
        out.set(processSiv(encKey, tag, plaintext));
        clean(...toClean);
        return out;
      },
      decrypt(ciphertext) {
        CIPHER_LIMIT(ciphertext.length);
        const tag = ciphertext.subarray(-tagLength);
        const { encKey, authKey } = deriveKeys();
        const toClean = [encKey, authKey];
        if (!isAligned32(ciphertext))
          toClean.push(ciphertext = copyBytes(ciphertext));
        const plaintext = processSiv(encKey, tag, ciphertext.subarray(0, -tagLength));
        const expectedTag = _computeTag(encKey, authKey, plaintext);
        toClean.push(expectedTag);
        if (!equalBytes(tag, expectedTag)) {
          clean(...toClean);
          throw new Error("invalid polyval tag");
        }
        clean(...toClean);
        return plaintext;
      }
    };
  });
  var siv = gcmsiv;
  function isBytes32(a) {
    return a instanceof Uint32Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint32Array";
  }
  function encryptBlock(xk, block) {
    abytes(block, 16, "block");
    if (!isBytes32(xk))
      throw new Error("_encryptBlock accepts result of expandKeyLE");
    const b32 = u32(block);
    let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);
    b32[0] = s0, b32[1] = s1, b32[2] = s2, b32[3] = s3;
    return block;
  }
  function decryptBlock(xk, block) {
    abytes(block, 16, "block");
    if (!isBytes32(xk))
      throw new Error("_decryptBlock accepts result of expandKeyLE");
    const b32 = u32(block);
    let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);
    b32[0] = s0, b32[1] = s1, b32[2] = s2, b32[3] = s3;
    return block;
  }
  var AESW = {
    /*
    High-level pseudocode:
    ```
    A: u64 = IV
    out = []
    for (let i=0, ctr = 0; i<6; i++) {
      for (const chunk of chunks(plaintext, 8)) {
        A ^= swapEndianess(ctr++)
        [A, res] = chunks(encrypt(A || chunk), 8);
        out ||= res
      }
    }
    out = A || out
    ```
    Decrypt is the same, but reversed.
    */
    encrypt(kek, out) {
      if (out.length >= 2 ** 32)
        throw new Error("plaintext should be less than 4gb");
      const xk = expandKeyLE(kek);
      if (out.length === 16)
        encryptBlock(xk, out);
      else {
        const o32 = u32(out);
        let a0 = o32[0], a1 = o32[1];
        for (let j = 0, ctr2 = 1; j < 6; j++) {
          for (let pos = 2; pos < o32.length; pos += 2, ctr2++) {
            const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
            a0 = s0, a1 = s1 ^ byteSwap(ctr2), o32[pos] = s2, o32[pos + 1] = s3;
          }
        }
        o32[0] = a0, o32[1] = a1;
      }
      xk.fill(0);
    },
    decrypt(kek, out) {
      if (out.length - 8 >= 2 ** 32)
        throw new Error("ciphertext should be less than 4gb");
      const xk = expandKeyDecLE(kek);
      const chunks = out.length / 8 - 1;
      if (chunks === 1)
        decryptBlock(xk, out);
      else {
        const o32 = u32(out);
        let a0 = o32[0], a1 = o32[1];
        for (let j = 0, ctr2 = chunks * 6; j < 6; j++) {
          for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr2--) {
            a1 ^= byteSwap(ctr2);
            const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
            a0 = s0, a1 = s1, o32[pos] = s2, o32[pos + 1] = s3;
          }
        }
        o32[0] = a0, o32[1] = a1;
      }
      xk.fill(0);
    }
  };
  var AESKW_IV = /* @__PURE__ */ new Uint8Array(8).fill(166);
  var aeskw = /* @__PURE__ */ wrapCipher({ blockSize: 8 }, (kek) => ({
    encrypt(plaintext) {
      if (!plaintext.length || plaintext.length % 8 !== 0)
        throw new Error("invalid plaintext length");
      if (plaintext.length === 8)
        throw new Error("8-byte keys not allowed in AESKW, use AESKWP instead");
      const out = concatBytes(AESKW_IV, plaintext);
      AESW.encrypt(kek, out);
      return out;
    },
    decrypt(ciphertext) {
      if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)
        throw new Error("invalid ciphertext length");
      const out = copyBytes(ciphertext);
      AESW.decrypt(kek, out);
      if (!equalBytes(out.subarray(0, 8), AESKW_IV))
        throw new Error("integrity check failed");
      out.subarray(0, 8).fill(0);
      return out.subarray(8);
    }
  }));
  var AESKWP_IV = 2790873510;
  var aeskwp = /* @__PURE__ */ wrapCipher({ blockSize: 8 }, (kek) => ({
    encrypt(plaintext) {
      if (!plaintext.length)
        throw new Error("invalid plaintext length");
      const padded = Math.ceil(plaintext.length / 8) * 8;
      const out = new Uint8Array(8 + padded);
      out.set(plaintext, 8);
      const out32 = u32(out);
      out32[0] = AESKWP_IV;
      out32[1] = byteSwap(plaintext.length);
      AESW.encrypt(kek, out);
      return out;
    },
    decrypt(ciphertext) {
      if (ciphertext.length < 16)
        throw new Error("invalid ciphertext length");
      const out = copyBytes(ciphertext);
      const o32 = u32(out);
      AESW.decrypt(kek, out);
      const len = byteSwap(o32[1]) >>> 0;
      const padded = Math.ceil(len / 8) * 8;
      if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)
        throw new Error("integrity check failed");
      for (let i = len; i < padded; i++)
        if (out[8 + i] !== 0)
          throw new Error("integrity check failed");
      out.subarray(0, 8).fill(0);
      return out.subarray(8, 8 + len);
    }
  }));

  // ../../_arx.js
  var encodeStr = (str) => Uint8Array.from(str.split(""), (c) => c.charCodeAt(0));
  var sigma16 = encodeStr("expand 16-byte k");
  var sigma32 = encodeStr("expand 32-byte k");
  var sigma16_32 = u32(sigma16);
  var sigma32_32 = u32(sigma32);
  function rotl(a, b) {
    return a << b | a >>> 32 - b;
  }
  function isAligned322(b) {
    return b.byteOffset % 4 === 0;
  }
  var BLOCK_LEN = 64;
  var BLOCK_LEN32 = 16;
  var MAX_COUNTER = 2 ** 32 - 1;
  var U32_EMPTY = Uint32Array.of();
  function runCipher(core, sigma, key, nonce, data, output, counter, rounds) {
    const len = data.length;
    const block = new Uint8Array(BLOCK_LEN);
    const b32 = u32(block);
    const isAligned = isAligned322(data) && isAligned322(output);
    const d32 = isAligned ? u32(data) : U32_EMPTY;
    const o32 = isAligned ? u32(output) : U32_EMPTY;
    for (let pos = 0; pos < len; counter++) {
      core(sigma, key, nonce, b32, counter, rounds);
      if (counter >= MAX_COUNTER)
        throw new Error("arx: counter overflow");
      const take = Math.min(BLOCK_LEN, len - pos);
      if (isAligned && take === BLOCK_LEN) {
        const pos32 = pos / 4;
        if (pos % 4 !== 0)
          throw new Error("arx: invalid block position");
        for (let j = 0, posj; j < BLOCK_LEN32; j++) {
          posj = pos32 + j;
          o32[posj] = d32[posj] ^ b32[j];
        }
        pos += BLOCK_LEN;
        continue;
      }
      for (let j = 0, posj; j < take; j++) {
        posj = pos + j;
        output[posj] = data[posj] ^ block[j];
      }
      pos += take;
    }
  }
  function createCipher(core, opts) {
    const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = checkOpts({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, opts);
    if (typeof core !== "function")
      throw new Error("core must be a function");
    anumber(counterLength);
    anumber(rounds);
    abool(counterRight);
    abool(allowShortKeys);
    return (key, nonce, data, output, counter = 0) => {
      abytes(key, void 0, "key");
      abytes(nonce, void 0, "nonce");
      abytes(data, void 0, "data");
      const len = data.length;
      if (output === void 0)
        output = new Uint8Array(len);
      abytes(output, void 0, "output");
      anumber(counter);
      if (counter < 0 || counter >= MAX_COUNTER)
        throw new Error("arx: counter overflow");
      if (output.length < len)
        throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);
      const toClean = [];
      let l = key.length;
      let k;
      let sigma;
      if (l === 32) {
        toClean.push(k = copyBytes(key));
        sigma = sigma32_32;
      } else if (l === 16 && allowShortKeys) {
        k = new Uint8Array(32);
        k.set(key);
        k.set(key, 16);
        sigma = sigma16_32;
        toClean.push(k);
      } else {
        abytes(key, 32, "arx key");
        throw new Error("invalid key size");
      }
      if (!isAligned322(nonce))
        toClean.push(nonce = copyBytes(nonce));
      const k32 = u32(k);
      if (extendNonceFn) {
        if (nonce.length !== 24)
          throw new Error(`arx: extended nonce must be 24 bytes`);
        extendNonceFn(sigma, k32, u32(nonce.subarray(0, 16)), k32);
        nonce = nonce.subarray(16);
      }
      const nonceNcLen = 16 - counterLength;
      if (nonceNcLen !== nonce.length)
        throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);
      if (nonceNcLen !== 12) {
        const nc = new Uint8Array(12);
        nc.set(nonce, counterRight ? 0 : 12 - nonce.length);
        nonce = nc;
        toClean.push(nonce);
      }
      const n32 = u32(nonce);
      runCipher(core, sigma, k32, n32, data, output, counter, rounds);
      clean(...toClean);
      return output;
    };
  }

  // ../../_poly1305.js
  function u8to16(a, i) {
    return a[i++] & 255 | (a[i++] & 255) << 8;
  }
  var Poly1305 = class {
    blockLen = 16;
    outputLen = 16;
    buffer = new Uint8Array(16);
    r = new Uint16Array(10);
    // Allocating 1 array with .subarray() here is slower than 3
    h = new Uint16Array(10);
    pad = new Uint16Array(8);
    pos = 0;
    finished = false;
    // Can be speed-up using BigUint64Array, at the cost of complexity
    constructor(key) {
      key = copyBytes(abytes(key, 32, "key"));
      const t0 = u8to16(key, 0);
      const t1 = u8to16(key, 2);
      const t2 = u8to16(key, 4);
      const t3 = u8to16(key, 6);
      const t4 = u8to16(key, 8);
      const t5 = u8to16(key, 10);
      const t6 = u8to16(key, 12);
      const t7 = u8to16(key, 14);
      this.r[0] = t0 & 8191;
      this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
      this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
      this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
      this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
      this.r[5] = t4 >>> 1 & 8190;
      this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
      this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
      this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
      this.r[9] = t7 >>> 5 & 127;
      for (let i = 0; i < 8; i++)
        this.pad[i] = u8to16(key, 16 + 2 * i);
    }
    process(data, offset, isLast = false) {
      const hibit = isLast ? 0 : 1 << 11;
      const { h, r } = this;
      const r0 = r[0];
      const r1 = r[1];
      const r2 = r[2];
      const r3 = r[3];
      const r4 = r[4];
      const r5 = r[5];
      const r6 = r[6];
      const r7 = r[7];
      const r8 = r[8];
      const r9 = r[9];
      const t0 = u8to16(data, offset + 0);
      const t1 = u8to16(data, offset + 2);
      const t2 = u8to16(data, offset + 4);
      const t3 = u8to16(data, offset + 6);
      const t4 = u8to16(data, offset + 8);
      const t5 = u8to16(data, offset + 10);
      const t6 = u8to16(data, offset + 12);
      const t7 = u8to16(data, offset + 14);
      let h0 = h[0] + (t0 & 8191);
      let h1 = h[1] + ((t0 >>> 13 | t1 << 3) & 8191);
      let h2 = h[2] + ((t1 >>> 10 | t2 << 6) & 8191);
      let h3 = h[3] + ((t2 >>> 7 | t3 << 9) & 8191);
      let h4 = h[4] + ((t3 >>> 4 | t4 << 12) & 8191);
      let h5 = h[5] + (t4 >>> 1 & 8191);
      let h6 = h[6] + ((t4 >>> 14 | t5 << 2) & 8191);
      let h7 = h[7] + ((t5 >>> 11 | t6 << 5) & 8191);
      let h8 = h[8] + ((t6 >>> 8 | t7 << 8) & 8191);
      let h9 = h[9] + (t7 >>> 5 | hibit);
      let c = 0;
      let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);
      c = d0 >>> 13;
      d0 &= 8191;
      d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);
      c += d0 >>> 13;
      d0 &= 8191;
      let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);
      c = d1 >>> 13;
      d1 &= 8191;
      d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);
      c += d1 >>> 13;
      d1 &= 8191;
      let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);
      c = d2 >>> 13;
      d2 &= 8191;
      d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);
      c += d2 >>> 13;
      d2 &= 8191;
      let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);
      c = d3 >>> 13;
      d3 &= 8191;
      d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);
      c += d3 >>> 13;
      d3 &= 8191;
      let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;
      c = d4 >>> 13;
      d4 &= 8191;
      d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);
      c += d4 >>> 13;
      d4 &= 8191;
      let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;
      c = d5 >>> 13;
      d5 &= 8191;
      d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);
      c += d5 >>> 13;
      d5 &= 8191;
      let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;
      c = d6 >>> 13;
      d6 &= 8191;
      d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);
      c += d6 >>> 13;
      d6 &= 8191;
      let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;
      c = d7 >>> 13;
      d7 &= 8191;
      d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);
      c += d7 >>> 13;
      d7 &= 8191;
      let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;
      c = d8 >>> 13;
      d8 &= 8191;
      d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);
      c += d8 >>> 13;
      d8 &= 8191;
      let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;
      c = d9 >>> 13;
      d9 &= 8191;
      d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;
      c += d9 >>> 13;
      d9 &= 8191;
      c = (c << 2) + c | 0;
      c = c + d0 | 0;
      d0 = c & 8191;
      c = c >>> 13;
      d1 += c;
      h[0] = d0;
      h[1] = d1;
      h[2] = d2;
      h[3] = d3;
      h[4] = d4;
      h[5] = d5;
      h[6] = d6;
      h[7] = d7;
      h[8] = d8;
      h[9] = d9;
    }
    finalize() {
      const { h, pad } = this;
      const g = new Uint16Array(10);
      let c = h[1] >>> 13;
      h[1] &= 8191;
      for (let i = 2; i < 10; i++) {
        h[i] += c;
        c = h[i] >>> 13;
        h[i] &= 8191;
      }
      h[0] += c * 5;
      c = h[0] >>> 13;
      h[0] &= 8191;
      h[1] += c;
      c = h[1] >>> 13;
      h[1] &= 8191;
      h[2] += c;
      g[0] = h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 8191;
      for (let i = 1; i < 10; i++) {
        g[i] = h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 8191;
      }
      g[9] -= 1 << 13;
      let mask = (c ^ 1) - 1;
      for (let i = 0; i < 10; i++)
        g[i] &= mask;
      mask = ~mask;
      for (let i = 0; i < 10; i++)
        h[i] = h[i] & mask | g[i];
      h[0] = (h[0] | h[1] << 13) & 65535;
      h[1] = (h[1] >>> 3 | h[2] << 10) & 65535;
      h[2] = (h[2] >>> 6 | h[3] << 7) & 65535;
      h[3] = (h[3] >>> 9 | h[4] << 4) & 65535;
      h[4] = (h[4] >>> 12 | h[5] << 1 | h[6] << 14) & 65535;
      h[5] = (h[6] >>> 2 | h[7] << 11) & 65535;
      h[6] = (h[7] >>> 5 | h[8] << 8) & 65535;
      h[7] = (h[8] >>> 8 | h[9] << 5) & 65535;
      let f = h[0] + pad[0];
      h[0] = f & 65535;
      for (let i = 1; i < 8; i++) {
        f = (h[i] + pad[i] | 0) + (f >>> 16) | 0;
        h[i] = f & 65535;
      }
      clean(g);
    }
    update(data) {
      aexists(this);
      abytes(data);
      data = copyBytes(data);
      const { buffer, blockLen } = this;
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(data, pos);
          continue;
        }
        buffer.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(buffer, 0, false);
          this.pos = 0;
        }
      }
      return this;
    }
    destroy() {
      clean(this.h, this.r, this.buffer, this.pad);
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      this.finished = true;
      const { buffer, h } = this;
      let { pos } = this;
      if (pos) {
        buffer[pos++] = 1;
        for (; pos < 16; pos++)
          buffer[pos] = 0;
        this.process(buffer, 0, true);
      }
      this.finalize();
      let opos = 0;
      for (let i = 0; i < 8; i++) {
        out[opos++] = h[i] >>> 0;
        out[opos++] = h[i] >>> 8;
      }
      return out;
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
  };
  function wrapConstructorWithKey2(hashCons) {
    const hashC = (msg, key) => hashCons(key).update(msg).digest();
    const tmp = hashCons(new Uint8Array(32));
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (key) => hashCons(key);
    return hashC;
  }
  var poly1305 = /* @__PURE__ */ (() => wrapConstructorWithKey2((key) => new Poly1305(key)))();

  // ../../chacha.js
  function chachaCore(s, k, n, out, cnt, rounds = 20) {
    let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3], y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7], y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let r = 0; r < rounds; r += 2) {
      x00 = x00 + x04 | 0;
      x12 = rotl(x12 ^ x00, 16);
      x08 = x08 + x12 | 0;
      x04 = rotl(x04 ^ x08, 12);
      x00 = x00 + x04 | 0;
      x12 = rotl(x12 ^ x00, 8);
      x08 = x08 + x12 | 0;
      x04 = rotl(x04 ^ x08, 7);
      x01 = x01 + x05 | 0;
      x13 = rotl(x13 ^ x01, 16);
      x09 = x09 + x13 | 0;
      x05 = rotl(x05 ^ x09, 12);
      x01 = x01 + x05 | 0;
      x13 = rotl(x13 ^ x01, 8);
      x09 = x09 + x13 | 0;
      x05 = rotl(x05 ^ x09, 7);
      x02 = x02 + x06 | 0;
      x14 = rotl(x14 ^ x02, 16);
      x10 = x10 + x14 | 0;
      x06 = rotl(x06 ^ x10, 12);
      x02 = x02 + x06 | 0;
      x14 = rotl(x14 ^ x02, 8);
      x10 = x10 + x14 | 0;
      x06 = rotl(x06 ^ x10, 7);
      x03 = x03 + x07 | 0;
      x15 = rotl(x15 ^ x03, 16);
      x11 = x11 + x15 | 0;
      x07 = rotl(x07 ^ x11, 12);
      x03 = x03 + x07 | 0;
      x15 = rotl(x15 ^ x03, 8);
      x11 = x11 + x15 | 0;
      x07 = rotl(x07 ^ x11, 7);
      x00 = x00 + x05 | 0;
      x15 = rotl(x15 ^ x00, 16);
      x10 = x10 + x15 | 0;
      x05 = rotl(x05 ^ x10, 12);
      x00 = x00 + x05 | 0;
      x15 = rotl(x15 ^ x00, 8);
      x10 = x10 + x15 | 0;
      x05 = rotl(x05 ^ x10, 7);
      x01 = x01 + x06 | 0;
      x12 = rotl(x12 ^ x01, 16);
      x11 = x11 + x12 | 0;
      x06 = rotl(x06 ^ x11, 12);
      x01 = x01 + x06 | 0;
      x12 = rotl(x12 ^ x01, 8);
      x11 = x11 + x12 | 0;
      x06 = rotl(x06 ^ x11, 7);
      x02 = x02 + x07 | 0;
      x13 = rotl(x13 ^ x02, 16);
      x08 = x08 + x13 | 0;
      x07 = rotl(x07 ^ x08, 12);
      x02 = x02 + x07 | 0;
      x13 = rotl(x13 ^ x02, 8);
      x08 = x08 + x13 | 0;
      x07 = rotl(x07 ^ x08, 7);
      x03 = x03 + x04 | 0;
      x14 = rotl(x14 ^ x03, 16);
      x09 = x09 + x14 | 0;
      x04 = rotl(x04 ^ x09, 12);
      x03 = x03 + x04 | 0;
      x14 = rotl(x14 ^ x03, 8);
      x09 = x09 + x14 | 0;
      x04 = rotl(x04 ^ x09, 7);
    }
    let oi = 0;
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function hchacha(s, k, i, out) {
    let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3], x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3], x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7], x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];
    for (let r = 0; r < 20; r += 2) {
      x00 = x00 + x04 | 0;
      x12 = rotl(x12 ^ x00, 16);
      x08 = x08 + x12 | 0;
      x04 = rotl(x04 ^ x08, 12);
      x00 = x00 + x04 | 0;
      x12 = rotl(x12 ^ x00, 8);
      x08 = x08 + x12 | 0;
      x04 = rotl(x04 ^ x08, 7);
      x01 = x01 + x05 | 0;
      x13 = rotl(x13 ^ x01, 16);
      x09 = x09 + x13 | 0;
      x05 = rotl(x05 ^ x09, 12);
      x01 = x01 + x05 | 0;
      x13 = rotl(x13 ^ x01, 8);
      x09 = x09 + x13 | 0;
      x05 = rotl(x05 ^ x09, 7);
      x02 = x02 + x06 | 0;
      x14 = rotl(x14 ^ x02, 16);
      x10 = x10 + x14 | 0;
      x06 = rotl(x06 ^ x10, 12);
      x02 = x02 + x06 | 0;
      x14 = rotl(x14 ^ x02, 8);
      x10 = x10 + x14 | 0;
      x06 = rotl(x06 ^ x10, 7);
      x03 = x03 + x07 | 0;
      x15 = rotl(x15 ^ x03, 16);
      x11 = x11 + x15 | 0;
      x07 = rotl(x07 ^ x11, 12);
      x03 = x03 + x07 | 0;
      x15 = rotl(x15 ^ x03, 8);
      x11 = x11 + x15 | 0;
      x07 = rotl(x07 ^ x11, 7);
      x00 = x00 + x05 | 0;
      x15 = rotl(x15 ^ x00, 16);
      x10 = x10 + x15 | 0;
      x05 = rotl(x05 ^ x10, 12);
      x00 = x00 + x05 | 0;
      x15 = rotl(x15 ^ x00, 8);
      x10 = x10 + x15 | 0;
      x05 = rotl(x05 ^ x10, 7);
      x01 = x01 + x06 | 0;
      x12 = rotl(x12 ^ x01, 16);
      x11 = x11 + x12 | 0;
      x06 = rotl(x06 ^ x11, 12);
      x01 = x01 + x06 | 0;
      x12 = rotl(x12 ^ x01, 8);
      x11 = x11 + x12 | 0;
      x06 = rotl(x06 ^ x11, 7);
      x02 = x02 + x07 | 0;
      x13 = rotl(x13 ^ x02, 16);
      x08 = x08 + x13 | 0;
      x07 = rotl(x07 ^ x08, 12);
      x02 = x02 + x07 | 0;
      x13 = rotl(x13 ^ x02, 8);
      x08 = x08 + x13 | 0;
      x07 = rotl(x07 ^ x08, 7);
      x03 = x03 + x04 | 0;
      x14 = rotl(x14 ^ x03, 16);
      x09 = x09 + x14 | 0;
      x04 = rotl(x04 ^ x09, 12);
      x03 = x03 + x04 | 0;
      x14 = rotl(x14 ^ x03, 8);
      x09 = x09 + x14 | 0;
      x04 = rotl(x04 ^ x09, 7);
    }
    let oi = 0;
    out[oi++] = x00;
    out[oi++] = x01;
    out[oi++] = x02;
    out[oi++] = x03;
    out[oi++] = x12;
    out[oi++] = x13;
    out[oi++] = x14;
    out[oi++] = x15;
  }
  var chacha20 = /* @__PURE__ */ createCipher(chachaCore, {
    counterRight: false,
    counterLength: 4,
    allowShortKeys: false
  });
  var xchacha20 = /* @__PURE__ */ createCipher(chachaCore, {
    counterRight: false,
    counterLength: 8,
    extendNonceFn: hchacha,
    allowShortKeys: false
  });
  var chacha8 = /* @__PURE__ */ createCipher(chachaCore, {
    counterRight: false,
    counterLength: 4,
    rounds: 8
  });
  var chacha12 = /* @__PURE__ */ createCipher(chachaCore, {
    counterRight: false,
    counterLength: 4,
    rounds: 12
  });
  var ZEROS162 = /* @__PURE__ */ new Uint8Array(16);
  var updatePadded = (h, msg) => {
    h.update(msg);
    const leftover = msg.length % 16;
    if (leftover)
      h.update(ZEROS162.subarray(leftover));
  };
  var ZEROS322 = /* @__PURE__ */ new Uint8Array(32);
  function computeTag2(fn, key, nonce, ciphertext, AAD) {
    if (AAD !== void 0)
      abytes(AAD, void 0, "AAD");
    const authKey = fn(key, nonce, ZEROS322);
    const lengths = u64Lengths(ciphertext.length, AAD ? AAD.length : 0, true);
    const h = poly1305.create(authKey);
    if (AAD)
      updatePadded(h, AAD);
    updatePadded(h, ciphertext);
    h.update(lengths);
    const res = h.digest();
    clean(authKey, lengths);
    return res;
  }
  var _poly1305_aead = (xorStream) => (key, nonce, AAD) => {
    const tagLength = 16;
    return {
      encrypt(plaintext, output) {
        const plength = plaintext.length;
        output = getOutput(plength + tagLength, output, false);
        output.set(plaintext);
        const oPlain = output.subarray(0, -tagLength);
        xorStream(key, nonce, oPlain, oPlain, 1);
        const tag = computeTag2(xorStream, key, nonce, oPlain, AAD);
        output.set(tag, plength);
        clean(tag);
        return output;
      },
      decrypt(ciphertext, output) {
        output = getOutput(ciphertext.length - tagLength, output, false);
        const data = ciphertext.subarray(0, -tagLength);
        const passedTag = ciphertext.subarray(-tagLength);
        const tag = computeTag2(xorStream, key, nonce, data, AAD);
        if (!equalBytes(passedTag, tag))
          throw new Error("invalid tag");
        output.set(ciphertext.subarray(0, -tagLength));
        xorStream(key, nonce, output, output, 1);
        clean(tag);
        return output;
      }
    };
  };
  var chacha20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _poly1305_aead(chacha20));
  var xchacha20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 24, tagLength: 16 }, _poly1305_aead(xchacha20));

  // ../../salsa.js
  function salsaCore(s, k, n, out, cnt, rounds = 20) {
    let y00 = s[0], y01 = k[0], y02 = k[1], y03 = k[2], y04 = k[3], y05 = s[1], y06 = n[0], y07 = n[1], y08 = cnt, y09 = 0, y10 = s[2], y11 = k[4], y12 = k[5], y13 = k[6], y14 = k[7], y15 = s[3];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let r = 0; r < rounds; r += 2) {
      x04 ^= rotl(x00 + x12 | 0, 7);
      x08 ^= rotl(x04 + x00 | 0, 9);
      x12 ^= rotl(x08 + x04 | 0, 13);
      x00 ^= rotl(x12 + x08 | 0, 18);
      x09 ^= rotl(x05 + x01 | 0, 7);
      x13 ^= rotl(x09 + x05 | 0, 9);
      x01 ^= rotl(x13 + x09 | 0, 13);
      x05 ^= rotl(x01 + x13 | 0, 18);
      x14 ^= rotl(x10 + x06 | 0, 7);
      x02 ^= rotl(x14 + x10 | 0, 9);
      x06 ^= rotl(x02 + x14 | 0, 13);
      x10 ^= rotl(x06 + x02 | 0, 18);
      x03 ^= rotl(x15 + x11 | 0, 7);
      x07 ^= rotl(x03 + x15 | 0, 9);
      x11 ^= rotl(x07 + x03 | 0, 13);
      x15 ^= rotl(x11 + x07 | 0, 18);
      x01 ^= rotl(x00 + x03 | 0, 7);
      x02 ^= rotl(x01 + x00 | 0, 9);
      x03 ^= rotl(x02 + x01 | 0, 13);
      x00 ^= rotl(x03 + x02 | 0, 18);
      x06 ^= rotl(x05 + x04 | 0, 7);
      x07 ^= rotl(x06 + x05 | 0, 9);
      x04 ^= rotl(x07 + x06 | 0, 13);
      x05 ^= rotl(x04 + x07 | 0, 18);
      x11 ^= rotl(x10 + x09 | 0, 7);
      x08 ^= rotl(x11 + x10 | 0, 9);
      x09 ^= rotl(x08 + x11 | 0, 13);
      x10 ^= rotl(x09 + x08 | 0, 18);
      x12 ^= rotl(x15 + x14 | 0, 7);
      x13 ^= rotl(x12 + x15 | 0, 9);
      x14 ^= rotl(x13 + x12 | 0, 13);
      x15 ^= rotl(x14 + x13 | 0, 18);
    }
    let oi = 0;
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function hsalsa(s, k, i, out) {
    let x00 = s[0], x01 = k[0], x02 = k[1], x03 = k[2], x04 = k[3], x05 = s[1], x06 = i[0], x07 = i[1], x08 = i[2], x09 = i[3], x10 = s[2], x11 = k[4], x12 = k[5], x13 = k[6], x14 = k[7], x15 = s[3];
    for (let r = 0; r < 20; r += 2) {
      x04 ^= rotl(x00 + x12 | 0, 7);
      x08 ^= rotl(x04 + x00 | 0, 9);
      x12 ^= rotl(x08 + x04 | 0, 13);
      x00 ^= rotl(x12 + x08 | 0, 18);
      x09 ^= rotl(x05 + x01 | 0, 7);
      x13 ^= rotl(x09 + x05 | 0, 9);
      x01 ^= rotl(x13 + x09 | 0, 13);
      x05 ^= rotl(x01 + x13 | 0, 18);
      x14 ^= rotl(x10 + x06 | 0, 7);
      x02 ^= rotl(x14 + x10 | 0, 9);
      x06 ^= rotl(x02 + x14 | 0, 13);
      x10 ^= rotl(x06 + x02 | 0, 18);
      x03 ^= rotl(x15 + x11 | 0, 7);
      x07 ^= rotl(x03 + x15 | 0, 9);
      x11 ^= rotl(x07 + x03 | 0, 13);
      x15 ^= rotl(x11 + x07 | 0, 18);
      x01 ^= rotl(x00 + x03 | 0, 7);
      x02 ^= rotl(x01 + x00 | 0, 9);
      x03 ^= rotl(x02 + x01 | 0, 13);
      x00 ^= rotl(x03 + x02 | 0, 18);
      x06 ^= rotl(x05 + x04 | 0, 7);
      x07 ^= rotl(x06 + x05 | 0, 9);
      x04 ^= rotl(x07 + x06 | 0, 13);
      x05 ^= rotl(x04 + x07 | 0, 18);
      x11 ^= rotl(x10 + x09 | 0, 7);
      x08 ^= rotl(x11 + x10 | 0, 9);
      x09 ^= rotl(x08 + x11 | 0, 13);
      x10 ^= rotl(x09 + x08 | 0, 18);
      x12 ^= rotl(x15 + x14 | 0, 7);
      x13 ^= rotl(x12 + x15 | 0, 9);
      x14 ^= rotl(x13 + x12 | 0, 13);
      x15 ^= rotl(x14 + x13 | 0, 18);
    }
    let oi = 0;
    out[oi++] = x00;
    out[oi++] = x05;
    out[oi++] = x10;
    out[oi++] = x15;
    out[oi++] = x06;
    out[oi++] = x07;
    out[oi++] = x08;
    out[oi++] = x09;
  }
  var salsa20 = /* @__PURE__ */ createCipher(salsaCore, {
    allowShortKeys: true,
    counterRight: true
  });
  var xsalsa20 = /* @__PURE__ */ createCipher(salsaCore, {
    counterRight: true,
    extendNonceFn: hsalsa
  });
  var xsalsa20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 24, tagLength: 16 }, (key, nonce) => {
    return {
      encrypt(plaintext, output) {
        output = getOutput(plaintext.length + 32, output, false);
        const authKey = output.subarray(0, 32);
        const ciphPlaintext = output.subarray(32);
        output.set(plaintext, 32);
        clean(authKey);
        xsalsa20(key, nonce, output, output);
        const tag = poly1305(ciphPlaintext, authKey);
        output.set(tag, 16);
        clean(output.subarray(0, 16), tag);
        return output.subarray(16);
      },
      decrypt(ciphertext, output) {
        abytes(ciphertext);
        output = getOutput(ciphertext.length + 32, output, false);
        const tmp = output.subarray(0, 32);
        const passedTag = output.subarray(32, 48);
        const ciphPlaintext = output.subarray(48);
        output.set(ciphertext, 32);
        clean(tmp);
        const authKey = xsalsa20(key, nonce, tmp, tmp);
        const tag = poly1305(ciphPlaintext, authKey);
        if (!equalBytes(passedTag, tag))
          throw new Error("invalid tag");
        xsalsa20(key, nonce, output.subarray(16), output.subarray(16));
        clean(tmp, passedTag, tag);
        return ciphPlaintext;
      }
    };
  });

  // input.js
  var utils = { bytesToHex, hexToBytes, managedNonce, randomBytes };
  return __toCommonJS(input_exports);
})();
/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\vendor\noble-ciphers.js
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\vendor\noble-hashes.js
# HASH: 64edcb68e6fe5924f37e65c9c38eee2a631f9aad6cba697675970bb4ca34fa41
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

var nobleHashes = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // input.js
  var input_exports = {};
  __export(input_exports, {
    argon2id: () => argon2id,
    blake224: () => blake224,
    blake256: () => blake256,
    blake2b: () => blake2b,
    blake2s: () => blake2s,
    blake3: () => blake3,
    blake384: () => blake384,
    blake512: () => blake512,
    cshake128: () => cshake128,
    cshake256: () => cshake256,
    eskdf: () => eskdf,
    hkdf: () => hkdf,
    hmac: () => hmac,
    keccak_224: () => keccak_224,
    keccak_256: () => keccak_256,
    keccak_384: () => keccak_384,
    keccak_512: () => keccak_512,
    keccakprg: () => keccakprg,
    kmac128: () => kmac128,
    kmac256: () => kmac256,
    kt128: () => kt128,
    kt256: () => kt256,
    md5: () => md5,
    pbkdf2: () => pbkdf2,
    pbkdf2Async: () => pbkdf2Async,
    ripemd160: () => ripemd160,
    scrypt: () => scrypt,
    scryptAsync: () => scryptAsync,
    sha1: () => sha1,
    sha224: () => sha224,
    sha256: () => sha256,
    sha384: () => sha384,
    sha3_224: () => sha3_224,
    sha3_256: () => sha3_256,
    sha3_384: () => sha3_384,
    sha3_512: () => sha3_512,
    sha512: () => sha512,
    sha512_224: () => sha512_224,
    sha512_256: () => sha512_256,
    shake128: () => shake128,
    shake256: () => shake256,
    turboshake128: () => turboshake128,
    turboshake256: () => turboshake256,
    utils: () => utils,
    webcrypto: () => webcrypto_exports
  });

  // ../../utils.js
  function isBytes(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
  }
  function anumber(n, title = "") {
    if (!Number.isSafeInteger(n) || n < 0) {
      const prefix = title && `"${title}" `;
      throw new Error(`${prefix}expected integer >0, got ${n}`);
    }
  }
  function abytes(value, length, title = "") {
    const bytes = isBytes(value);
    const len = value?.length;
    const needsLen = length !== void 0;
    if (!bytes || needsLen && len !== length) {
      const prefix = title && `"${title}" `;
      const ofLen = needsLen ? ` of length ${length}` : "";
      const got = bytes ? `length=${len}` : `type=${typeof value}`;
      throw new Error(prefix + "expected Uint8Array" + ofLen + ", got " + got);
    }
    return value;
  }
  function ahash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash must wrapped by utils.createHasher");
    anumber(h.outputLen);
    anumber(h.blockLen);
  }
  function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function aoutput(out, instance) {
    abytes(out, void 0, "digestInto() output");
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error('"digestInto() output" expected to be of length >=' + min);
    }
  }
  function u8(arr) {
    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
  }
  function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  }
  function clean(...arrays) {
    for (let i = 0; i < arrays.length; i++) {
      arrays[i].fill(0);
    }
  }
  function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  }
  function rotr(word, shift) {
    return word << 32 - shift | word >>> shift;
  }
  function rotl(word, shift) {
    return word << shift | word >>> 32 - shift >>> 0;
  }
  var isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
  function byteSwap(word) {
    return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  }
  var swap8IfBE = isLE ? (n) => n : (n) => byteSwap(n);
  function byteSwap32(arr) {
    for (let i = 0; i < arr.length; i++) {
      arr[i] = byteSwap(arr[i]);
    }
    return arr;
  }
  var swap32IfBE = isLE ? (u) => u : byteSwap32;
  var hasHexBuiltin = /* @__PURE__ */ (() => (
    // @ts-ignore
    typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
  ))();
  var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
  function bytesToHex(bytes) {
    abytes(bytes);
    if (hasHexBuiltin)
      return bytes.toHex();
    let hex = "";
    for (let i = 0; i < bytes.length; i++) {
      hex += hexes[bytes[i]];
    }
    return hex;
  }
  var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
  function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
      return ch - asciis._0;
    if (ch >= asciis.A && ch <= asciis.F)
      return ch - (asciis.A - 10);
    if (ch >= asciis.a && ch <= asciis.f)
      return ch - (asciis.a - 10);
    return;
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    if (hasHexBuiltin)
      return Uint8Array.fromHex(hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("hex string expected, got unpadded hex of length " + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex.charCodeAt(hi));
      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex[hi] + hex[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array[ai] = n1 * 16 + n2;
    }
    return array;
  }
  var nextTick = async () => {
  };
  async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
      cb(i);
      const diff = Date.now() - ts;
      if (diff >= 0 && diff < tick)
        continue;
      await nextTick();
      ts += diff;
    }
  }
  function utf8ToBytes(str) {
    if (typeof str !== "string")
      throw new Error("string expected");
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function kdfInputToBytes(data, errorTitle = "") {
    if (typeof data === "string")
      return utf8ToBytes(data);
    return abytes(data, void 0, errorTitle);
  }
  function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      abytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function checkOpts(defaults, opts) {
    if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
      throw new Error("options must be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function createHasher(hashCons, info = {}) {
    const hashC = (msg, opts) => hashCons(opts).update(msg).digest();
    const tmp = hashCons(void 0);
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    Object.assign(hashC, info);
    return Object.freeze(hashC);
  }
  function randomBytes(bytesLength = 32) {
    const cr = typeof globalThis === "object" ? globalThis.crypto : null;
    if (typeof cr?.getRandomValues !== "function")
      throw new Error("crypto.getRandomValues must be defined");
    return cr.getRandomValues(new Uint8Array(bytesLength));
  }
  var oidNist = (suffix) => ({
    oid: Uint8Array.from([6, 9, 96, 134, 72, 1, 101, 3, 4, 2, suffix])
  });

  // ../../_u64.js
  var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  var _32n = /* @__PURE__ */ BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    const len = lst.length;
    let Ah = new Uint32Array(len);
    let Al = new Uint32Array(len);
    for (let i = 0; i < len; i++) {
      const { h, l } = fromBig(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  var shrSH = (h, _l, s) => h >>> s;
  var shrSL = (h, l, s) => h << 32 - s | l >>> s;
  var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
  var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
  var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
  var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
  var rotr32H = (_h, l) => l;
  var rotr32L = (h, _l) => h;
  var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
  var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
  var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
  var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
  function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
  }
  var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

  // ../../_blake.js
  var BSIGMA = /* @__PURE__ */ Uint8Array.from([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    // Blake1, unused in others
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9
  ]);
  function G1s(a, b, c, d, x) {
    a = a + b + x | 0;
    d = rotr(d ^ a, 16);
    c = c + d | 0;
    b = rotr(b ^ c, 12);
    return { a, b, c, d };
  }
  function G2s(a, b, c, d, x) {
    a = a + b + x | 0;
    d = rotr(d ^ a, 8);
    c = c + d | 0;
    b = rotr(b ^ c, 7);
    return { a, b, c, d };
  }

  // ../../_md.js
  function Chi(a, b, c) {
    return a & b ^ ~a & c;
  }
  function Maj(a, b, c) {
    return a & b ^ a & c ^ b & c;
  }
  var HashMD = class {
    blockLen;
    outputLen;
    padOffset;
    isLE;
    // For partial updates less than block size
    buffer;
    view;
    finished = false;
    length = 0;
    pos = 0;
    destroyed = false;
    constructor(blockLen, outputLen, padOffset, isLE2) {
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      aexists(this);
      abytes(data);
      const { view, buffer, blockLen } = this;
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = createView(data);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      this.finished = true;
      const { buffer, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer[pos++] = 128;
      clean(this.buffer.subarray(pos));
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos; i < blockLen; i++)
        buffer[i] = 0;
      view.setBigUint64(blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen must be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0; i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE2);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to ||= new this.constructor();
      to.set(...this.get());
      const { blockLen, buffer, length, finished, destroyed, pos } = this;
      to.destroyed = destroyed;
      to.finished = finished;
      to.length = length;
      to.pos = pos;
      if (length % blockLen)
        to.buffer.set(buffer);
      return to;
    }
    clone() {
      return this._cloneInto();
    }
  };
  var SHA256_IV = /* @__PURE__ */ Uint32Array.from([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  var SHA224_IV = /* @__PURE__ */ Uint32Array.from([
    3238371032,
    914150663,
    812702999,
    4144912697,
    4290775857,
    1750603025,
    1694076839,
    3204075428
  ]);
  var SHA384_IV = /* @__PURE__ */ Uint32Array.from([
    3418070365,
    3238371032,
    1654270250,
    914150663,
    2438529370,
    812702999,
    355462360,
    4144912697,
    1731405415,
    4290775857,
    2394180231,
    1750603025,
    3675008525,
    1694076839,
    1203062813,
    3204075428
  ]);
  var SHA512_IV = /* @__PURE__ */ Uint32Array.from([
    1779033703,
    4089235720,
    3144134277,
    2227873595,
    1013904242,
    4271175723,
    2773480762,
    1595750129,
    1359893119,
    2917565137,
    2600822924,
    725511199,
    528734635,
    4215389547,
    1541459225,
    327033209
  ]);

  // ../../blake2.js
  var B2B_IV = /* @__PURE__ */ Uint32Array.from([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
  ]);
  var BBUF = /* @__PURE__ */ new Uint32Array(32);
  function G1b(a, b, c, d, msg, x) {
    const Xl = msg[x], Xh = msg[x + 1];
    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1];
    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
    let ll = add3L(Al, Bl, Xl);
    Ah = add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
    ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 24), Bl: rotrSL(Bh, Bl, 24) });
    BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
    BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;
    BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
    BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
  }
  function G2b(a, b, c, d, msg, x) {
    const Xl = msg[x], Xh = msg[x + 1];
    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1];
    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
    let ll = add3L(Al, Bl, Xl);
    Ah = add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
    ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrBH(Bh, Bl, 63), Bl: rotrBL(Bh, Bl, 63) });
    BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
    BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;
    BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
    BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
  }
  function checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {
    anumber(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    const { key, salt, personalization } = opts;
    if (key !== void 0 && (key.length < 1 || key.length > keyLen))
      throw new Error('"key" expected to be undefined or of length=1..' + keyLen);
    if (salt !== void 0)
      abytes(salt, saltLen, "salt");
    if (personalization !== void 0)
      abytes(personalization, persLen, "personalization");
  }
  var _BLAKE2 = class {
    buffer;
    buffer32;
    finished = false;
    destroyed = false;
    length = 0;
    pos = 0;
    blockLen;
    outputLen;
    constructor(blockLen, outputLen) {
      anumber(blockLen);
      anumber(outputLen);
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.buffer = new Uint8Array(blockLen);
      this.buffer32 = u32(this.buffer);
    }
    update(data) {
      aexists(this);
      abytes(data);
      const { blockLen, buffer, buffer32 } = this;
      const len = data.length;
      const offset = data.byteOffset;
      const buf = data.buffer;
      for (let pos = 0; pos < len; ) {
        if (this.pos === blockLen) {
          swap32IfBE(buffer32);
          this.compress(buffer32, 0, false);
          swap32IfBE(buffer32);
          this.pos = 0;
        }
        const take = Math.min(blockLen - this.pos, len - pos);
        const dataOffset = offset + pos;
        if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
          const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
          swap32IfBE(data32);
          for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
            this.length += blockLen;
            this.compress(data32, pos32, false);
          }
          swap32IfBE(data32);
          continue;
        }
        buffer.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        this.length += take;
        pos += take;
      }
      return this;
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      const { pos, buffer32 } = this;
      this.finished = true;
      clean(this.buffer.subarray(pos));
      swap32IfBE(buffer32);
      this.compress(buffer32, 0, true);
      swap32IfBE(buffer32);
      const out32 = u32(out);
      this.get().forEach((v, i) => out32[i] = swap8IfBE(v));
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      const { buffer, length, finished, destroyed, outputLen, pos } = this;
      to ||= new this.constructor({ dkLen: outputLen });
      to.set(...this.get());
      to.buffer.set(buffer);
      to.destroyed = destroyed;
      to.finished = finished;
      to.length = length;
      to.pos = pos;
      to.outputLen = outputLen;
      return to;
    }
    clone() {
      return this._cloneInto();
    }
  };
  var _BLAKE2b = class extends _BLAKE2 {
    // Same as SHA-512, but LE
    v0l = B2B_IV[0] | 0;
    v0h = B2B_IV[1] | 0;
    v1l = B2B_IV[2] | 0;
    v1h = B2B_IV[3] | 0;
    v2l = B2B_IV[4] | 0;
    v2h = B2B_IV[5] | 0;
    v3l = B2B_IV[6] | 0;
    v3h = B2B_IV[7] | 0;
    v4l = B2B_IV[8] | 0;
    v4h = B2B_IV[9] | 0;
    v5l = B2B_IV[10] | 0;
    v5h = B2B_IV[11] | 0;
    v6l = B2B_IV[12] | 0;
    v6h = B2B_IV[13] | 0;
    v7l = B2B_IV[14] | 0;
    v7h = B2B_IV[15] | 0;
    constructor(opts = {}) {
      const olen = opts.dkLen === void 0 ? 64 : opts.dkLen;
      super(128, olen);
      checkBlake2Opts(olen, opts, 64, 16, 16);
      let { key, personalization, salt } = opts;
      let keyLength = 0;
      if (key !== void 0) {
        abytes(key, void 0, "key");
        keyLength = key.length;
      }
      this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
      if (salt !== void 0) {
        abytes(salt, void 0, "salt");
        const slt = u32(salt);
        this.v4l ^= swap8IfBE(slt[0]);
        this.v4h ^= swap8IfBE(slt[1]);
        this.v5l ^= swap8IfBE(slt[2]);
        this.v5h ^= swap8IfBE(slt[3]);
      }
      if (personalization !== void 0) {
        abytes(personalization, void 0, "personalization");
        const pers = u32(personalization);
        this.v6l ^= swap8IfBE(pers[0]);
        this.v6h ^= swap8IfBE(pers[1]);
        this.v7l ^= swap8IfBE(pers[2]);
        this.v7h ^= swap8IfBE(pers[3]);
      }
      if (key !== void 0) {
        const tmp = new Uint8Array(this.blockLen);
        tmp.set(key);
        this.update(tmp);
      }
    }
    // prettier-ignore
    get() {
      let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
      return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
      this.v0l = v0l | 0;
      this.v0h = v0h | 0;
      this.v1l = v1l | 0;
      this.v1h = v1h | 0;
      this.v2l = v2l | 0;
      this.v2h = v2h | 0;
      this.v3l = v3l | 0;
      this.v3h = v3h | 0;
      this.v4l = v4l | 0;
      this.v4h = v4h | 0;
      this.v5l = v5l | 0;
      this.v5h = v5h | 0;
      this.v6l = v6l | 0;
      this.v6h = v6h | 0;
      this.v7l = v7l | 0;
      this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
      this.get().forEach((v, i) => BBUF[i] = v);
      BBUF.set(B2B_IV, 16);
      let { h, l } = fromBig(BigInt(this.length));
      BBUF[24] = B2B_IV[8] ^ l;
      BBUF[25] = B2B_IV[9] ^ h;
      if (isLast) {
        BBUF[28] = ~BBUF[28];
        BBUF[29] = ~BBUF[29];
      }
      let j = 0;
      const s = BSIGMA;
      for (let i = 0; i < 12; i++) {
        G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);
        G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);
        G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);
        G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);
        G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);
        G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);
        G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);
        G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);
        G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);
        G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);
        G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);
        G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);
        G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);
        G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);
        G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      }
      this.v0l ^= BBUF[0] ^ BBUF[16];
      this.v0h ^= BBUF[1] ^ BBUF[17];
      this.v1l ^= BBUF[2] ^ BBUF[18];
      this.v1h ^= BBUF[3] ^ BBUF[19];
      this.v2l ^= BBUF[4] ^ BBUF[20];
      this.v2h ^= BBUF[5] ^ BBUF[21];
      this.v3l ^= BBUF[6] ^ BBUF[22];
      this.v3h ^= BBUF[7] ^ BBUF[23];
      this.v4l ^= BBUF[8] ^ BBUF[24];
      this.v4h ^= BBUF[9] ^ BBUF[25];
      this.v5l ^= BBUF[10] ^ BBUF[26];
      this.v5h ^= BBUF[11] ^ BBUF[27];
      this.v6l ^= BBUF[12] ^ BBUF[28];
      this.v6h ^= BBUF[13] ^ BBUF[29];
      this.v7l ^= BBUF[14] ^ BBUF[30];
      this.v7h ^= BBUF[15] ^ BBUF[31];
      clean(BBUF);
    }
    destroy() {
      this.destroyed = true;
      clean(this.buffer32);
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
  };
  var blake2b = /* @__PURE__ */ createHasher((opts) => new _BLAKE2b(opts));
  function compress(s, offset, msg, rounds, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
    let j = 0;
    for (let i = 0; i < rounds; i++) {
      ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));
      ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));
      ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));
      ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));
      ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));
      ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));
      ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));
      ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));
      ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));
      ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));
      ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));
      ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));
      ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));
      ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));
      ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));
      ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));
    }
    return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };
  }
  var B2S_IV = /* @__PURE__ */ SHA256_IV.slice();
  var _BLAKE2s = class extends _BLAKE2 {
    // Internal state, same as SHA-256
    v0 = B2S_IV[0] | 0;
    v1 = B2S_IV[1] | 0;
    v2 = B2S_IV[2] | 0;
    v3 = B2S_IV[3] | 0;
    v4 = B2S_IV[4] | 0;
    v5 = B2S_IV[5] | 0;
    v6 = B2S_IV[6] | 0;
    v7 = B2S_IV[7] | 0;
    constructor(opts = {}) {
      const olen = opts.dkLen === void 0 ? 32 : opts.dkLen;
      super(64, olen);
      checkBlake2Opts(olen, opts, 32, 8, 8);
      let { key, personalization, salt } = opts;
      let keyLength = 0;
      if (key !== void 0) {
        abytes(key, void 0, "key");
        keyLength = key.length;
      }
      this.v0 ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
      if (salt !== void 0) {
        abytes(salt, void 0, "salt");
        const slt = u32(salt);
        this.v4 ^= swap8IfBE(slt[0]);
        this.v5 ^= swap8IfBE(slt[1]);
      }
      if (personalization !== void 0) {
        abytes(personalization, void 0, "personalization");
        const pers = u32(personalization);
        this.v6 ^= swap8IfBE(pers[0]);
        this.v7 ^= swap8IfBE(pers[1]);
      }
      if (key !== void 0) {
        const tmp = new Uint8Array(this.blockLen);
        tmp.set(key);
        this.update(tmp);
      }
    }
    get() {
      const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;
      return [v0, v1, v2, v3, v4, v5, v6, v7];
    }
    // prettier-ignore
    set(v0, v1, v2, v3, v4, v5, v6, v7) {
      this.v0 = v0 | 0;
      this.v1 = v1 | 0;
      this.v2 = v2 | 0;
      this.v3 = v3 | 0;
      this.v4 = v4 | 0;
      this.v5 = v5 | 0;
      this.v6 = v6 | 0;
      this.v7 = v7 | 0;
    }
    compress(msg, offset, isLast) {
      const { h, l } = fromBig(BigInt(this.length));
      const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(BSIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);
      this.v0 ^= v0 ^ v8;
      this.v1 ^= v1 ^ v9;
      this.v2 ^= v2 ^ v10;
      this.v3 ^= v3 ^ v11;
      this.v4 ^= v4 ^ v12;
      this.v5 ^= v5 ^ v13;
      this.v6 ^= v6 ^ v14;
      this.v7 ^= v7 ^ v15;
    }
    destroy() {
      this.destroyed = true;
      clean(this.buffer32);
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
    }
  };
  var blake2s = /* @__PURE__ */ createHasher((opts) => new _BLAKE2s(opts));

  // ../../argon2.js
  var AT = { Argond2d: 0, Argon2i: 1, Argon2id: 2 };
  var ARGON2_SYNC_POINTS = 4;
  var abytesOrZero = (buf, errorTitle = "") => {
    if (buf === void 0)
      return Uint8Array.of();
    return kdfInputToBytes(buf, errorTitle);
  };
  function mul(a, b) {
    const aL = a & 65535;
    const aH = a >>> 16;
    const bL = b & 65535;
    const bH = b >>> 16;
    const ll = Math.imul(aL, bL);
    const hl = Math.imul(aH, bL);
    const lh = Math.imul(aL, bH);
    const hh = Math.imul(aH, bH);
    const carry = (ll >>> 16) + (hl & 65535) + lh;
    const high = hh + (hl >>> 16) + (carry >>> 16) | 0;
    const low = carry << 16 | ll & 65535;
    return { h: high, l: low };
  }
  function mul2(a, b) {
    const { h, l } = mul(a, b);
    return { h: (h << 1 | l >>> 31) & 4294967295, l: l << 1 & 4294967295 };
  }
  function blamka(Ah, Al, Bh, Bl) {
    const { h: Ch, l: Cl } = mul2(Al, Bl);
    const Rll = add3L(Al, Bl, Cl);
    return { h: add3H(Rll, Ah, Bh, Ch), l: Rll | 0 };
  }
  var A2_BUF = new Uint32Array(256);
  function G(a, b, c, d) {
    let Al = A2_BUF[2 * a], Ah = A2_BUF[2 * a + 1];
    let Bl = A2_BUF[2 * b], Bh = A2_BUF[2 * b + 1];
    let Cl = A2_BUF[2 * c], Ch = A2_BUF[2 * c + 1];
    let Dl = A2_BUF[2 * d], Dh = A2_BUF[2 * d + 1];
    ({ h: Ah, l: Al } = blamka(Ah, Al, Bh, Bl));
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
    ({ h: Ch, l: Cl } = blamka(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 24), Bl: rotrSL(Bh, Bl, 24) });
    ({ h: Ah, l: Al } = blamka(Ah, Al, Bh, Bl));
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
    ({ h: Ch, l: Cl } = blamka(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrBH(Bh, Bl, 63), Bl: rotrBL(Bh, Bl, 63) });
    A2_BUF[2 * a] = Al, A2_BUF[2 * a + 1] = Ah;
    A2_BUF[2 * b] = Bl, A2_BUF[2 * b + 1] = Bh;
    A2_BUF[2 * c] = Cl, A2_BUF[2 * c + 1] = Ch;
    A2_BUF[2 * d] = Dl, A2_BUF[2 * d + 1] = Dh;
  }
  function P(v00, v01, v02, v03, v04, v05, v06, v07, v08, v09, v10, v11, v12, v13, v14, v15) {
    G(v00, v04, v08, v12);
    G(v01, v05, v09, v13);
    G(v02, v06, v10, v14);
    G(v03, v07, v11, v15);
    G(v00, v05, v10, v15);
    G(v01, v06, v11, v12);
    G(v02, v07, v08, v13);
    G(v03, v04, v09, v14);
  }
  function block(x, xPos, yPos, outPos, needXor) {
    for (let i = 0; i < 256; i++)
      A2_BUF[i] = x[xPos + i] ^ x[yPos + i];
    for (let i = 0; i < 128; i += 16) {
      P(i, i + 1, i + 2, i + 3, i + 4, i + 5, i + 6, i + 7, i + 8, i + 9, i + 10, i + 11, i + 12, i + 13, i + 14, i + 15);
    }
    for (let i = 0; i < 16; i += 2) {
      P(i, i + 1, i + 16, i + 17, i + 32, i + 33, i + 48, i + 49, i + 64, i + 65, i + 80, i + 81, i + 96, i + 97, i + 112, i + 113);
    }
    if (needXor)
      for (let i = 0; i < 256; i++)
        x[outPos + i] ^= A2_BUF[i] ^ x[xPos + i] ^ x[yPos + i];
    else
      for (let i = 0; i < 256; i++)
        x[outPos + i] = A2_BUF[i] ^ x[xPos + i] ^ x[yPos + i];
    clean(A2_BUF);
  }
  function Hp(A, dkLen) {
    const A8 = u8(A);
    const T = new Uint32Array(1);
    const T8 = u8(T);
    T[0] = dkLen;
    if (dkLen <= 64)
      return blake2b.create({ dkLen }).update(T8).update(A8).digest();
    const out = new Uint8Array(dkLen);
    let V = blake2b.create({}).update(T8).update(A8).digest();
    let pos = 0;
    out.set(V.subarray(0, 32));
    pos += 32;
    for (; dkLen - pos > 64; pos += 32) {
      const Vh = blake2b.create({}).update(V);
      Vh.digestInto(V);
      Vh.destroy();
      out.set(V.subarray(0, 32), pos);
    }
    out.set(blake2b(V, { dkLen: dkLen - pos }), pos);
    clean(V, T);
    return u32(out);
  }
  function indexAlpha(r, s, laneLen, segmentLen, index, randL, sameLane = false) {
    let area;
    if (r === 0) {
      if (s === 0)
        area = index - 1;
      else if (sameLane)
        area = s * segmentLen + index - 1;
      else
        area = s * segmentLen + (index == 0 ? -1 : 0);
    } else if (sameLane)
      area = laneLen - segmentLen + index - 1;
    else
      area = laneLen - segmentLen + (index == 0 ? -1 : 0);
    const startPos = r !== 0 && s !== ARGON2_SYNC_POINTS - 1 ? (s + 1) * segmentLen : 0;
    const rel = area - 1 - mul(area, mul(randL, randL).h).h;
    return (startPos + rel) % laneLen;
  }
  var maxUint32 = Math.pow(2, 32);
  function isU32(num) {
    return Number.isSafeInteger(num) && num >= 0 && num < maxUint32;
  }
  function argon2Opts(opts) {
    const merged = {
      version: 19,
      dkLen: 32,
      maxmem: maxUint32 - 1,
      asyncTick: 10
    };
    for (let [k, v] of Object.entries(opts))
      if (v !== void 0)
        merged[k] = v;
    const { dkLen, p, m, t, version, onProgress, asyncTick } = merged;
    if (!isU32(dkLen) || dkLen < 4)
      throw new Error('"dkLen" must be 4..');
    if (!isU32(p) || p < 1 || p >= Math.pow(2, 24))
      throw new Error('"p" must be 1..2^24');
    if (!isU32(m))
      throw new Error('"m" must be 0..2^32');
    if (!isU32(t) || t < 1)
      throw new Error('"t" (iterations) must be 1..2^32');
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error('"progressCb" must be a function');
    anumber(asyncTick, "asyncTick");
    if (!isU32(m) || m < 8 * p)
      throw new Error('"m" (memory) must be at least 8*p bytes');
    if (version !== 16 && version !== 19)
      throw new Error('"version" must be 0x10 or 0x13, got ' + version);
    return merged;
  }
  function argon2Init(password, salt, type, opts) {
    password = kdfInputToBytes(password, "password");
    salt = kdfInputToBytes(salt, "salt");
    if (!isU32(password.length))
      throw new Error('"password" must be less of length 1..4Gb');
    if (!isU32(salt.length) || salt.length < 8)
      throw new Error('"salt" must be of length 8..4Gb');
    if (!Object.values(AT).includes(type))
      throw new Error('"type" was invalid');
    let { p, dkLen, m, t, version, key, personalization, maxmem, onProgress, asyncTick } = argon2Opts(opts);
    key = abytesOrZero(key, "key");
    personalization = abytesOrZero(personalization, "personalization");
    const h = blake2b.create();
    const BUF = new Uint32Array(1);
    const BUF8 = u8(BUF);
    for (let item of [p, dkLen, m, t, version, type]) {
      BUF[0] = item;
      h.update(BUF8);
    }
    for (let i of [password, salt, key, personalization]) {
      BUF[0] = i.length;
      h.update(BUF8).update(i);
    }
    const H0 = new Uint32Array(18);
    const H0_8 = u8(H0);
    h.digestInto(H0_8);
    const lanes = p;
    const mP = 4 * p * Math.floor(m / (ARGON2_SYNC_POINTS * p));
    const laneLen = Math.floor(mP / p);
    const segmentLen = Math.floor(laneLen / ARGON2_SYNC_POINTS);
    const memUsed = mP * 256;
    if (!isU32(maxmem) || memUsed > maxmem)
      throw new Error('"maxmem" expected <2**32, got: maxmem=' + maxmem + ", memused=" + memUsed);
    const B = new Uint32Array(memUsed);
    for (let l = 0; l < p; l++) {
      const i = 256 * laneLen * l;
      H0[17] = l;
      H0[16] = 0;
      B.set(Hp(H0, 1024), i);
      H0[16] = 1;
      B.set(Hp(H0, 1024), i + 256);
    }
    let perBlock = () => {
    };
    if (onProgress) {
      const totalBlock = t * ARGON2_SYNC_POINTS * p * segmentLen;
      const callbackPer = Math.max(Math.floor(totalBlock / 1e4), 1);
      let blockCnt = 0;
      perBlock = () => {
        blockCnt++;
        if (onProgress && (!(blockCnt % callbackPer) || blockCnt === totalBlock))
          onProgress(blockCnt / totalBlock);
      };
    }
    clean(BUF, H0);
    return { type, mP, p, t, version, B, laneLen, lanes, segmentLen, dkLen, perBlock, asyncTick };
  }
  function argon2Output(B, p, laneLen, dkLen) {
    const B_final = new Uint32Array(256);
    for (let l = 0; l < p; l++)
      for (let j = 0; j < 256; j++)
        B_final[j] ^= B[256 * (laneLen * l + laneLen - 1) + j];
    const res = u8(Hp(B_final, dkLen));
    clean(B_final);
    return res;
  }
  function processBlock(B, address, l, r, s, index, laneLen, segmentLen, lanes, offset, prev, dataIndependent, needXor) {
    if (offset % laneLen)
      prev = offset - 1;
    let randL, randH;
    if (dataIndependent) {
      let i128 = index % 128;
      if (i128 === 0) {
        address[256 + 12]++;
        block(address, 256, 2 * 256, 0, false);
        block(address, 0, 2 * 256, 0, false);
      }
      randL = address[2 * i128];
      randH = address[2 * i128 + 1];
    } else {
      const T = 256 * prev;
      randL = B[T];
      randH = B[T + 1];
    }
    const refLane = r === 0 && s === 0 ? l : randH % lanes;
    const refPos = indexAlpha(r, s, laneLen, segmentLen, index, randL, refLane == l);
    const refBlock = laneLen * refLane + refPos;
    block(B, 256 * prev, 256 * refBlock, offset * 256, needXor);
  }
  function argon2(type, password, salt, opts) {
    const { mP, p, t, version, B, laneLen, lanes, segmentLen, dkLen, perBlock } = argon2Init(password, salt, type, opts);
    const address = new Uint32Array(3 * 256);
    address[256 + 6] = mP;
    address[256 + 8] = t;
    address[256 + 10] = type;
    for (let r = 0; r < t; r++) {
      const needXor = r !== 0 && version === 19;
      address[256 + 0] = r;
      for (let s = 0; s < ARGON2_SYNC_POINTS; s++) {
        address[256 + 4] = s;
        const dataIndependent = type == AT.Argon2i || type == AT.Argon2id && r === 0 && s < 2;
        for (let l = 0; l < p; l++) {
          address[256 + 2] = l;
          address[256 + 12] = 0;
          let startPos = 0;
          if (r === 0 && s === 0) {
            startPos = 2;
            if (dataIndependent) {
              address[256 + 12]++;
              block(address, 256, 2 * 256, 0, false);
              block(address, 0, 2 * 256, 0, false);
            }
          }
          let offset = l * laneLen + s * segmentLen + startPos;
          let prev = offset % laneLen ? offset - 1 : offset + laneLen - 1;
          for (let index = startPos; index < segmentLen; index++, offset++, prev++) {
            perBlock();
            processBlock(B, address, l, r, s, index, laneLen, segmentLen, lanes, offset, prev, dataIndependent, needXor);
          }
        }
      }
    }
    clean(address);
    return argon2Output(B, p, laneLen, dkLen);
  }
  var argon2id = (password, salt, opts) => argon2(AT.Argon2id, password, salt, opts);

  // ../../blake1.js
  var EMPTY_SALT = /* @__PURE__ */ new Uint32Array(8);
  var BLAKE1 = class {
    finished = false;
    length = 0;
    pos = 0;
    destroyed = false;
    // For partial updates less than block size
    buffer;
    view;
    salt;
    blockLen;
    outputLen;
    lengthFlag;
    counterLen;
    constants;
    constructor(blockLen, outputLen, lengthFlag, counterLen, saltLen, constants, opts = {}) {
      const { salt } = opts;
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.lengthFlag = lengthFlag;
      this.counterLen = counterLen;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
      if (salt !== void 0) {
        let slt = salt;
        abytes(slt, 4 * saltLen, "salt");
        const salt32 = this.salt = new Uint32Array(saltLen);
        const sv = createView(slt);
        this.constants = constants.slice();
        for (let i = 0, offset = 0; i < salt32.length; i++, offset += 4) {
          salt32[i] = sv.getUint32(offset, false);
          this.constants[i] ^= salt32[i];
        }
      } else {
        this.salt = EMPTY_SALT;
        this.constants = constants;
      }
    }
    update(data) {
      aexists(this);
      abytes(data);
      const { view, buffer, blockLen } = this;
      const len = data.length;
      let dataView;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          if (!dataView)
            dataView = createView(data);
          for (; blockLen <= len - pos; pos += blockLen) {
            this.length += blockLen;
            this.compress(dataView, pos);
          }
          continue;
        }
        buffer.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.length += blockLen;
          this.compress(view, 0, true);
          this.pos = 0;
        }
      }
      return this;
    }
    destroy() {
      this.destroyed = true;
      if (this.salt !== EMPTY_SALT) {
        clean(this.salt, this.constants);
      }
    }
    _cloneInto(to) {
      to ||= new this.constructor();
      to.set(...this.get());
      const { buffer, length, finished, destroyed, constants, salt, pos } = this;
      to.buffer.set(buffer);
      to.constants = constants.slice();
      to.destroyed = destroyed;
      to.finished = finished;
      to.length = length;
      to.pos = pos;
      to.salt = salt.slice();
      return to;
    }
    clone() {
      return this._cloneInto();
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      this.finished = true;
      const { buffer, blockLen, counterLen, lengthFlag, view } = this;
      clean(buffer.subarray(this.pos));
      const counter = BigInt((this.length + this.pos) * 8);
      const counterPos = blockLen - counterLen - 1;
      buffer[this.pos] |= 128;
      this.length += this.pos;
      if (this.pos > counterPos) {
        this.compress(view, 0);
        clean(buffer);
        this.pos = 0;
      }
      buffer[counterPos] |= lengthFlag;
      view.setBigUint64(blockLen - 8, counter, false);
      this.compress(view, 0, this.pos !== 0);
      clean(buffer);
      const v = createView(out);
      const state = this.get();
      for (let i = 0; i < this.outputLen / 4; ++i)
        v.setUint32(i * 4, state[i]);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
  };
  var B64C = /* @__PURE__ */ Uint32Array.from([
    608135816,
    2242054355,
    320440878,
    57701188,
    2752067618,
    698298832,
    137296536,
    3964562569,
    1160258022,
    953160567,
    3193202383,
    887688300,
    3232508343,
    3380367581,
    1065670069,
    3041331479,
    2450970073,
    2306472731,
    3509652390,
    2564797868,
    805139163,
    3491422135,
    3101798381,
    1780907670,
    3128725573,
    4046225305,
    614570311,
    3012652279,
    134345442,
    2240740374,
    1667834072,
    1901547113
  ]);
  var B32C = B64C.slice(0, 16);
  var B256_IV = /* @__PURE__ */ SHA256_IV.slice();
  var B224_IV = /* @__PURE__ */ SHA224_IV.slice();
  var B384_IV = /* @__PURE__ */ SHA384_IV.slice();
  var B512_IV = /* @__PURE__ */ SHA512_IV.slice();
  function generateTBL256() {
    const TBL = [];
    for (let i = 0, j = 0; i < 14; i++, j += 16) {
      for (let offset = 1; offset < 16; offset += 2) {
        TBL.push(B32C[BSIGMA[j + offset]]);
        TBL.push(B32C[BSIGMA[j + offset - 1]]);
      }
    }
    return new Uint32Array(TBL);
  }
  var TBL256 = /* @__PURE__ */ generateTBL256();
  var BLAKE256_W = /* @__PURE__ */ new Uint32Array(16);
  var BLAKE1_32B = class extends BLAKE1 {
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    constructor(outputLen, IV, lengthFlag, opts = {}) {
      super(64, outputLen, lengthFlag, 8, 4, B32C, opts);
      this.v0 = IV[0] | 0;
      this.v1 = IV[1] | 0;
      this.v2 = IV[2] | 0;
      this.v3 = IV[3] | 0;
      this.v4 = IV[4] | 0;
      this.v5 = IV[5] | 0;
      this.v6 = IV[6] | 0;
      this.v7 = IV[7] | 0;
    }
    get() {
      const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;
      return [v0, v1, v2, v3, v4, v5, v6, v7];
    }
    // prettier-ignore
    set(v0, v1, v2, v3, v4, v5, v6, v7) {
      this.v0 = v0 | 0;
      this.v1 = v1 | 0;
      this.v2 = v2 | 0;
      this.v3 = v3 | 0;
      this.v4 = v4 | 0;
      this.v5 = v5 | 0;
      this.v6 = v6 | 0;
      this.v7 = v7 | 0;
    }
    destroy() {
      super.destroy();
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
    }
    compress(view, offset, withLength = true) {
      for (let i = 0; i < 16; i++, offset += 4)
        BLAKE256_W[i] = view.getUint32(offset, false);
      let v00 = this.v0 | 0;
      let v01 = this.v1 | 0;
      let v02 = this.v2 | 0;
      let v03 = this.v3 | 0;
      let v04 = this.v4 | 0;
      let v05 = this.v5 | 0;
      let v06 = this.v6 | 0;
      let v07 = this.v7 | 0;
      let v08 = this.constants[0] | 0;
      let v09 = this.constants[1] | 0;
      let v10 = this.constants[2] | 0;
      let v11 = this.constants[3] | 0;
      const { h, l } = fromBig(BigInt(withLength ? this.length * 8 : 0));
      let v12 = (this.constants[4] ^ l) >>> 0;
      let v13 = (this.constants[5] ^ l) >>> 0;
      let v14 = (this.constants[6] ^ h) >>> 0;
      let v15 = (this.constants[7] ^ h) >>> 0;
      for (let i = 0, k = 0, j = 0; i < 14; i++) {
        ({ a: v00, b: v04, c: v08, d: v12 } = G1s(v00, v04, v08, v12, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v00, b: v04, c: v08, d: v12 } = G2s(v00, v04, v08, v12, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v01, b: v05, c: v09, d: v13 } = G1s(v01, v05, v09, v13, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v01, b: v05, c: v09, d: v13 } = G2s(v01, v05, v09, v13, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v02, b: v06, c: v10, d: v14 } = G1s(v02, v06, v10, v14, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v02, b: v06, c: v10, d: v14 } = G2s(v02, v06, v10, v14, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v03, b: v07, c: v11, d: v15 } = G1s(v03, v07, v11, v15, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v03, b: v07, c: v11, d: v15 } = G2s(v03, v07, v11, v15, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v00, b: v05, c: v10, d: v15 } = G1s(v00, v05, v10, v15, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v00, b: v05, c: v10, d: v15 } = G2s(v00, v05, v10, v15, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v01, b: v06, c: v11, d: v12 } = G1s(v01, v06, v11, v12, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v01, b: v06, c: v11, d: v12 } = G2s(v01, v06, v11, v12, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v02, b: v07, c: v08, d: v13 } = G1s(v02, v07, v08, v13, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v02, b: v07, c: v08, d: v13 } = G2s(v02, v07, v08, v13, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v03, b: v04, c: v09, d: v14 } = G1s(v03, v04, v09, v14, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
        ({ a: v03, b: v04, c: v09, d: v14 } = G2s(v03, v04, v09, v14, BLAKE256_W[BSIGMA[k++]] ^ TBL256[j++]));
      }
      this.v0 = (this.v0 ^ v00 ^ v08 ^ this.salt[0]) >>> 0;
      this.v1 = (this.v1 ^ v01 ^ v09 ^ this.salt[1]) >>> 0;
      this.v2 = (this.v2 ^ v02 ^ v10 ^ this.salt[2]) >>> 0;
      this.v3 = (this.v3 ^ v03 ^ v11 ^ this.salt[3]) >>> 0;
      this.v4 = (this.v4 ^ v04 ^ v12 ^ this.salt[0]) >>> 0;
      this.v5 = (this.v5 ^ v05 ^ v13 ^ this.salt[1]) >>> 0;
      this.v6 = (this.v6 ^ v06 ^ v14 ^ this.salt[2]) >>> 0;
      this.v7 = (this.v7 ^ v07 ^ v15 ^ this.salt[3]) >>> 0;
      clean(BLAKE256_W);
    }
  };
  var BBUF2 = /* @__PURE__ */ new Uint32Array(32);
  var BLAKE512_W = /* @__PURE__ */ new Uint32Array(32);
  function generateTBL512() {
    const TBL = [];
    for (let r = 0, k = 0; r < 16; r++, k += 16) {
      for (let offset = 1; offset < 16; offset += 2) {
        TBL.push(B64C[BSIGMA[k + offset] * 2 + 0]);
        TBL.push(B64C[BSIGMA[k + offset] * 2 + 1]);
        TBL.push(B64C[BSIGMA[k + offset - 1] * 2 + 0]);
        TBL.push(B64C[BSIGMA[k + offset - 1] * 2 + 1]);
      }
    }
    return new Uint32Array(TBL);
  }
  var TBL512 = /* @__PURE__ */ generateTBL512();
  function G1b2(a, b, c, d, msg, k) {
    const Xpos = 2 * BSIGMA[k];
    const Xl = msg[Xpos + 1] ^ TBL512[k * 2 + 1], Xh = msg[Xpos] ^ TBL512[k * 2];
    let Al = BBUF2[2 * a + 1], Ah = BBUF2[2 * a];
    let Bl = BBUF2[2 * b + 1], Bh = BBUF2[2 * b];
    let Cl = BBUF2[2 * c + 1], Ch = BBUF2[2 * c];
    let Dl = BBUF2[2 * d + 1], Dh = BBUF2[2 * d];
    let ll = add3L(Al, Bl, Xl);
    Ah = add3H(ll, Ah, Bh, Xh) >>> 0;
    Al = (ll | 0) >>> 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
    ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 25), Bl: rotrSL(Bh, Bl, 25) });
    BBUF2[2 * a + 1] = Al, BBUF2[2 * a] = Ah;
    BBUF2[2 * b + 1] = Bl, BBUF2[2 * b] = Bh;
    BBUF2[2 * c + 1] = Cl, BBUF2[2 * c] = Ch;
    BBUF2[2 * d + 1] = Dl, BBUF2[2 * d] = Dh;
  }
  function G2b2(a, b, c, d, msg, k) {
    const Xpos = 2 * BSIGMA[k];
    const Xl = msg[Xpos + 1] ^ TBL512[k * 2 + 1], Xh = msg[Xpos] ^ TBL512[k * 2];
    let Al = BBUF2[2 * a + 1], Ah = BBUF2[2 * a];
    let Bl = BBUF2[2 * b + 1], Bh = BBUF2[2 * b];
    let Cl = BBUF2[2 * c + 1], Ch = BBUF2[2 * c];
    let Dl = BBUF2[2 * d + 1], Dh = BBUF2[2 * d];
    let ll = add3L(Al, Bl, Xl);
    Ah = add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
    ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 11), Bl: rotrSL(Bh, Bl, 11) });
    BBUF2[2 * a + 1] = Al, BBUF2[2 * a] = Ah;
    BBUF2[2 * b + 1] = Bl, BBUF2[2 * b] = Bh;
    BBUF2[2 * c + 1] = Cl, BBUF2[2 * c] = Ch;
    BBUF2[2 * d + 1] = Dl, BBUF2[2 * d] = Dh;
  }
  var BLAKE1_64B = class extends BLAKE1 {
    v0l;
    v0h;
    v1l;
    v1h;
    v2l;
    v2h;
    v3l;
    v3h;
    v4l;
    v4h;
    v5l;
    v5h;
    v6l;
    v6h;
    v7l;
    v7h;
    constructor(outputLen, IV, lengthFlag, opts = {}) {
      super(128, outputLen, lengthFlag, 16, 8, B64C, opts);
      this.v0l = IV[0] | 0;
      this.v0h = IV[1] | 0;
      this.v1l = IV[2] | 0;
      this.v1h = IV[3] | 0;
      this.v2l = IV[4] | 0;
      this.v2h = IV[5] | 0;
      this.v3l = IV[6] | 0;
      this.v3h = IV[7] | 0;
      this.v4l = IV[8] | 0;
      this.v4h = IV[9] | 0;
      this.v5l = IV[10] | 0;
      this.v5h = IV[11] | 0;
      this.v6l = IV[12] | 0;
      this.v6h = IV[13] | 0;
      this.v7l = IV[14] | 0;
      this.v7h = IV[15] | 0;
    }
    // prettier-ignore
    get() {
      let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
      return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
      this.v0l = v0l | 0;
      this.v0h = v0h | 0;
      this.v1l = v1l | 0;
      this.v1h = v1h | 0;
      this.v2l = v2l | 0;
      this.v2h = v2h | 0;
      this.v3l = v3l | 0;
      this.v3h = v3h | 0;
      this.v4l = v4l | 0;
      this.v4h = v4h | 0;
      this.v5l = v5l | 0;
      this.v5h = v5h | 0;
      this.v6l = v6l | 0;
      this.v6h = v6h | 0;
      this.v7l = v7l | 0;
      this.v7h = v7h | 0;
    }
    destroy() {
      super.destroy();
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    compress(view, offset, withLength = true) {
      for (let i = 0; i < 32; i++, offset += 4)
        BLAKE512_W[i] = view.getUint32(offset, false);
      this.get().forEach((v, i) => BBUF2[i] = v);
      BBUF2.set(this.constants.subarray(0, 16), 16);
      if (withLength) {
        const { h, l } = fromBig(BigInt(this.length * 8));
        BBUF2[24] = (BBUF2[24] ^ h) >>> 0;
        BBUF2[25] = (BBUF2[25] ^ l) >>> 0;
        BBUF2[26] = (BBUF2[26] ^ h) >>> 0;
        BBUF2[27] = (BBUF2[27] ^ l) >>> 0;
      }
      for (let i = 0, k = 0; i < 16; i++) {
        G1b2(0, 4, 8, 12, BLAKE512_W, k++);
        G2b2(0, 4, 8, 12, BLAKE512_W, k++);
        G1b2(1, 5, 9, 13, BLAKE512_W, k++);
        G2b2(1, 5, 9, 13, BLAKE512_W, k++);
        G1b2(2, 6, 10, 14, BLAKE512_W, k++);
        G2b2(2, 6, 10, 14, BLAKE512_W, k++);
        G1b2(3, 7, 11, 15, BLAKE512_W, k++);
        G2b2(3, 7, 11, 15, BLAKE512_W, k++);
        G1b2(0, 5, 10, 15, BLAKE512_W, k++);
        G2b2(0, 5, 10, 15, BLAKE512_W, k++);
        G1b2(1, 6, 11, 12, BLAKE512_W, k++);
        G2b2(1, 6, 11, 12, BLAKE512_W, k++);
        G1b2(2, 7, 8, 13, BLAKE512_W, k++);
        G2b2(2, 7, 8, 13, BLAKE512_W, k++);
        G1b2(3, 4, 9, 14, BLAKE512_W, k++);
        G2b2(3, 4, 9, 14, BLAKE512_W, k++);
      }
      this.v0l ^= BBUF2[0] ^ BBUF2[16] ^ this.salt[0];
      this.v0h ^= BBUF2[1] ^ BBUF2[17] ^ this.salt[1];
      this.v1l ^= BBUF2[2] ^ BBUF2[18] ^ this.salt[2];
      this.v1h ^= BBUF2[3] ^ BBUF2[19] ^ this.salt[3];
      this.v2l ^= BBUF2[4] ^ BBUF2[20] ^ this.salt[4];
      this.v2h ^= BBUF2[5] ^ BBUF2[21] ^ this.salt[5];
      this.v3l ^= BBUF2[6] ^ BBUF2[22] ^ this.salt[6];
      this.v3h ^= BBUF2[7] ^ BBUF2[23] ^ this.salt[7];
      this.v4l ^= BBUF2[8] ^ BBUF2[24] ^ this.salt[0];
      this.v4h ^= BBUF2[9] ^ BBUF2[25] ^ this.salt[1];
      this.v5l ^= BBUF2[10] ^ BBUF2[26] ^ this.salt[2];
      this.v5h ^= BBUF2[11] ^ BBUF2[27] ^ this.salt[3];
      this.v6l ^= BBUF2[12] ^ BBUF2[28] ^ this.salt[4];
      this.v6h ^= BBUF2[13] ^ BBUF2[29] ^ this.salt[5];
      this.v7l ^= BBUF2[14] ^ BBUF2[30] ^ this.salt[6];
      this.v7h ^= BBUF2[15] ^ BBUF2[31] ^ this.salt[7];
      clean(BBUF2, BLAKE512_W);
    }
  };
  var _BLAKE224 = class extends BLAKE1_32B {
    constructor(opts = {}) {
      super(28, B224_IV, 0, opts);
    }
  };
  var _BLAKE256 = class extends BLAKE1_32B {
    constructor(opts = {}) {
      super(32, B256_IV, 1, opts);
    }
  };
  var _BLAKE384 = class extends BLAKE1_64B {
    constructor(opts = {}) {
      super(48, B384_IV, 0, opts);
    }
  };
  var _BLAKE512 = class extends BLAKE1_64B {
    constructor(opts = {}) {
      super(64, B512_IV, 1, opts);
    }
  };
  var blake224 = /* @__PURE__ */ createHasher((opts) => new _BLAKE224(opts));
  var blake256 = /* @__PURE__ */ createHasher((opts) => new _BLAKE256(opts));
  var blake384 = /* @__PURE__ */ createHasher((opts) => new _BLAKE384(opts));
  var blake512 = /* @__PURE__ */ createHasher((opts) => new _BLAKE512(opts));

  // ../../blake3.js
  var B3_Flags = {
    CHUNK_START: 1,
    CHUNK_END: 2,
    PARENT: 4,
    ROOT: 8,
    KEYED_HASH: 16,
    DERIVE_KEY_CONTEXT: 32,
    DERIVE_KEY_MATERIAL: 64
  };
  var B3_IV = /* @__PURE__ */ SHA256_IV.slice();
  var B3_SIGMA = /* @__PURE__ */ (() => {
    const Id = Array.from({ length: 16 }, (_, i) => i);
    const permute = (arr) => [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i) => arr[i]);
    const res = [];
    for (let i = 0, v = Id; i < 7; i++, v = permute(v))
      res.push(...v);
    return Uint8Array.from(res);
  })();
  var _BLAKE3 = class __BLAKE3 extends _BLAKE2 {
    chunkPos = 0;
    // Position of current block in chunk
    chunksDone = 0;
    // How many chunks we already have
    flags = 0 | 0;
    IV;
    state;
    stack = [];
    // Output
    posOut = 0;
    bufferOut32 = new Uint32Array(16);
    bufferOut;
    chunkOut = 0;
    // index of output chunk
    enableXOF = true;
    constructor(opts = {}, flags = 0) {
      super(64, opts.dkLen === void 0 ? 32 : opts.dkLen);
      const { key, context } = opts;
      const hasContext = context !== void 0;
      if (key !== void 0) {
        if (hasContext)
          throw new Error('Only "key" or "context" can be specified at same time');
        abytes(key, 32, "key");
        const k = key.slice();
        this.IV = u32(k);
        swap32IfBE(this.IV);
        this.flags = flags | B3_Flags.KEYED_HASH;
      } else if (hasContext) {
        abytes(context, void 0, "context");
        const ctx = context;
        const contextKey = new __BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT).update(ctx).digest();
        this.IV = u32(contextKey);
        swap32IfBE(this.IV);
        this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;
      } else {
        this.IV = B3_IV.slice();
        this.flags = flags;
      }
      this.state = this.IV.slice();
      this.bufferOut = u8(this.bufferOut32);
    }
    // Unused
    get() {
      return [];
    }
    set() {
    }
    b2Compress(counter, flags, buf, bufPos = 0) {
      const { state: s, pos } = this;
      const { h, l } = fromBig(BigInt(counter), true);
      const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(B3_SIGMA, bufPos, buf, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], h, l, pos, flags);
      s[0] = v0 ^ v8;
      s[1] = v1 ^ v9;
      s[2] = v2 ^ v10;
      s[3] = v3 ^ v11;
      s[4] = v4 ^ v12;
      s[5] = v5 ^ v13;
      s[6] = v6 ^ v14;
      s[7] = v7 ^ v15;
    }
    compress(buf, bufPos = 0, isLast = false) {
      let flags = this.flags;
      if (!this.chunkPos)
        flags |= B3_Flags.CHUNK_START;
      if (this.chunkPos === 15 || isLast)
        flags |= B3_Flags.CHUNK_END;
      if (!isLast)
        this.pos = this.blockLen;
      this.b2Compress(this.chunksDone, flags, buf, bufPos);
      this.chunkPos += 1;
      if (this.chunkPos === 16 || isLast) {
        let chunk = this.state;
        this.state = this.IV.slice();
        for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {
          if (!(last = this.stack.pop()))
            break;
          this.buffer32.set(last, 0);
          this.buffer32.set(chunk, 8);
          this.pos = this.blockLen;
          this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);
          chunk = this.state;
          this.state = this.IV.slice();
        }
        this.chunksDone++;
        this.chunkPos = 0;
        this.stack.push(chunk);
      }
      this.pos = 0;
    }
    _cloneInto(to) {
      to = super._cloneInto(to);
      const { IV, flags, state, chunkPos, posOut, chunkOut, stack, chunksDone } = this;
      to.state.set(state.slice());
      to.stack = stack.map((i) => Uint32Array.from(i));
      to.IV.set(IV);
      to.flags = flags;
      to.chunkPos = chunkPos;
      to.chunksDone = chunksDone;
      to.posOut = posOut;
      to.chunkOut = chunkOut;
      to.enableXOF = this.enableXOF;
      to.bufferOut32.set(this.bufferOut32);
      return to;
    }
    destroy() {
      this.destroyed = true;
      clean(this.state, this.buffer32, this.IV, this.bufferOut32);
      clean(...this.stack);
    }
    // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)
    b2CompressOut() {
      const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;
      const { h, l } = fromBig(BigInt(this.chunkOut++));
      swap32IfBE(buffer32);
      const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(B3_SIGMA, 0, buffer32, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], l, h, pos, flags);
      out32[0] = v0 ^ v8;
      out32[1] = v1 ^ v9;
      out32[2] = v2 ^ v10;
      out32[3] = v3 ^ v11;
      out32[4] = v4 ^ v12;
      out32[5] = v5 ^ v13;
      out32[6] = v6 ^ v14;
      out32[7] = v7 ^ v15;
      out32[8] = s[0] ^ v8;
      out32[9] = s[1] ^ v9;
      out32[10] = s[2] ^ v10;
      out32[11] = s[3] ^ v11;
      out32[12] = s[4] ^ v12;
      out32[13] = s[5] ^ v13;
      out32[14] = s[6] ^ v14;
      out32[15] = s[7] ^ v15;
      swap32IfBE(buffer32);
      swap32IfBE(out32);
      this.posOut = 0;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      clean(this.buffer.subarray(this.pos));
      let flags = this.flags | B3_Flags.ROOT;
      if (this.stack.length) {
        flags |= B3_Flags.PARENT;
        swap32IfBE(this.buffer32);
        this.compress(this.buffer32, 0, true);
        swap32IfBE(this.buffer32);
        this.chunksDone = 0;
        this.pos = this.blockLen;
      } else {
        flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;
      }
      this.flags = flags;
      this.b2CompressOut();
    }
    writeInto(out) {
      aexists(this, false);
      abytes(out);
      this.finish();
      const { blockLen, bufferOut } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.b2CompressOut();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible after digest call");
      return this.writeInto(out);
    }
    xof(bytes) {
      anumber(bytes);
      return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
      aoutput(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.enableXOF = false;
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
  };
  var blake3 = /* @__PURE__ */ createHasher((opts = {}) => new _BLAKE3(opts));

  // ../../hmac.js
  var _HMAC = class {
    oHash;
    iHash;
    blockLen;
    outputLen;
    finished = false;
    destroyed = false;
    constructor(hash, key) {
      ahash(hash);
      abytes(key, void 0, "key");
      this.iHash = hash.create();
      if (typeof this.iHash.update !== "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const blockLen = this.blockLen;
      const pad = new Uint8Array(blockLen);
      pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
      for (let i = 0; i < pad.length; i++)
        pad[i] ^= 54;
      this.iHash.update(pad);
      this.oHash = hash.create();
      for (let i = 0; i < pad.length; i++)
        pad[i] ^= 54 ^ 92;
      this.oHash.update(pad);
      clean(pad);
    }
    update(buf) {
      aexists(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      aexists(this);
      abytes(out, this.outputLen, "output");
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to ||= Object.create(Object.getPrototypeOf(this), {});
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    clone() {
      return this._cloneInto();
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  };
  var hmac = (hash, key, message) => new _HMAC(hash, key).update(message).digest();
  hmac.create = (hash, key) => new _HMAC(hash, key);

  // ../../hkdf.js
  function extract(hash, ikm, salt) {
    ahash(hash);
    if (salt === void 0)
      salt = new Uint8Array(hash.outputLen);
    return hmac(hash, salt, ikm);
  }
  var HKDF_COUNTER = /* @__PURE__ */ Uint8Array.of(0);
  var EMPTY_BUFFER = /* @__PURE__ */ Uint8Array.of();
  function expand(hash, prk, info, length = 32) {
    ahash(hash);
    anumber(length, "length");
    const olen = hash.outputLen;
    if (length > 255 * olen)
      throw new Error("Length must be <= 255*HashLen");
    const blocks = Math.ceil(length / olen);
    if (info === void 0)
      info = EMPTY_BUFFER;
    else
      abytes(info, void 0, "info");
    const okm = new Uint8Array(blocks * olen);
    const HMAC = hmac.create(hash, prk);
    const HMACTmp = HMAC._cloneInto();
    const T = new Uint8Array(HMAC.outputLen);
    for (let counter = 0; counter < blocks; counter++) {
      HKDF_COUNTER[0] = counter + 1;
      HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T).update(info).update(HKDF_COUNTER).digestInto(T);
      okm.set(T, olen * counter);
      HMAC._cloneInto(HMACTmp);
    }
    HMAC.destroy();
    HMACTmp.destroy();
    clean(T, HKDF_COUNTER);
    return okm.slice(0, length);
  }
  var hkdf = (hash, ikm, salt, info, length) => expand(hash, extract(hash, ikm, salt), info, length);

  // ../../pbkdf2.js
  function pbkdf2Init(hash, _password, _salt, _opts) {
    ahash(hash);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    anumber(c, "c");
    anumber(dkLen, "dkLen");
    anumber(asyncTick, "asyncTick");
    if (c < 1)
      throw new Error("iterations (c) must be >= 1");
    const password = kdfInputToBytes(_password, "password");
    const salt = kdfInputToBytes(_salt, "salt");
    const DK = new Uint8Array(dkLen);
    const PRF = hmac.create(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
      prfW.destroy();
    clean(u);
    return DK;
  }
  function pbkdf2(hash, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      for (let ui = 1; ui < c; ui++) {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i = 0; i < Ti.length; i++)
          Ti[i] ^= u[i];
      }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  async function pbkdf2Async(hash, password, salt, opts) {
    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      await asyncLoop(c - 1, asyncTick, () => {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i = 0; i < Ti.length; i++)
          Ti[i] ^= u[i];
      });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }

  // ../../sha2.js
  var SHA256_K = /* @__PURE__ */ Uint32Array.from([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  var SHA2_32B = class extends HashMD {
    constructor(outputLen) {
      super(64, outputLen, 8, false);
    }
    get() {
      const { A, B, C, D, E, F, G: G2, H } = this;
      return [A, B, C, D, E, F, G2, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G2, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G2 | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        SHA256_W[i] = view.getUint32(offset, false);
      for (let i = 16; i < 64; i++) {
        const W15 = SHA256_W[i - 15];
        const W2 = SHA256_W[i - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G: G2, H } = this;
      for (let i = 0; i < 64; i++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G2) + SHA256_K[i] + SHA256_W[i] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G2;
        G2 = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G2 = G2 + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G2, H);
    }
    roundClean() {
      clean(SHA256_W);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      clean(this.buffer);
    }
  };
  var _SHA256 = class extends SHA2_32B {
    // We cannot use array here since array allows indexing by variable
    // which means optimizer/compiler cannot use registers.
    A = SHA256_IV[0] | 0;
    B = SHA256_IV[1] | 0;
    C = SHA256_IV[2] | 0;
    D = SHA256_IV[3] | 0;
    E = SHA256_IV[4] | 0;
    F = SHA256_IV[5] | 0;
    G = SHA256_IV[6] | 0;
    H = SHA256_IV[7] | 0;
    constructor() {
      super(32);
    }
  };
  var _SHA224 = class extends SHA2_32B {
    A = SHA224_IV[0] | 0;
    B = SHA224_IV[1] | 0;
    C = SHA224_IV[2] | 0;
    D = SHA224_IV[3] | 0;
    E = SHA224_IV[4] | 0;
    F = SHA224_IV[5] | 0;
    G = SHA224_IV[6] | 0;
    H = SHA224_IV[7] | 0;
    constructor() {
      super(28);
    }
  };
  var K512 = /* @__PURE__ */ (() => split([
    "0x428a2f98d728ae22",
    "0x7137449123ef65cd",
    "0xb5c0fbcfec4d3b2f",
    "0xe9b5dba58189dbbc",
    "0x3956c25bf348b538",
    "0x59f111f1b605d019",
    "0x923f82a4af194f9b",
    "0xab1c5ed5da6d8118",
    "0xd807aa98a3030242",
    "0x12835b0145706fbe",
    "0x243185be4ee4b28c",
    "0x550c7dc3d5ffb4e2",
    "0x72be5d74f27b896f",
    "0x80deb1fe3b1696b1",
    "0x9bdc06a725c71235",
    "0xc19bf174cf692694",
    "0xe49b69c19ef14ad2",
    "0xefbe4786384f25e3",
    "0x0fc19dc68b8cd5b5",
    "0x240ca1cc77ac9c65",
    "0x2de92c6f592b0275",
    "0x4a7484aa6ea6e483",
    "0x5cb0a9dcbd41fbd4",
    "0x76f988da831153b5",
    "0x983e5152ee66dfab",
    "0xa831c66d2db43210",
    "0xb00327c898fb213f",
    "0xbf597fc7beef0ee4",
    "0xc6e00bf33da88fc2",
    "0xd5a79147930aa725",
    "0x06ca6351e003826f",
    "0x142929670a0e6e70",
    "0x27b70a8546d22ffc",
    "0x2e1b21385c26c926",
    "0x4d2c6dfc5ac42aed",
    "0x53380d139d95b3df",
    "0x650a73548baf63de",
    "0x766a0abb3c77b2a8",
    "0x81c2c92e47edaee6",
    "0x92722c851482353b",
    "0xa2bfe8a14cf10364",
    "0xa81a664bbc423001",
    "0xc24b8b70d0f89791",
    "0xc76c51a30654be30",
    "0xd192e819d6ef5218",
    "0xd69906245565a910",
    "0xf40e35855771202a",
    "0x106aa07032bbd1b8",
    "0x19a4c116b8d2d0c8",
    "0x1e376c085141ab53",
    "0x2748774cdf8eeb99",
    "0x34b0bcb5e19b48a8",
    "0x391c0cb3c5c95a63",
    "0x4ed8aa4ae3418acb",
    "0x5b9cca4f7763e373",
    "0x682e6ff3d6b2b8a3",
    "0x748f82ee5defb2fc",
    "0x78a5636f43172f60",
    "0x84c87814a1f0ab72",
    "0x8cc702081a6439ec",
    "0x90befffa23631e28",
    "0xa4506cebde82bde9",
    "0xbef9a3f7b2c67915",
    "0xc67178f2e372532b",
    "0xca273eceea26619c",
    "0xd186b8c721c0c207",
    "0xeada7dd6cde0eb1e",
    "0xf57d4f7fee6ed178",
    "0x06f067aa72176fba",
    "0x0a637dc5a2c898a6",
    "0x113f9804bef90dae",
    "0x1b710b35131c471b",
    "0x28db77f523047d84",
    "0x32caab7b40c72493",
    "0x3c9ebe0a15c9bebc",
    "0x431d67c49c100d4c",
    "0x4cc5d4becb3e42b6",
    "0x597f299cfc657e2a",
    "0x5fcb6fab3ad6faec",
    "0x6c44198c4a475817"
  ].map((n) => BigInt(n))))();
  var SHA512_Kh = /* @__PURE__ */ (() => K512[0])();
  var SHA512_Kl = /* @__PURE__ */ (() => K512[1])();
  var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
  var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
  var SHA2_64B = class extends HashMD {
    constructor(outputLen) {
      super(128, outputLen, 16, false);
    }
    // prettier-ignore
    get() {
      const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
      return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
      this.Ah = Ah | 0;
      this.Al = Al | 0;
      this.Bh = Bh | 0;
      this.Bl = Bl | 0;
      this.Ch = Ch | 0;
      this.Cl = Cl | 0;
      this.Dh = Dh | 0;
      this.Dl = Dl | 0;
      this.Eh = Eh | 0;
      this.El = El | 0;
      this.Fh = Fh | 0;
      this.Fl = Fl | 0;
      this.Gh = Gh | 0;
      this.Gl = Gl | 0;
      this.Hh = Hh | 0;
      this.Hl = Hl | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4) {
        SHA512_W_H[i] = view.getUint32(offset);
        SHA512_W_L[i] = view.getUint32(offset += 4);
      }
      for (let i = 16; i < 80; i++) {
        const W15h = SHA512_W_H[i - 15] | 0;
        const W15l = SHA512_W_L[i - 15] | 0;
        const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
        const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
        const W2h = SHA512_W_H[i - 2] | 0;
        const W2l = SHA512_W_L[i - 2] | 0;
        const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
        const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
        const SUMl = add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
        const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
        SHA512_W_H[i] = SUMh | 0;
        SHA512_W_L[i] = SUMl | 0;
      }
      let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
      for (let i = 0; i < 80; i++) {
        const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
        const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
        const CHIh = Eh & Fh ^ ~Eh & Gh;
        const CHIl = El & Fl ^ ~El & Gl;
        const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
        const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
        const T1l = T1ll | 0;
        const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
        const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
        const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
        const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
        Hh = Gh | 0;
        Hl = Gl | 0;
        Gh = Fh | 0;
        Gl = Fl | 0;
        Fh = Eh | 0;
        Fl = El | 0;
        ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
        Dh = Ch | 0;
        Dl = Cl | 0;
        Ch = Bh | 0;
        Cl = Bl | 0;
        Bh = Ah | 0;
        Bl = Al | 0;
        const All = add3L(T1l, sigma0l, MAJl);
        Ah = add3H(All, T1h, sigma0h, MAJh);
        Al = All | 0;
      }
      ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
      ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
      ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
      ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
      ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
      ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
      ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
      ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
      this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
      clean(SHA512_W_H, SHA512_W_L);
    }
    destroy() {
      clean(this.buffer);
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
  };
  var _SHA512 = class extends SHA2_64B {
    Ah = SHA512_IV[0] | 0;
    Al = SHA512_IV[1] | 0;
    Bh = SHA512_IV[2] | 0;
    Bl = SHA512_IV[3] | 0;
    Ch = SHA512_IV[4] | 0;
    Cl = SHA512_IV[5] | 0;
    Dh = SHA512_IV[6] | 0;
    Dl = SHA512_IV[7] | 0;
    Eh = SHA512_IV[8] | 0;
    El = SHA512_IV[9] | 0;
    Fh = SHA512_IV[10] | 0;
    Fl = SHA512_IV[11] | 0;
    Gh = SHA512_IV[12] | 0;
    Gl = SHA512_IV[13] | 0;
    Hh = SHA512_IV[14] | 0;
    Hl = SHA512_IV[15] | 0;
    constructor() {
      super(64);
    }
  };
  var _SHA384 = class extends SHA2_64B {
    Ah = SHA384_IV[0] | 0;
    Al = SHA384_IV[1] | 0;
    Bh = SHA384_IV[2] | 0;
    Bl = SHA384_IV[3] | 0;
    Ch = SHA384_IV[4] | 0;
    Cl = SHA384_IV[5] | 0;
    Dh = SHA384_IV[6] | 0;
    Dl = SHA384_IV[7] | 0;
    Eh = SHA384_IV[8] | 0;
    El = SHA384_IV[9] | 0;
    Fh = SHA384_IV[10] | 0;
    Fl = SHA384_IV[11] | 0;
    Gh = SHA384_IV[12] | 0;
    Gl = SHA384_IV[13] | 0;
    Hh = SHA384_IV[14] | 0;
    Hl = SHA384_IV[15] | 0;
    constructor() {
      super(48);
    }
  };
  var T224_IV = /* @__PURE__ */ Uint32Array.from([
    2352822216,
    424955298,
    1944164710,
    2312950998,
    502970286,
    855612546,
    1738396948,
    1479516111,
    258812777,
    2077511080,
    2011393907,
    79989058,
    1067287976,
    1780299464,
    286451373,
    2446758561
  ]);
  var T256_IV = /* @__PURE__ */ Uint32Array.from([
    573645204,
    4230739756,
    2673172387,
    3360449730,
    596883563,
    1867755857,
    2520282905,
    1497426621,
    2519219938,
    2827943907,
    3193839141,
    1401305490,
    721525244,
    746961066,
    246885852,
    2177182882
  ]);
  var _SHA512_224 = class extends SHA2_64B {
    Ah = T224_IV[0] | 0;
    Al = T224_IV[1] | 0;
    Bh = T224_IV[2] | 0;
    Bl = T224_IV[3] | 0;
    Ch = T224_IV[4] | 0;
    Cl = T224_IV[5] | 0;
    Dh = T224_IV[6] | 0;
    Dl = T224_IV[7] | 0;
    Eh = T224_IV[8] | 0;
    El = T224_IV[9] | 0;
    Fh = T224_IV[10] | 0;
    Fl = T224_IV[11] | 0;
    Gh = T224_IV[12] | 0;
    Gl = T224_IV[13] | 0;
    Hh = T224_IV[14] | 0;
    Hl = T224_IV[15] | 0;
    constructor() {
      super(28);
    }
  };
  var _SHA512_256 = class extends SHA2_64B {
    Ah = T256_IV[0] | 0;
    Al = T256_IV[1] | 0;
    Bh = T256_IV[2] | 0;
    Bl = T256_IV[3] | 0;
    Ch = T256_IV[4] | 0;
    Cl = T256_IV[5] | 0;
    Dh = T256_IV[6] | 0;
    Dl = T256_IV[7] | 0;
    Eh = T256_IV[8] | 0;
    El = T256_IV[9] | 0;
    Fh = T256_IV[10] | 0;
    Fl = T256_IV[11] | 0;
    Gh = T256_IV[12] | 0;
    Gl = T256_IV[13] | 0;
    Hh = T256_IV[14] | 0;
    Hl = T256_IV[15] | 0;
    constructor() {
      super(32);
    }
  };
  var sha256 = /* @__PURE__ */ createHasher(
    () => new _SHA256(),
    /* @__PURE__ */ oidNist(1)
  );
  var sha224 = /* @__PURE__ */ createHasher(
    () => new _SHA224(),
    /* @__PURE__ */ oidNist(4)
  );
  var sha512 = /* @__PURE__ */ createHasher(
    () => new _SHA512(),
    /* @__PURE__ */ oidNist(3)
  );
  var sha384 = /* @__PURE__ */ createHasher(
    () => new _SHA384(),
    /* @__PURE__ */ oidNist(2)
  );
  var sha512_256 = /* @__PURE__ */ createHasher(
    () => new _SHA512_256(),
    /* @__PURE__ */ oidNist(6)
  );
  var sha512_224 = /* @__PURE__ */ createHasher(
    () => new _SHA512_224(),
    /* @__PURE__ */ oidNist(5)
  );

  // ../../scrypt.js
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let i = 0; i < 8; i += 2) {
      x04 ^= rotl(x00 + x12 | 0, 7);
      x08 ^= rotl(x04 + x00 | 0, 9);
      x12 ^= rotl(x08 + x04 | 0, 13);
      x00 ^= rotl(x12 + x08 | 0, 18);
      x09 ^= rotl(x05 + x01 | 0, 7);
      x13 ^= rotl(x09 + x05 | 0, 9);
      x01 ^= rotl(x13 + x09 | 0, 13);
      x05 ^= rotl(x01 + x13 | 0, 18);
      x14 ^= rotl(x10 + x06 | 0, 7);
      x02 ^= rotl(x14 + x10 | 0, 9);
      x06 ^= rotl(x02 + x14 | 0, 13);
      x10 ^= rotl(x06 + x02 | 0, 18);
      x03 ^= rotl(x15 + x11 | 0, 7);
      x07 ^= rotl(x03 + x15 | 0, 9);
      x11 ^= rotl(x07 + x03 | 0, 13);
      x15 ^= rotl(x11 + x07 | 0, 18);
      x01 ^= rotl(x00 + x03 | 0, 7);
      x02 ^= rotl(x01 + x00 | 0, 9);
      x03 ^= rotl(x02 + x01 | 0, 13);
      x00 ^= rotl(x03 + x02 | 0, 18);
      x06 ^= rotl(x05 + x04 | 0, 7);
      x07 ^= rotl(x06 + x05 | 0, 9);
      x04 ^= rotl(x07 + x06 | 0, 13);
      x05 ^= rotl(x04 + x07 | 0, 18);
      x11 ^= rotl(x10 + x09 | 0, 7);
      x08 ^= rotl(x11 + x10 | 0, 9);
      x09 ^= rotl(x08 + x11 | 0, 13);
      x10 ^= rotl(x09 + x08 | 0, 18);
      x12 ^= rotl(x15 + x14 | 0, 7);
      x13 ^= rotl(x12 + x15 | 0, 9);
      x14 ^= rotl(x13 + x12 | 0, 13);
      x15 ^= rotl(x14 + x13 | 0, 18);
    }
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
    let head = oi + 0;
    let tail = oi + 16 * r;
    for (let i = 0; i < 16; i++)
      out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
    for (let i = 0; i < r; i++, head += 16, ii += 16) {
      XorAndSalsa(out, tail, input, ii, out, head);
      if (i > 0)
        tail += 16;
      XorAndSalsa(out, head, input, ii += 16, out, tail);
    }
  }
  function scryptInit(password, salt, _opts) {
    const opts = checkOpts({
      dkLen: 32,
      asyncTick: 10,
      maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    anumber(N, "N");
    anumber(r, "r");
    anumber(p, "p");
    anumber(dkLen, "dkLen");
    anumber(asyncTick, "asyncTick");
    anumber(maxmem, "maxmem");
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error("progressCb must be a function");
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    const pow32 = Math.pow(2, 32);
    if (N <= 1 || (N & N - 1) !== 0 || N > pow32)
      throw new Error('"N" expected a power of 2, and 2^1 <= N <= 2^32');
    if (p < 1 || p > (pow32 - 1) * 32 / blockSize)
      throw new Error('"p" expected integer 1..((2^32 - 1) * 32) / (128 * r)');
    if (dkLen < 1 || dkLen > (pow32 - 1) * 32)
      throw new Error('"dkLen" expected integer 1..(2^32 - 1) * 32');
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem)
      throw new Error('"maxmem" limit was hit, expected 128*r*(N+p) > "maxmem"=' + maxmem);
    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = u32(B);
    const V = u32(new Uint8Array(blockSize * N));
    const tmp = u32(new Uint8Array(blockSize));
    let blockMixCb = () => {
    };
    if (onProgress) {
      const totalBlockMix = 2 * N * p;
      const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
      let blockMixCnt = 0;
      blockMixCb = () => {
        blockMixCnt++;
        if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
          onProgress(blockMixCnt / totalBlockMix);
      };
    }
    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
    clean(B, V, tmp);
    return res;
  }
  function scrypt(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    swap32IfBE(B32);
    for (let pi = 0; pi < p; pi++) {
      const Pi = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi + i];
      for (let i = 0, pos = 0; i < N - 1; i++) {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      }
      BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
      blockMixCb();
      for (let i = 0; i < N; i++) {
        const j = B32[Pi + blockSize32 - 16] % N;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi, r);
        blockMixCb();
      }
    }
    swap32IfBE(B32);
    return scryptOutput(password, dkLen, B, V, tmp);
  }
  async function scryptAsync(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
    swap32IfBE(B32);
    for (let pi = 0; pi < p; pi++) {
      const Pi = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi + i];
      let pos = 0;
      await asyncLoop(N - 1, asyncTick, () => {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      });
      BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
      blockMixCb();
      await asyncLoop(N, asyncTick, () => {
        const j = B32[Pi + blockSize32 - 16] % N;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi, r);
        blockMixCb();
      });
    }
    swap32IfBE(B32);
    return scryptOutput(password, dkLen, B, V, tmp);
  }

  // ../../eskdf.js
  var SCRYPT_FACTOR = 2 ** 19;
  var PBKDF2_FACTOR = 2 ** 17;
  function scrypt2(password, salt) {
    return scrypt(password, salt, { N: SCRYPT_FACTOR, r: 8, p: 1, dkLen: 32 });
  }
  function pbkdf22(password, salt) {
    return pbkdf2(sha256, password, salt, { c: PBKDF2_FACTOR, dkLen: 32 });
  }
  function xor32(a, b) {
    abytes(a, 32);
    abytes(b, 32);
    const arr = new Uint8Array(32);
    for (let i = 0; i < 32; i++) {
      arr[i] = a[i] ^ b[i];
    }
    return arr;
  }
  function strHasLength(str, min, max) {
    return typeof str === "string" && str.length >= min && str.length <= max;
  }
  function deriveMainSeed(username, password) {
    if (!strHasLength(username, 8, 255))
      throw new Error("invalid username");
    if (!strHasLength(password, 8, 255))
      throw new Error("invalid password");
    const codes = { _1: 1, _2: 2 };
    const sep = { s: String.fromCharCode(codes._1), p: String.fromCharCode(codes._2) };
    const scr = scrypt2(password + sep.s, username + sep.s);
    const pbk = pbkdf22(password + sep.p, username + sep.p);
    const res = xor32(scr, pbk);
    clean(scr, pbk);
    return res;
  }
  function getSaltInfo(protocol, accountId = 0) {
    if (!(strHasLength(protocol, 3, 15) && /^[a-z0-9]{3,15}$/.test(protocol))) {
      throw new Error("invalid protocol");
    }
    const allowsStr = /^password\d{0,3}|ssh|tor|file$/.test(protocol);
    let salt;
    if (typeof accountId === "string") {
      if (!allowsStr)
        throw new Error("accountId must be a number");
      if (!strHasLength(accountId, 1, 255))
        throw new Error("accountId must be string of length 1..255");
      salt = kdfInputToBytes(accountId);
    } else if (Number.isSafeInteger(accountId)) {
      if (accountId < 0 || accountId > Math.pow(2, 32) - 1)
        throw new Error("invalid accountId");
      salt = new Uint8Array(4);
      createView(salt).setUint32(0, accountId, false);
    } else {
      throw new Error("accountId must be a number" + (allowsStr ? " or string" : ""));
    }
    const info = kdfInputToBytes(protocol);
    return { salt, info };
  }
  function countBytes(num) {
    if (typeof num !== "bigint" || num <= BigInt(128))
      throw new Error("invalid number");
    return Math.ceil(num.toString(2).length / 8);
  }
  function getKeyLength(options) {
    if (!options || typeof options !== "object")
      return 32;
    const hasLen = "keyLength" in options;
    const hasMod = "modulus" in options;
    if (hasLen && hasMod)
      throw new Error("cannot combine keyLength and modulus options");
    if (!hasLen && !hasMod)
      throw new Error("must have either keyLength or modulus option");
    const l = hasMod ? countBytes(options.modulus) + 8 : options.keyLength;
    if (!(typeof l === "number" && l >= 16 && l <= 8192))
      throw new Error("invalid keyLength");
    return l;
  }
  function modReduceKey(key, modulus) {
    const _1 = BigInt(1);
    const num = BigInt("0x" + bytesToHex(key));
    const res = num % (modulus - _1) + _1;
    if (res < _1)
      throw new Error("expected positive number");
    const len = key.length - 8;
    const hex = res.toString(16).padStart(len * 2, "0");
    const bytes = hexToBytes(hex);
    if (bytes.length !== len)
      throw new Error("invalid length of result key");
    return bytes;
  }
  async function eskdf(username, password) {
    let seed = deriveMainSeed(username, password);
    function deriveCK(protocol, accountId = 0, options) {
      abytes(seed, 32);
      const { salt, info } = getSaltInfo(protocol, accountId);
      const keyLength = getKeyLength(options);
      const key = hkdf(sha256, seed, salt, info, keyLength);
      return options && "modulus" in options ? modReduceKey(key, options.modulus) : key;
    }
    function expire() {
      if (seed)
        seed.fill(1);
      seed = void 0;
    }
    const fingerprint = Array.from(deriveCK("fingerprint", 0)).slice(0, 6).map((char) => char.toString(16).padStart(2, "0").toUpperCase()).join(":");
    return Object.freeze({ deriveChildKey: deriveCK, expire, fingerprint });
  }

  // ../../legacy.js
  var SHA1_IV = /* @__PURE__ */ Uint32Array.from([
    1732584193,
    4023233417,
    2562383102,
    271733878,
    3285377520
  ]);
  var SHA1_W = /* @__PURE__ */ new Uint32Array(80);
  var _SHA1 = class extends HashMD {
    A = SHA1_IV[0] | 0;
    B = SHA1_IV[1] | 0;
    C = SHA1_IV[2] | 0;
    D = SHA1_IV[3] | 0;
    E = SHA1_IV[4] | 0;
    constructor() {
      super(64, 20, 8, false);
    }
    get() {
      const { A, B, C, D, E } = this;
      return [A, B, C, D, E];
    }
    set(A, B, C, D, E) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        SHA1_W[i] = view.getUint32(offset, false);
      for (let i = 16; i < 80; i++)
        SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);
      let { A, B, C, D, E } = this;
      for (let i = 0; i < 80; i++) {
        let F, K2;
        if (i < 20) {
          F = Chi(B, C, D);
          K2 = 1518500249;
        } else if (i < 40) {
          F = B ^ C ^ D;
          K2 = 1859775393;
        } else if (i < 60) {
          F = Maj(B, C, D);
          K2 = 2400959708;
        } else {
          F = B ^ C ^ D;
          K2 = 3395469782;
        }
        const T = rotl(A, 5) + F + E + K2 + SHA1_W[i] | 0;
        E = D;
        D = C;
        C = rotl(B, 30);
        B = A;
        A = T;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      this.set(A, B, C, D, E);
    }
    roundClean() {
      clean(SHA1_W);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0);
      clean(this.buffer);
    }
  };
  var sha1 = /* @__PURE__ */ createHasher(() => new _SHA1());
  var p32 = /* @__PURE__ */ Math.pow(2, 32);
  var K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) => Math.floor(p32 * Math.abs(Math.sin(i + 1))));
  var MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);
  var MD5_W = /* @__PURE__ */ new Uint32Array(16);
  var _MD5 = class extends HashMD {
    A = MD5_IV[0] | 0;
    B = MD5_IV[1] | 0;
    C = MD5_IV[2] | 0;
    D = MD5_IV[3] | 0;
    constructor() {
      super(64, 16, 8, true);
    }
    get() {
      const { A, B, C, D } = this;
      return [A, B, C, D];
    }
    set(A, B, C, D) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        MD5_W[i] = view.getUint32(offset, true);
      let { A, B, C, D } = this;
      for (let i = 0; i < 64; i++) {
        let F, g, s;
        if (i < 16) {
          F = Chi(B, C, D);
          g = i;
          s = [7, 12, 17, 22];
        } else if (i < 32) {
          F = Chi(D, B, C);
          g = (5 * i + 1) % 16;
          s = [5, 9, 14, 20];
        } else if (i < 48) {
          F = B ^ C ^ D;
          g = (3 * i + 5) % 16;
          s = [4, 11, 16, 23];
        } else {
          F = C ^ (B | ~D);
          g = 7 * i % 16;
          s = [6, 10, 15, 21];
        }
        F = F + A + K[i] + MD5_W[g];
        A = D;
        D = C;
        C = B;
        B = B + rotl(F, s[i % 4]);
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      this.set(A, B, C, D);
    }
    roundClean() {
      clean(MD5_W);
    }
    destroy() {
      this.set(0, 0, 0, 0);
      clean(this.buffer);
    }
  };
  var md5 = /* @__PURE__ */ createHasher(() => new _MD5());
  var Rho160 = /* @__PURE__ */ Uint8Array.from([
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8
  ]);
  var Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();
  var Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();
  var idxLR = /* @__PURE__ */ (() => {
    const L = [Id160];
    const R = [Pi160];
    const res = [L, R];
    for (let i = 0; i < 4; i++)
      for (let j of res)
        j.push(j[i].map((k) => Rho160[k]));
    return res;
  })();
  var idxL = /* @__PURE__ */ (() => idxLR[0])();
  var idxR = /* @__PURE__ */ (() => idxLR[1])();
  var shifts160 = /* @__PURE__ */ [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
  ].map((i) => Uint8Array.from(i));
  var shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));
  var shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));
  var Kl160 = /* @__PURE__ */ Uint32Array.from([
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
  ]);
  var Kr160 = /* @__PURE__ */ Uint32Array.from([
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
  ]);
  function ripemd_f(group, x, y, z) {
    if (group === 0)
      return x ^ y ^ z;
    if (group === 1)
      return x & y | ~x & z;
    if (group === 2)
      return (x | ~y) ^ z;
    if (group === 3)
      return x & z | y & ~z;
    return x ^ (y | ~z);
  }
  var BUF_160 = /* @__PURE__ */ new Uint32Array(16);
  var _RIPEMD160 = class extends HashMD {
    h0 = 1732584193 | 0;
    h1 = 4023233417 | 0;
    h2 = 2562383102 | 0;
    h3 = 271733878 | 0;
    h4 = 3285377520 | 0;
    constructor() {
      super(64, 20, 8, true);
    }
    get() {
      const { h0, h1, h2, h3, h4 } = this;
      return [h0, h1, h2, h3, h4];
    }
    set(h0, h1, h2, h3, h4) {
      this.h0 = h0 | 0;
      this.h1 = h1 | 0;
      this.h2 = h2 | 0;
      this.h3 = h3 | 0;
      this.h4 = h4 | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        BUF_160[i] = view.getUint32(offset, true);
      let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
      for (let group = 0; group < 5; group++) {
        const rGroup = 4 - group;
        const hbl = Kl160[group], hbr = Kr160[group];
        const rl = idxL[group], rr = idxR[group];
        const sl = shiftsL160[group], sr = shiftsR160[group];
        for (let i = 0; i < 16; i++) {
          const tl = rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el | 0;
          al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
        }
        for (let i = 0; i < 16; i++) {
          const tr = rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er | 0;
          ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
        }
      }
      this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
    }
    roundClean() {
      clean(BUF_160);
    }
    destroy() {
      this.destroyed = true;
      clean(this.buffer);
      this.set(0, 0, 0, 0, 0);
    }
  };
  var ripemd160 = /* @__PURE__ */ createHasher(() => new _RIPEMD160());

  // ../../sha3.js
  var _0n = BigInt(0);
  var _1n = BigInt(1);
  var _2n = BigInt(2);
  var _7n = BigInt(7);
  var _256n = BigInt(256);
  var _0x71n = BigInt(113);
  var SHA3_PI = [];
  var SHA3_ROTL = [];
  var _SHA3_IOTA = [];
  for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    let t = _0n;
    for (let j = 0; j < 7; j++) {
      R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
      if (R & _2n)
        t ^= _1n << (_1n << BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
  }
  var IOTAS = split(_SHA3_IOTA, true);
  var SHA3_IOTA_H = IOTAS[0];
  var SHA3_IOTA_L = IOTAS[1];
  var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
  var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round];
      s[1] ^= SHA3_IOTA_L[round];
    }
    clean(B);
  }
  var Keccak = class _Keccak {
    state;
    pos = 0;
    posOut = 0;
    finished = false;
    state32;
    destroyed = false;
    blockLen;
    suffix;
    outputLen;
    enableXOF = false;
    rounds;
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      anumber(outputLen, "outputLen");
      if (!(0 < blockLen && blockLen < 200))
        throw new Error("only keccak-f1600 function is supported");
      this.state = new Uint8Array(200);
      this.state32 = u32(this.state);
    }
    clone() {
      return this._cloneInto();
    }
    keccak() {
      swap32IfBE(this.state32);
      keccakP(this.state32, this.rounds);
      swap32IfBE(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      aexists(this);
      abytes(data);
      const { blockLen, state } = this;
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        for (let i = 0; i < take; i++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      aexists(this, false);
      abytes(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes) {
      anumber(bytes);
      return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
      aoutput(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      clean(this.state);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to ||= new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds);
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  var genKeccak = (suffix, blockLen, outputLen, info = {}) => createHasher(() => new Keccak(blockLen, suffix, outputLen), info);
  var sha3_224 = /* @__PURE__ */ genKeccak(
    6,
    144,
    28,
    /* @__PURE__ */ oidNist(7)
  );
  var sha3_256 = /* @__PURE__ */ genKeccak(
    6,
    136,
    32,
    /* @__PURE__ */ oidNist(8)
  );
  var sha3_384 = /* @__PURE__ */ genKeccak(
    6,
    104,
    48,
    /* @__PURE__ */ oidNist(9)
  );
  var sha3_512 = /* @__PURE__ */ genKeccak(
    6,
    72,
    64,
    /* @__PURE__ */ oidNist(10)
  );
  var keccak_224 = /* @__PURE__ */ genKeccak(1, 144, 28);
  var keccak_256 = /* @__PURE__ */ genKeccak(1, 136, 32);
  var keccak_384 = /* @__PURE__ */ genKeccak(1, 104, 48);
  var keccak_512 = /* @__PURE__ */ genKeccak(1, 72, 64);
  var genShake = (suffix, blockLen, outputLen, info = {}) => createHasher((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true), info);
  var shake128 = /* @__PURE__ */ genShake(31, 168, 16, /* @__PURE__ */ oidNist(11));
  var shake256 = /* @__PURE__ */ genShake(31, 136, 32, /* @__PURE__ */ oidNist(12));

  // ../../sha3-addons.js
  var _8n = /* @__PURE__ */ BigInt(8);
  var _ffn = /* @__PURE__ */ BigInt(255);
  function leftEncode(n) {
    n = BigInt(n);
    const res = [Number(n & _ffn)];
    n >>= _8n;
    for (; n > 0; n >>= _8n)
      res.unshift(Number(n & _ffn));
    res.unshift(res.length);
    return new Uint8Array(res);
  }
  function rightEncode(n) {
    n = BigInt(n);
    const res = [Number(n & _ffn)];
    n >>= _8n;
    for (; n > 0; n >>= _8n)
      res.unshift(Number(n & _ffn));
    res.push(res.length);
    return new Uint8Array(res);
  }
  function chooseLen(opts, outputLen) {
    return opts.dkLen === void 0 ? outputLen : opts.dkLen;
  }
  var abytesOrZero2 = (buf, title = "") => {
    if (buf === void 0)
      return EMPTY_BUFFER2;
    abytes(buf, void 0, title);
    return buf;
  };
  var getPadding = (len, block2) => new Uint8Array((block2 - len % block2) % block2);
  function cshakePers(hash, opts = {}) {
    if (!opts || opts.personalization === void 0 && opts.NISTfn === void 0)
      return hash;
    const blockLenBytes = leftEncode(hash.blockLen);
    const fn = opts.NISTfn === void 0 ? EMPTY_BUFFER2 : kdfInputToBytes(opts.NISTfn);
    const fnLen = leftEncode(_8n * BigInt(fn.length));
    const pers = abytesOrZero2(opts.personalization, "personalization");
    const persLen = leftEncode(_8n * BigInt(pers.length));
    if (!fn.length && !pers.length)
      return hash;
    hash.suffix = 4;
    hash.update(blockLenBytes).update(fnLen).update(fn).update(persLen).update(pers);
    let totalLen = blockLenBytes.length + fnLen.length + fn.length + persLen.length + pers.length;
    hash.update(getPadding(totalLen, hash.blockLen));
    return hash;
  }
  var gencShake = (suffix, blockLen, outputLen) => createHasher((opts = {}) => cshakePers(new Keccak(blockLen, suffix, chooseLen(opts, outputLen), true), opts));
  var cshake128 = /* @__PURE__ */ gencShake(31, 168, 16);
  var cshake256 = /* @__PURE__ */ gencShake(31, 136, 32);
  var _KMAC = class extends Keccak {
    constructor(blockLen, outputLen, enableXOF, key, opts = {}) {
      super(blockLen, 31, outputLen, enableXOF);
      cshakePers(this, { NISTfn: "KMAC", personalization: opts.personalization });
      abytes(key, void 0, "key");
      const blockLenBytes = leftEncode(this.blockLen);
      const keyLen = leftEncode(_8n * BigInt(key.length));
      this.update(blockLenBytes).update(keyLen).update(key);
      const totalLen = blockLenBytes.length + keyLen.length + key.length;
      this.update(getPadding(totalLen, this.blockLen));
    }
    finish() {
      if (!this.finished)
        this.update(rightEncode(this.enableXOF ? 0 : _8n * BigInt(this.outputLen)));
      super.finish();
    }
    _cloneInto(to) {
      if (!to) {
        to = Object.create(Object.getPrototypeOf(this), {});
        to.state = this.state.slice();
        to.blockLen = this.blockLen;
        to.state32 = u32(to.state);
      }
      return super._cloneInto(to);
    }
    clone() {
      return this._cloneInto();
    }
  };
  function genKmac(blockLen, outputLen, xof = false) {
    const kmac = (key, message, opts) => kmac.create(key, opts).update(message).digest();
    kmac.create = (key, opts = {}) => new _KMAC(blockLen, chooseLen(opts, outputLen), xof, key, opts);
    return kmac;
  }
  var kmac128 = /* @__PURE__ */ genKmac(168, 16);
  var kmac256 = /* @__PURE__ */ genKmac(136, 32);
  var genTurbo = (blockLen, outputLen) => createHasher((opts = {}) => {
    const D = opts.D === void 0 ? 31 : opts.D;
    if (!Number.isSafeInteger(D) || D < 1 || D > 127)
      throw new Error('"D" (domain separation byte) must be 0x01..0x7f, got: ' + D);
    return new Keccak(blockLen, D, opts.dkLen === void 0 ? outputLen : opts.dkLen, true, 12);
  });
  var turboshake128 = /* @__PURE__ */ genTurbo(168, 32);
  var turboshake256 = /* @__PURE__ */ genTurbo(136, 64);
  function rightEncodeK12(n) {
    n = BigInt(n);
    const res = [];
    for (; n > 0; n >>= _8n)
      res.unshift(Number(n & _ffn));
    res.push(res.length);
    return Uint8Array.from(res);
  }
  var EMPTY_BUFFER2 = /* @__PURE__ */ Uint8Array.of();
  var _KangarooTwelve = class __KangarooTwelve extends Keccak {
    chunkLen = 8192;
    leafHash;
    leafLen;
    personalization;
    chunkPos = 0;
    // Position of current block in chunk
    chunksDone = 0;
    // How many chunks we already have
    constructor(blockLen, leafLen, outputLen, rounds, opts) {
      super(blockLen, 7, outputLen, true, rounds);
      this.leafLen = leafLen;
      this.personalization = abytesOrZero2(opts.personalization, "personalization");
    }
    update(data) {
      abytes(data);
      const { chunkLen, blockLen, leafLen, rounds } = this;
      for (let pos = 0, len = data.length; pos < len; ) {
        if (this.chunkPos == chunkLen) {
          if (this.leafHash)
            super.update(this.leafHash.digest());
          else {
            this.suffix = 6;
            super.update(Uint8Array.from([3, 0, 0, 0, 0, 0, 0, 0]));
          }
          this.leafHash = new Keccak(blockLen, 11, leafLen, false, rounds);
          this.chunksDone++;
          this.chunkPos = 0;
        }
        const take = Math.min(chunkLen - this.chunkPos, len - pos);
        const chunk = data.subarray(pos, pos + take);
        if (this.leafHash)
          this.leafHash.update(chunk);
        else
          super.update(chunk);
        this.chunkPos += take;
        pos += take;
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      const { personalization } = this;
      this.update(personalization).update(rightEncodeK12(personalization.length));
      if (this.leafHash) {
        super.update(this.leafHash.digest());
        super.update(rightEncodeK12(this.chunksDone));
        super.update(Uint8Array.from([255, 255]));
      }
      super.finish.call(this);
    }
    destroy() {
      super.destroy.call(this);
      if (this.leafHash)
        this.leafHash.destroy();
      this.personalization = EMPTY_BUFFER2;
    }
    _cloneInto(to) {
      const { blockLen, leafLen, leafHash, outputLen, rounds } = this;
      to ||= new __KangarooTwelve(blockLen, leafLen, outputLen, rounds, {});
      super._cloneInto(to);
      if (leafHash)
        to.leafHash = leafHash._cloneInto(to.leafHash);
      to.personalization.set(this.personalization);
      to.leafLen = this.leafLen;
      to.chunkPos = this.chunkPos;
      to.chunksDone = this.chunksDone;
      return to;
    }
    clone() {
      return this._cloneInto();
    }
  };
  var kt128 = /* @__PURE__ */ createHasher((opts = {}) => new _KangarooTwelve(168, 32, chooseLen(opts, 32), 12, opts));
  var kt256 = /* @__PURE__ */ createHasher((opts = {}) => new _KangarooTwelve(136, 64, chooseLen(opts, 64), 12, opts));
  var _KeccakPRG = class __KeccakPRG extends Keccak {
    rate;
    constructor(capacity) {
      anumber(capacity);
      const rate = 1600 - capacity;
      const rho = rate - 2;
      if (capacity < 0 || capacity > 1600 - 10 || rho % 8)
        throw new Error("invalid capacity");
      super(rho / 8, 0, 0, true);
      this.rate = rate;
      this.posOut = Math.floor((rate + 7) / 8);
    }
    keccak() {
      this.state[this.pos] ^= 1;
      this.state[this.blockLen] ^= 2;
      super.keccak();
      this.pos = 0;
      this.posOut = 0;
    }
    update(data) {
      super.update(data);
      this.posOut = this.blockLen;
      return this;
    }
    finish() {
    }
    digestInto(_out) {
      throw new Error("digest is not allowed, use .fetch instead");
    }
    addEntropy(seed) {
      this.update(seed);
    }
    randomBytes(length) {
      return this.xof(length);
    }
    clean() {
      if (this.rate < 1600 / 2 + 1)
        throw new Error("rate is too low to use .forget()");
      this.keccak();
      for (let i = 0; i < this.blockLen; i++)
        this.state[i] = 0;
      this.pos = this.blockLen;
      this.keccak();
      this.posOut = this.blockLen;
    }
    _cloneInto(to) {
      const { rate } = this;
      to ||= new __KeccakPRG(1600 - rate);
      super._cloneInto(to);
      to.rate = rate;
      return to;
    }
    clone() {
      return this._cloneInto();
    }
  };
  var keccakprg = (capacity = 254) => new _KeccakPRG(capacity);

  // ../../webcrypto.js
  var webcrypto_exports = {};
  __export(webcrypto_exports, {
    hkdf: () => hkdf2,
    hmac: () => hmac2,
    pbkdf2: () => pbkdf23,
    sha256: () => sha2562,
    sha384: () => sha3842,
    sha512: () => sha5122
  });
  function _subtle() {
    const cr = typeof globalThis === "object" ? globalThis.crypto : null;
    const sb = cr?.subtle;
    if (typeof sb === "object" && sb != null)
      return sb;
    throw new Error("crypto.subtle must be defined");
  }
  function createWebHash(name, blockLen, outputLen) {
    const hashC = async (msg) => {
      abytes(msg);
      const crypto = _subtle();
      return new Uint8Array(await crypto.digest(name, msg));
    };
    hashC.webCryptoName = name;
    hashC.outputLen = outputLen;
    hashC.blockLen = blockLen;
    hashC.create = () => {
      throw new Error("not implemented");
    };
    return hashC;
  }
  function ahashWeb(hash) {
    ahash(hash);
    if (typeof hash.webCryptoName !== "string")
      throw new Error("non-web hash");
  }
  var sha2562 = /* @__PURE__ */ createWebHash("SHA-256", 64, 32);
  var sha3842 = /* @__PURE__ */ createWebHash("SHA-384", 128, 48);
  var sha5122 = /* @__PURE__ */ createWebHash("SHA-512", 128, 64);
  var hmac2 = /* @__PURE__ */ (() => {
    const hmac_ = async (hash, key, message) => {
      const crypto = _subtle();
      abytes(key, void 0, "key");
      abytes(message, void 0, "message");
      ahashWeb(hash);
      const wkey = await crypto.importKey("raw", key, { name: "HMAC", hash: hash.webCryptoName }, false, ["sign"]);
      return new Uint8Array(await crypto.sign("HMAC", wkey, message));
    };
    hmac_.create = (_hash, _key) => {
      throw new Error("not implemented");
    };
    return hmac_;
  })();
  async function hkdf2(hash, ikm, salt, info, length) {
    const crypto = _subtle();
    ahashWeb(hash);
    abytes(ikm, void 0, "ikm");
    anumber(length, "length");
    if (salt !== void 0)
      abytes(salt, void 0, "salt");
    if (info !== void 0)
      abytes(info, void 0, "info");
    const wkey = await crypto.importKey("raw", ikm, "HKDF", false, ["deriveBits"]);
    const opts = {
      name: "HKDF",
      hash: hash.webCryptoName,
      salt: salt === void 0 ? new Uint8Array(0) : salt,
      info: info === void 0 ? new Uint8Array(0) : info
    };
    return new Uint8Array(await crypto.deriveBits(opts, wkey, 8 * length));
  }
  async function pbkdf23(hash, password, salt, opts) {
    const crypto = _subtle();
    ahashWeb(hash);
    const _opts = checkOpts({ dkLen: 32 }, opts);
    const { c, dkLen } = _opts;
    anumber(c, "c");
    anumber(dkLen, "dkLen");
    const _password = kdfInputToBytes(password, "password");
    const _salt = kdfInputToBytes(salt, "salt");
    const key = await crypto.importKey("raw", _password, "PBKDF2", false, [
      "deriveBits"
    ]);
    const deriveOpts = { name: "PBKDF2", salt: _salt, iterations: c, hash: hash.webCryptoName };
    return new Uint8Array(await crypto.deriveBits(deriveOpts, key, 8 * dkLen));
  }

  // input.js
  var utils = { bytesToHex, hexToBytes, concatBytes, utf8ToBytes, randomBytes };
  return __toCommonJS(input_exports);
})();
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\bridge\vendor\noble-hashes.js
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\CipherForge.py
# HASH: 1a5b6f7da168fb1b595ffef6b6943ea270fd31eb45cd889800593389bcafbf81
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

"""
FILENAME:
"CipherForge.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason, 
by any AI system, user, or process. If you see this comment, do not remove or change it 
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.
MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.
NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning, 
fully preserved and entirely visible at all times.
ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner 
designed to prevent any AI, user, or process from removing or altering it.
IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

#!/usr/bin/env python3
"""
Main flow with mandatory Argon2id usage for all encryption,
ensuring ephemeral keys/ciphertext are fully logged so
the secret can be rebuilt from logs alone. All references to any 'decoy' secret have been removed. Only a single real secret
is stored across shares for correct (real) answers; incorrect answers contain dummy shares.

UPDATED: Now uses Noble crypto bridge for all cryptographic operations.
"""

import os
import base64
from typing import Dict, Optional, Tuple, Union

# Logging
from modules.debug_utils import log_debug, log_crypto_event

# Noble crypto bridge
from modules.crypto_bridge import (
    argon2id,
    aes_gcm_encrypt,
    aes_gcm_decrypt,
    chacha20poly1305_encrypt,
    chacha20poly1305_decrypt,
    random_bytes
)


def derive_key_argon2id(password: str,
                        salt: bytes,
                        key_length: int = 32,
                        time_cost: int = 3,
                        memory_cost: int = 65536,
                        parallelism: int = 4,
                        ephemeral: bool = False) -> bytes:
    """
    FIXED KDF: use Argon2id via Noble bridge with exact hash_len=key_length.
    """
    ephemeral_info = {
        "salt_b64": base64.b64encode(salt).decode(),
        "ephemeral_password": password if ephemeral else "<not ephemeral>"
    }
    log_debug(
        f"Starting Argon2id KDF (Noble). pass='{password}', salt(b64)='{ephemeral_info['salt_b64']}'",
        level="INFO",
        component="CRYPTO"
    )

    # Use Noble bridge for Argon2id
    derived_bytes = argon2id(
        password=password.encode("utf-8"),
        salt=salt,
        m_cost=memory_cost,
        t=time_cost,
        p=parallelism,
        dk_len=key_length
    )

    log_crypto_event(
        operation="KDF Derive",
        algorithm="Argon2id",
        ephemeral=ephemeral,
        ephemeral_key=derived_bytes,
        argon_params={
            "time_cost": time_cost,
            "memory_cost": memory_cost,
            "parallelism": parallelism,
            "key_length": key_length
        },
        key_derived_bytes=derived_bytes,
        details={
            "message": "Argon2id (Noble) complete. Derived key is in logs.",
            "ephemeral_info": ephemeral_info
        }
    )
    return derived_bytes


def encrypt_aes256gcm(plaintext: Union[str, bytes, bytearray],
                      key: bytes,
                      aad: Optional[bytes] = None,
                      ephemeral_pass: Optional[str] = None,
                      ephemeral_salt: Optional[bytes] = None) -> Dict[str, str]:
    """
    AES-256-GCM with optional AAD binding via Noble bridge.
    Plaintext can be str, bytes, or bytearray.
    """
    if isinstance(plaintext, str):
        plaintext = plaintext.encode("utf-8")
    elif isinstance(plaintext, bytearray):
        plaintext = bytes(plaintext)

    nonce = random_bytes(12)
    
    # Noble bridge returns ciphertext with tag appended
    ciphertext_with_tag = aes_gcm_encrypt(key, nonce, plaintext, aad)
    
    # Split ciphertext and tag (last 16 bytes)
    ciphertext = ciphertext_with_tag[:-16]
    tag = ciphertext_with_tag[-16:]

    out = {
        "alg": "AES-256-GCM",
        "ciphertext": base64.b64encode(ciphertext).decode(),
        "nonce": base64.b64encode(nonce).decode(),
        "tag": base64.b64encode(tag).decode()
    }

    details = {
        "Nonce(base64)": out["nonce"],
        "Ciphertext(base64)": out["ciphertext"],
        "Tag(base64)": out["tag"],
        "AAD_len": (len(aad) if aad else 0)
    }
    if ephemeral_pass is not None:
        details["ephemeral_password"] = ephemeral_pass
    if ephemeral_salt is not None:
        details["ephemeral_salt_b64"] = base64.b64encode(ephemeral_salt).decode()

    log_crypto_event(
        operation="Encrypt",
        algorithm="AES-256",
        mode="GCM",
        ephemeral_key=key,
        details=details,
        ephemeral=True
    )
    return out


def decrypt_aes256gcm(enc_dict: Dict[str, str], key: bytes, aad: Optional[bytes] = None) -> bytes:
    import base64
    ciphertext = base64.b64decode(enc_dict["ciphertext"])
    nonce = base64.b64decode(enc_dict["nonce"])
    tag = base64.b64decode(enc_dict["tag"])

    log_crypto_event(
        operation="Decrypt",
        algorithm="AES-256",
        mode="GCM",
        ephemeral_key=key,
        details={
            "Nonce(base64)": enc_dict["nonce"],
            "Ciphertext(base64)": enc_dict["ciphertext"],
            "Tag(base64)": enc_dict["tag"],
            "AAD_len": (len(aad) if aad else 0)
        },
        ephemeral=True
    )

    # Combine ciphertext and tag for Noble bridge
    ciphertext_with_tag = ciphertext + tag
    plaintext = aes_gcm_decrypt(key, nonce, ciphertext_with_tag, aad)
    return plaintext


def encrypt_chacha20poly1305(plaintext: Union[str, bytes, bytearray],
                             key: bytes,
                             aad: Optional[bytes] = None,
                             ephemeral_pass: Optional[str] = None,
                             ephemeral_salt: Optional[bytes] = None) -> Dict[str, str]:
    """
    ChaCha20-Poly1305 with optional AAD binding via Noble bridge.
    Returns ciphertext (includes tag) and nonce. No synthetic 'tag' field.
    """
    if isinstance(plaintext, str):
        plaintext = plaintext.encode("utf-8")
    elif isinstance(plaintext, bytearray):
        plaintext = bytes(plaintext)

    nonce = random_bytes(12)
    ciphertext = chacha20poly1305_encrypt(key, nonce, plaintext, aad)

    out = {
        "alg": "ChaCha20-Poly1305",
        "ciphertext": base64.b64encode(ciphertext).decode(),
        "nonce": base64.b64encode(nonce).decode()
    }
    details = {
        "Nonce(base64)": out["nonce"],
        "Ciphertext(base64)": out["ciphertext"],
        "AAD_len": (len(aad) if aad else 0)
    }
    if ephemeral_pass is not None:
        details["ephemeral_password"] = ephemeral_pass
    if ephemeral_salt is not None:
        details["ephemeral_salt_b64"] = base64.b64encode(ephemeral_salt).decode()

    log_crypto_event(
        operation="Encrypt",
        algorithm="ChaCha20-Poly1305",
        mode="Poly1305",
        ephemeral_key=key,
        details=details,
        ephemeral=True
    )
    return out


def decrypt_chacha20poly1305(enc_dict: Dict[str, str], key: bytes, aad: Optional[bytes] = None) -> bytes:
    import base64
    nonce = base64.b64decode(enc_dict["nonce"])
    ciphertext = base64.b64decode(enc_dict["ciphertext"])

    log_crypto_event(
        operation="Decrypt",
        algorithm="ChaCha20-Poly1305",
        mode="Poly1305",
        ephemeral_key=key,
        details={
            "Nonce(base64)": enc_dict["nonce"],
            "Ciphertext(base64)": enc_dict["ciphertext"],
            "AAD_len": (len(aad) if aad else 0)
        },
        ephemeral=True
    )

    plaintext = chacha20poly1305_decrypt(key, nonce, ciphertext, aad)
    return plaintext


def derive_or_recover_key(password: str,
                          salt: Optional[bytes] = None,
                          ephemeral: bool = False,
                          time_cost: int = 3,
                          memory_cost: int = 65536,
                          parallelism: int = 4) -> Tuple[bytes, bytes]:
    """
    Wrapper: generate salt if missing; derive 32-byte key using Argon2id Noble bridge.
    """
    if salt is None:
        salt = random_bytes(16)

    if ephemeral:
        log_debug(f"Using ephemeral password='{password}' (raw).", level="INFO", component="CRYPTO")
    else:
        log_debug(f"Using user-provided password='{password}' (raw).", level="INFO", component="CRYPTO")

    key = derive_key_argon2id(
        password=password,
        salt=salt,
        ephemeral=ephemeral,
        time_cost=time_cost,
        memory_cost=memory_cost,
        parallelism=parallelism
    )
    return key, salt

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\CipherForge.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\main.py
# HASH: 159af869d83fcf0b227a5e66a480e4ac63483f3a679d582ae62c01ea3b3b5b00
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

"""
FILENAME:
"main.py"
PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.
MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.
NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.
ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.
IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.
UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""
#!/usr/bin/env python3
"""
Main flow with Argon2id-based encryption for per-answer shares using the
**Pure Q&A (passwordless)** approach. Per-answer keys are derived from the
answer text + per-answer salt; no per-answer passwords are stored in the kit.
SECURITY-FIX:
- No per-answer credentials in the kit (passwordless per-answer keys).
- AEAD now uses AAD binding: AAD = q_hash || alt_hash || alg || version.
- ChaCha20-Poly1305 entries no longer carry a synthetic 'tag' field.
- Raw secret is not normalized (no NFKC); base64 only for transport; policy limit enforced.
NEW (this update):
- **Decoy secrets**: Up to 5 user-configured decoys. If restoration criteria for the real
  secret are not met, the system deterministically returns a decoy secret instead of failing.
- Decoys are indistinguishable: same padding, algorithms, logging density, sizes, and an
  authentication catalog that does not reveal which secret is real.
- **Auth catalog**: Instead of a single "final_auth" for the real secret, the kit stores a
  shuffled catalog of (salt, HMAC(secret)) for *all* secrets (real+decoys). On recovery, we
  verify that the reconstructed secret matches *one* entry, printing a generic AUTH OK without
  disclosing whether it was real or decoy.
- **Global alternative mapping**: Per-decoy shares are produced for *all* alternatives so any
  (even weak/incorrect) selection can reconstruct a decoy while real requires >=T correct picks.
- **Brute-force estimator upgrade**: Side-by-side with/without Argon2id; shows total trials to
  reach the real threshold (lower bound) and the minimal decoy threshold; includes quantum
  (Grover) estimate; keeps sensitive logging intact (beta).
UPDATED: Now uses Noble crypto bridge instead of Python cryptography library.
BUG FIXES: Fixed blank correct answer selection, question type validation, and file save display.
Notes:
- Backward-compatible data layout for the demo path.
- Saved-kit layout changes: "final_auth" → "auth_catalog" and "secrets_count".
"""
import os
import sys
import json
import base64
import curses
import asyncio
import threading
import hashlib
import hmac
import secrets
import time
import math
from itertools import combinations
from pathlib import Path
from datetime import datetime
# Noble crypto bridge imports (replacing cryptography library)
from modules.crypto_bridge import (
    hkdf_sha256,
    hmac_sha256,
    random_bytes,
    consttime_equal
)
# project modules
from modules.debug_utils import (
    ensure_debug_dir,
    log_debug,
    log_error,
    log_exception,
    append_recovery_guide
)
from modules.security_utils import (
    validate_question,
    sanitize_input,
    normalize_text,
    hash_share
)
from modules.input_utils import get_valid_int, get_nonempty_secret
from modules.ui_utils import (
    arrow_select_clear_on_toggle,
    arrow_select_no_toggle,
    editing_menu,
    final_edit_menu
)
# Import SSS functions from the bridge
from modules.split_utils import split_secret_and_dummy
from modules.sss_bridge import sss_split, sss_combine
# crypto primitives (CipherForge)
from CipherForge import (
    derive_or_recover_key,
    encrypt_aes256gcm,
    decrypt_aes256gcm,
    encrypt_chacha20poly1305,
    decrypt_chacha20poly1305
)
SRC_DIR = Path(__file__).parent.resolve()
SAVE_DIR = SRC_DIR / "user_configured_security_questions"
QUESTIONS_FILE_NAME = "example_questions25.json"
QUESTIONS_PATH = SRC_DIR / QUESTIONS_FILE_NAME
KIT_VERSION = 3 # bump for new auth_catalog + decoy support
# Security policy constants
SECQ_MIN_BITS = 80.0 # minimum combinatorial hardness (log2 expected tries)
chosen_lock = threading.Lock()
combine_lock = threading.Lock()
# ---------- helpers & UI ----------
def get_threshold(prompt_text, low, high):
    while True:
        raw = input(f"{prompt_text} ({low}..{high}): ")
        try:
            val = int(raw)
            if low <= val <= high:
                return val
        except ValueError:
            pass
        print(f"Invalid input. Must be an integer between {low} and {high}.\n")
def _policy_min_threshold(correct_count: int) -> int:
    """
    Enforce a baseline threshold policy:
      T >= max(8, ceil(0.35 * correct_count)), but not more than correct_count.
    """
    if correct_count <= 1:
        return correct_count
    return min(correct_count, max(8, math.ceil(0.35 * correct_count)))
def _normalize_for_comparison(text: str) -> str:
    """
    Used for human-input editing/dup-checks.
    """
    processed = text.strip()
    common_trailing_punct = ".,!?;:"
    while processed and processed[-1] in common_trailing_punct:
        processed = processed[:-1]
    processed = processed.strip()
    return normalize_text(sanitize_input(processed.lower()))
def _norm_for_kit(text: str) -> str:
    """
    EXACT normalization used for hashing questions/alternatives in the KIT:
    sanitize_input(normalize_text(text))
    """
    return sanitize_input(normalize_text(text))
def _sha3_hex(s: str) -> str:
    return hashlib.sha3_256(s.encode("utf-8")).hexdigest()
def _integrity_hash_for_kit(qtext: str, alts: list[str]) -> str:
    qn = _norm_for_kit(qtext)
    altn = [_norm_for_kit(a) for a in alts]
    block = qn + "\n" + "\n".join(sorted(altn))
    return _sha3_hex(block)
def _alt_hash_for_kit(alt_text: str) -> str:
    return _sha3_hex(_norm_for_kit(alt_text))
def _aad_bytes(q_hash: str, alt_hash: str, algorithm: str, version: int = KIT_VERSION) -> bytes:
    """
    Deterministic AAD binding for AEAD operations.
    """
    return f"{q_hash}|{alt_hash}|{algorithm}|{version}".encode("utf-8")
def _derive_answer_key(answer_text: str,
                       salt: bytes,
                       t: int, m: int, p: int) -> bytes:
    """
    Derive per-answer key from normalized answer text and per-answer salt.
    Uses Argon2id RAW via derive_or_recover_key wrapper.
    """
    normalized = _norm_for_kit(answer_text)
    key, _ = derive_or_recover_key(
        normalized, salt, ephemeral=False,
        time_cost=t, memory_cost=m, parallelism=p
    )
    return key
def _decrypt_share_from_entry(entry: dict,
                              arg_time: int,
                              arg_mem: int,
                              arg_par: int,
                              q_hash: str | None = None,
                              alt_hash: str | None = None,
                              qid: int | None = None,
                              qtext: str | None = None,
                              alt_text: str | None = None) -> bytes | None:
    """
    Given a per-answer encrypted entry from the kit, derive the per-answer key
    from the *answer text* + stored salt, and decrypt with AAD binding.
    """
    try:
        alg = entry.get("algorithm")
        salt_b64 = entry.get("salt") or entry.get("salt_b64")
        kdf = entry.get("kdf") or {}
        if not (salt_b64 and alg and kdf):
            log_error("Entry missing required fields (salt/algorithm/kdf).",
                      details={"q_hash": q_hash, "alt_hash": alt_hash, "algorithm": alg})
            return None
        if not alt_text:
            log_error("Answer text required for decryption in passwordless design.",
                      details={"q_hash": q_hash, "alt_hash": alt_hash})
            return None
        salt = base64.b64decode(salt_b64)
        t = int(kdf.get("t", arg_time))
        m = int(kdf.get("m", arg_mem))
        p = int(kdf.get("p", arg_par))
        key = _derive_answer_key(alt_text, salt, t, m, p)
        aad = _aad_bytes(q_hash or "", alt_hash or "", alg)
        if alg == "chacha20poly1305":
            pt = decrypt_chacha20poly1305(entry, key, aad=aad)
        else:
            pt = decrypt_aes256gcm(entry, key, aad=aad)
        # Log the share hash (beta)
        shash = hash_share(pt)
        log_debug(
            "Decrypted share.",
            level="INFO",
            component="CRYPTO",
            details={
                "q_id": qid,
                "q_text": qtext,
                "q_hash": q_hash,
                "alt_text": alt_text,
                "alt_hash": alt_hash,
                "algorithm": alg,
                "share_sha3_256_hex": shash,
                "share_len_bytes": len(pt)
            }
        )
        return pt
    except Exception as e:
        log_exception(e, "Failed to decrypt share from entry.")
        return None
# ---- combinatorial hardness helpers ----
def _log2_comb(n: int, k: int) -> float:
    if k < 0 or k > n:
        return float("-inf")
    # Use lgamma to avoid huge integers
    return (math.lgamma(n + 1) - math.lgamma(k + 1) - math.lgamma(n - k + 1)) / math.log(2.0)
def _combinatorial_bits(total_alts: int, total_correct: int, threshold: int) -> float:
    """
    bits = log2( C(total_alts, T) / C(total_correct, T) )
    Expected tries to pick a real T-subset at random among all T-subsets.
    """
    return _log2_comb(total_alts, threshold) - _log2_comb(total_correct, threshold)
# ---- Argon2 calibration & timing ----
def calibrate_argon2(target_ms: float = 250.0, max_mib: int = 1024) -> tuple[int, int, int, float]:
    """
    Increase memory-cost first (up to max_mib), then time-cost,
    until a single Argon2id derivation reaches target_ms.
    Returns (t, m_kib, p, measured_ms).
    """
    pwd = "SECQ_calibration"
    salt = random_bytes(16)
    t = 2
    m_kib = 256 * 1024 # 256 MiB
    p = 1
    measured = 0.0
    while True:
        st = time.perf_counter()
        _key, _ = derive_or_recover_key(pwd, salt, False, t, m_kib, p)
        measured = (time.perf_counter() - st) * 1000.0
        if measured >= target_ms:
            break
        if m_kib < max_mib * 1024:
            m_kib = min(max_mib * 1024, m_kib * 2)
        else:
            if t < 6:
                t += 1
            else:
                break
    return t, m_kib, p, measured
def estimate_argon2_time_ms(arg_time: int, arg_mem: int, arg_par: int, samples: int = 1) -> float:
    """
    Measure a local Argon2id derivation time for the given parameters.
    """
    pwd = "SECQ_estimate"
    total = 0.0
    for _ in range(max(1, samples)):
        salt = random_bytes(16)
        st = time.perf_counter()
        _k, _ = derive_or_recover_key(pwd, salt, False, arg_time, arg_mem, arg_par)
        total += (time.perf_counter() - st) * 1000.0
    return total / max(1, samples)
def prompt_pad_size_multi(max_b64_len: int) -> int:
    recommended_pad = max(128, max_b64_len + 32)
    user_pad = recommended_pad
    print(f"\nCustom PAD size? Press ENTER to use recommended={recommended_pad}.")
    try_pad_str = input(f"PAD must be >= {max_b64_len} (max length of base64 secrets): ").strip()
    if try_pad_str:
        try:
            user_pad_input = int(try_pad_str)
            if user_pad_input < max_b64_len:
                print(f"Provided pad < max base64 secret length. Forcing {max_b64_len} instead.\n")
                user_pad = max_b64_len
            else:
                user_pad = user_pad_input
        except ValueError:
            print(f"Invalid number, using recommended={recommended_pad}.\n")
    if user_pad < max_b64_len:
        user_pad = max_b64_len
        print(f"Corrected final pad to {user_pad} to fit the secrets.\n")
    log_debug(f"Using PAD size: {user_pad}", level="INFO")
    return user_pad
def show_start_menu():
    while True:
        print("\nPress 1 - Enter setup phase")
        print("Press 2 - Proceed to example demonstration")
        choice_ = input("Choice: ").strip()
        if choice_ == "1":
            setup_phase()
        elif choice_ == "2":
            break
        else:
            print("Invalid choice. Please try again.\n")
def display_questions(questions):
    print("\n--- SECURITY QUESTIONS ---\n")
    for q in questions:
        typ = "CRITICAL" if q.get("is_critical") else "STANDARD"
        print(f"[Question {q['id']}] {q['text']} (Type: {typ})\n")
        for i, alt in enumerate(q["alternatives"], 1):
            letter = chr(ord('A') + i - 1)
            print(f"{letter}) {alt}")
        print("\n---\n")
def _decoy_pick_index(q_hashes_and_alt_hashes: list[tuple[str, str]], decoy_count: int) -> int:
    """
    Deterministically select a decoy index in [1..decoy_count] based on selected answers.
    """
    if decoy_count <= 0:
        return 1
    acc = hashlib.sha3_256()
    for qh, ah in sorted(q_hashes_and_alt_hashes):
        acc.update(qh.encode("utf-8"))
        acc.update(b"|")
        acc.update(ah.encode("utf-8"))
        acc.update(b";")
    val = int.from_bytes(acc.digest()[-4:], "big")
    return (val % decoy_count) + 1 # 1..decoy_count
def setup_phase():
    while True:
        print("\n--- Setup Phase ---")
        print("1. Create new security questions")
        print("2. Load security questions from a file")
        print("b. Back to main menu")
        choice = input("Choice: ").strip().lower()
        if choice == '1':
            manual_questions = manual_input_mode()
            if manual_questions:
                save_option = prompt_save_decision()
                if save_option == 'j':
                    save_questions(manual_questions)
                elif save_option == 'c':
                    print("(Continuing without saving.)\n")
            return
        elif choice == '2':
            file_load_phase()
            return
        elif choice == 'b':
            return
        else:
            print("Invalid choice. Please enter '1', '2', or 'b'.")
def file_load_phase():
    SAVE_DIR.mkdir(parents=True, exist_ok=True)
    all_json = sorted(f for f in SAVE_DIR.glob("*.json") if f.is_file())
    if not all_json:
        print(f"\nNo configuration files found in the '{SAVE_DIR.name}' directory.")
        input("Press Enter to go back: ")
        return
    print("\nAvailable configuration files:\n")
    for idx, fobj in enumerate(all_json, 1):
        print(f"{idx}) {fobj.name}")
    print("\nEnter the number of the file you'd like to load, or press b to go back.")
    while True:
        user_pick = input("Choice: ").strip().lower()
        if user_pick == 'b':
            return
        try:
            pick_val = int(user_pick)
            if 1 <= pick_val <= len(all_json):
                chosen_file = all_json[pick_val - 1]
                print(f"\nYou selected: {chosen_file.name}")
                try:
                    with open(chosen_file, "r", encoding="utf-8") as jf:
                        kit = json.load(jf)
                    run_recovery_kit_flow(kit, chosen_file)
                except Exception as e:
                    log_exception(e, f"Failed to load or process kit: {chosen_file}")
                    print("ERROR: Could not load/process the selected kit file.")
                return
            else:
                print("Invalid selection. Try again, or press b to go back.")
        except ValueError:
            print("Invalid input. Try again, or press b to go back.")
def manual_input_mode():
    """
    Returns list of questions:
      {
        "id": int,
        "text": str,
        "alternatives": [str],
        "correct_answers": [str], # used internally, not exported
        "is_critical": bool
      }
    """
    questions = []
    while True:
        current_qnum = len(questions) + 1
        print(f"\nEnter your security question #{current_qnum} (2..100 total):")
        question_text = ""
        while not question_text:
            question_text = input("[Your question here]: ").strip()
            if not question_text:
                print("Question text cannot be blank.")
        # number of alternatives
        while True:
            print("\nHow many answer alternatives should this question have?")
            print("Enter a number between 2 and 20")
            alt_count_str = input("Number of alternatives: ").strip()
            try:
                alt_count = int(alt_count_str)
                if 2 <= alt_count <= 20:
                    break
                print("Please enter a value between 2 and 20.")
            except ValueError:
                print("Invalid integer.")
        # alternatives
        alternatives = []
        norm_seen = set()
        print("\nEnter the alternatives:")
        for i in range(alt_count):
            while True:
                alt_raw = input(f"Alternative {i+1}: ").strip()
                if not alt_raw:
                    print("Alternative cannot be blank.")
                    continue
                norm = _normalize_for_comparison(alt_raw)
                if norm in norm_seen:
                    print("Duplicate or too similar alternative. Please enter a unique value.")
                    continue
                alternatives.append(alt_raw)
                norm_seen.add(norm)
                break
        # type - FIXED: Only accept 'c' or blank/enter
        is_critical = False
        print("\nSelect question type:")
        print("Standard is selected by default.")
        print("If you want to mark this question as critical, press c.")
        print("(Otherwise, press Enter to keep it as Standard)")
        while True:
            type_choice = input("Choice: ").strip().lower()
            if type_choice == '':
                # Standard (default)
                break
            elif type_choice == 'c':
                is_critical = True
                break
            else:
                print("Invalid choice. Press 'c' for Critical or Enter for Standard.")
        # correct answers selection
        correct_answers = _prompt_correct_answers_for_question(alternatives)
        # re-edit loop (E4 fix)
        while True:
            print("\nWould you like to re-edit anything for the current question before proceeding?")
            print("Press q – Re-edit the security question text")
            print("Press a – Re-edit all answer alternatives")
            print(f"Press # (1..{alt_count}) – Re-edit a single alternative by its number")
            print("Press r – Re-select the correct answer(s)")
            print("(Or press Enter to continue to next step/question)")
            e = input("Re-edit choice: ").strip().lower()
            if e == "":
                break
            if e == "q":
                new_text = ""
                while not new_text:
                    new_text = input("\nRe-enter security question text:\n").strip()
                    if not new_text:
                        print("Question text cannot be blank.")
                question_text = new_text
                print("(Question updated.)\n")
            elif e == "a":
                new_alts = []
                new_seen = set()
                print("\nRe-entering all alternatives...")
                for i in range(alt_count):
                    while True:
                        v = input(f"Re-enter Alternative {i+1}: ").strip()
                        if not v:
                            print("Alternative cannot be blank.")
                            continue
                        n = _normalize_for_comparison(v)
                        if n in new_seen:
                            print("Duplicate or too similar alternative. Please enter a unique value.")
                            continue
                        new_alts.append(v)
                        new_seen.add(n)
                        break
                alternatives = new_alts
                norm_seen = new_seen
                print("(Alternatives updated.)\n")
                # After changing alternatives, must re-select correct answers
                correct_answers = _prompt_correct_answers_for_question(alternatives)
            elif e == "r":
                correct_answers = _prompt_correct_answers_for_question(alternatives)
            else:
                try:
                    idx = int(e)
                    if 1 <= idx <= alt_count:
                        while True:
                            nv = input(f"Re-enter Alternative {idx}: ").strip()
                            if not nv:
                                print("Alternative cannot be blank.")
                                continue
                            n = _normalize_for_comparison(nv)
                            # check against others
                            others = set(_normalize_for_comparison(x) for j, x in enumerate(alternatives) if j != idx-1)
                            if n in others:
                                print("Duplicate or too similar to another existing alternative.")
                                continue
                            old_val = alternatives[idx-1]
                            alternatives[idx-1] = nv
                            # keep correct selection consistent
                            if old_val in correct_answers:
                                correct_answers = [nv if x == old_val else x for x in correct_answers]
                            print("(Alternative updated.)\n")
                            break
                    else:
                        print(f"Alternative number must be between 1 and {alt_count}.")
                except ValueError:
                    print("Unrecognized re-edit choice.\n")
        questions.append({
            "id": current_qnum,
            "text": question_text,
            "alternatives": alternatives,
            "correct_answers": correct_answers,
            "is_critical": is_critical
        })
        print("\nNavigation options:")
        print("Press n – Proceed to the next question")
        if len(questions) > 1:
            print("Press b – Go back and revise the previous question")
        if len(questions) >= 2:
            print("Press d – Done (finish input)")
        print(f"(You must have at least 2 questions to finish, you currently have {len(questions)}.)")
        nav = input("Choice: ").strip().lower()
        if nav == "n" or nav == "":
            if len(questions) >= 100:
                print("You have reached the maximum of 100 questions. Finishing input now.")
                break
        elif nav == "b":
            if questions:
                questions.pop()
            if questions:
                print("\nRevising the previous question (it will be re-entered)...")
                questions.pop()
                continue
        elif nav == "d":
            if len(questions) >= 2:
                print("\n--- Manual input complete. ---\n")
                break
            else:
                print("You must have at least 2 questions. Continue adding more.")
        else:
            if len(questions) >= 100:
                print("You have reached the maximum of 100 questions. Finishing input now.")
                break
    if questions:
        print("Summary of your manually entered questions:\n")
        for qd in questions:
            typ = "CRITICAL" if qd["is_critical"] else "STANDARD"
            print(f"[Question {qd['id']}] {qd['text']}")
            for i, alt in enumerate(qd["alternatives"], 1):
                letter = chr(ord('A') + i - 1)
                print(f" {letter}) {alt}")
            print(f" Type: {typ}")
            print(f" Correct: {', '.join(qd['correct_answers'])}\n")
    else:
        print("No questions were entered.\n")
    return questions
def _prompt_correct_answers_for_question(alternatives: list[str]) -> list[str]:
    """
    FIXED (E3): Rejects blank input. 'all' keyword requires confirmation.
    """
    if not alternatives:
        return []
    print("\nMark the correct answer(s) for this question.")
    print("Enter letters or numbers separated by commas (e.g., A,C or 1,3).")
    print("You can also type 'all' to select all alternatives.")
    legend = ", ".join(f"{chr(ord('A')+i)}={i+1}" for i in range(len(alternatives)))
    print("Legend:", legend)
   
    while True:
        raw = input("Correct selection(s): ").strip()
       
        if not raw:
            print("Select at least one correct alternative. Blank input is not allowed.")
            continue
        if raw.lower() == "all":
            confirm = input("Are you sure you want to mark ALL alternatives as correct? (y/n): ").strip().lower()
            if confirm == 'y':
                print("(All alternatives marked as correct)")
                return alternatives[:]
            else:
                print("Selection cancelled. Please select explicitly.")
                continue
        tokens = [t.strip() for chunk in raw.replace(",", " ").split() for t in [chunk] if t.strip()]
        if not tokens:
            print("Please provide a valid selection.")
            continue
           
        picks = set()
        ok = True
        for t in tokens:
            if len(t) == 1 and t.isalpha():
                idx = (ord(t.upper()) - ord('A')) + 1
            else:
                try:
                    idx = int(t)
                except ValueError:
                    print(f"Unrecognized token '{t}'.")
                    ok = False
                    break
            if not (1 <= idx <= len(alternatives)):
                print(f"Out of range: '{t}'.")
                ok = False
                break
            picks.add(idx)
        if not ok or not picks:
            continue
       
        selected = [alternatives[i-1] for i in sorted(picks)]
        print(f"(Selected: {', '.join(selected)})")
        return selected
def prompt_save_decision():
    while True:
        print("\nWould you like to save your questions?")
        print("Press j – Save as both JSON and text file")
        print("Press c – Continue without saving")
        c = input("Choice: ").strip().lower()
        if c in ("j", "c"):
            return c
        print("Invalid choice.")
# -------------- DECOYS + recovery kit (passwordless; AAD; AUTH-CATALOG) --------------
def _prompt_decoy_count() -> int:
    """FIX (E1): Prompt user for the number of decoys."""
    return get_valid_int("How many decoy secrets? (1-1000): ", 1, 1000)
def _prompt_decoy_secrets(count: int, real_secret: str) -> list[str]:
    """
    FIX (E1, E5): Ask for a specific 'count' of decoy secrets.
    Enforces non-empty and uniqueness constraints.
    """
    decoys = []
    print("\n--- Configure Decoy Secrets ---")
    print("A decoy is returned when real restoration criteria are not met.")
    print("They should look fully plausible. The text you enter here is what will be revealed.")
   
    i = 1
    while i <= count:
        s = input(f"Enter decoy secret #{i} of {count}: ").strip()
        if not s:
            print("Decoy secret cannot be blank.")
            continue
        if s == real_secret:
            print("Decoy secret cannot be the same as the real secret.")
            continue
        if s in decoys:
            print("Decoy secret must be unique. This one has already been entered.")
            continue
       
        decoys.append(s)
        i += 1
   
    return decoys
def save_questions(questions):
    """
    Builds and saves a SELF-CONTAINED recovery kit (passwordless per-answer keys).
    Enforces a minimum combinatorial hardness before allowing kit generation.
    NEW: Generates *one real* secret and up to *five decoy* secrets. The JSON contains
    per-answer encrypted shares for: real only on correct alternatives (others carry
    indistinguishable random bytes), while each decoy has shares assigned for *all*
    alternatives to guarantee a successful reconstruction path.
    UPDATED: Now uses Noble crypto bridge for all cryptographic operations.
    FIXED (E6): Prompts for filename before saving.
    """
    print("\n--- Cryptographic Parameter Setup ---")
    real_secret = get_nonempty_secret("Enter the secret to be protected: ")
    real_bytes = real_secret.encode("utf-8")
    real_b64 = base64.b64encode(real_bytes).decode()
    # Optional decoys (E1, E5 fixes)
    decoy_count = _prompt_decoy_count()
    decoy_texts = _prompt_decoy_secrets(decoy_count, real_secret)
    decoy_bytes_list = [d.encode("utf-8") for d in decoy_texts]
    decoy_b64_list = [base64.b64encode(b).decode() for b in decoy_bytes_list]
    total_correct = sum(len(q.get("correct_answers", [])) for q in questions)
    total_alts = sum(len(q.get("alternatives", [])) for q in questions)
    total_incorrect = max(0, total_alts - total_correct)
    log_debug("Counts computed for kit build.",
              level="INFO",
              component="CRYPTO",
              details={"total_correct": total_correct, "total_alternatives": total_alts, "total_incorrect": total_incorrect})
    if total_correct == 0:
        print("ERROR: No correct answers were defined across your questions. At least one is required.")
        return
    min_thr = _policy_min_threshold(total_correct)
    max_thr = total_correct
    print(f"\n[Policy] Minimum threshold for your {total_correct} real share(s) is {min_thr}.")
    r_thr = get_threshold("Enter the real threshold", min_thr, max_thr)
    max_b64_len = max(len(real_b64), *(len(db64) for db64 in decoy_b64_list))
    pad_size = prompt_pad_size_multi(max_b64_len)
    arg_time, arg_mem, arg_par = prompt_argon2_parameters()
    log_debug("Argon2id parameters confirmed for kit.",
              level="INFO",
              component="CRYPTO",
              details={"time_cost": arg_time, "memory_cost": arg_mem, "parallelism": arg_par})
    bits = _combinatorial_bits(total_alts, total_correct, r_thr)
    if not math.isfinite(bits) or bits < SECQ_MIN_BITS:
        print(f"\n[ABORT] Combinatorial hardness too low: ~{bits:.1f} bits "
              f"for N={total_alts}, C={total_correct}, T={r_thr}.")
        print("Add more questions/alternatives and/or increase the threshold, then try again.\n")
        return
    else:
        print(f"[OK] Combinatorial hardness: ~{bits:.1f} bits.")
    all_items: list[tuple[str, str, str, str, bool]] = []
    for q in questions:
        q_text = q["text"]
        alts = q["alternatives"]
        q_hash = _integrity_hash_for_kit(q_text, alts)
        correct_set_norm = set(_norm_for_kit(a) for a in q.get("correct_answers", []))
        for alt in alts:
            is_correct = _norm_for_kit(alt) in correct_set_norm
            all_items.append((q_hash, _alt_hash_for_kit(alt), q_text, alt, is_correct))
    total_alts = len(all_items)
    try:
        real_shares_correct = asyncio.run(
            sss_split(real_b64.encode("utf-8"), sum(1 for it in all_items if it[4]), r_thr, pad=pad_size)
        )
    except Exception as e:
        log_exception(e, "Error splitting REAL secret")
        return
    decoy_thresholds = [1] + [r_thr] * (len(decoy_b64_list) - 1)
    decoy_shares_by_idx: list[list[bytearray]] = []
    try:
        for db64, thr in zip(decoy_b64_list, decoy_thresholds):
            shares = asyncio.run(sss_split(db64.encode("utf-8"), total_alts, thr, pad=pad_size))
            decoy_shares_by_idx.append(shares)
    except Exception as e:
        log_exception(e, "Error splitting DECOY secret(s)")
        return
    def _auth_entry(secret_bytes: bytes) -> dict:
        salt = random_bytes(16)
        k_auth = hkdf_sha256(ikm=secret_bytes, salt=salt, info=b"SECQ final-auth v3", dk_len=32)
        tag = hmac_sha256(k_auth, secret_bytes)
        return {"salt": base64.b64encode(salt).decode(), "hmac_sha256": base64.b64encode(tag).decode()}
    auth_catalog = [_auth_entry(real_bytes)] + [_auth_entry(b) for b in decoy_bytes_list]
    secrets_perm = list(range(len(auth_catalog)))
    secrets.shuffle(secrets_perm)
    auth_catalog = [auth_catalog[i] for i in secrets_perm]
    encrypted_shares: dict[str, dict[str, dict]] = {}
    real_idx = 0
    share_len = pad_size + 1
    def _enc_one_share(plaintext_share: bytes, q_hash: str, alt_text: str, alg_choice: str) -> dict:
        salt = random_bytes(16)
        key = _derive_answer_key(alt_text, salt, arg_time, arg_mem, arg_par)
        aad = _aad_bytes(q_hash, _alt_hash_for_kit(alt_text), alg_choice)
        if alg_choice == "chacha20poly1305":
            enc = encrypt_chacha20poly1305(plaintext_share, key, aad=aad)
            return {
                "ciphertext": enc["ciphertext"], "nonce": enc["nonce"],
                "algorithm": "chacha20poly1305", "salt": base64.b64encode(salt).decode(),
                "kdf": {"type": "argon2id", "t": arg_time, "m": arg_mem, "p": arg_par, "len": 32}
            }
        else:
            enc = encrypt_aes256gcm(plaintext_share, key, aad=aad)
            return {
                "ciphertext": enc["ciphertext"], "nonce": enc["nonce"], "tag": enc["tag"],
                "algorithm": "aes256gcm", "salt": base64.b64encode(salt).decode(),
                "kdf": {"type": "argon2id", "t": arg_time, "m": arg_mem, "p": arg_par, "len": 32}
            }
    for global_idx, (q_hash, a_hash, q_text, alt_text, is_corr) in enumerate(all_items):
        encrypted_shares.setdefault(q_hash, {})
        per_alt_block = {}
        if is_corr:
            if real_idx < len(real_shares_correct):
                real_share = bytes(real_shares_correct[real_idx])
                real_idx += 1
            else:
                log_error("Internal error: real_idx overflow", details={"real_idx": real_idx, "len": len(real_shares_correct)})
                real_share = random_bytes(share_len)
        else:
            real_share = random_bytes(share_len)
        per_alt_block["s0"] = _enc_one_share(real_share, q_hash, alt_text, secrets.choice(["chacha20poly1305", "aes256gcm"]))
        for decoy_i, shares_list in enumerate(decoy_shares_by_idx, start=1):
            dec_share = bytes(shares_list[global_idx])
            per_alt_block[f"s{decoy_i}"] = _enc_one_share(dec_share, q_hash, alt_text, secrets.choice(["chacha20poly1305", "aes256gcm"]))
        encrypted_shares[q_hash][a_hash] = per_alt_block
        log_debug(
            "Mapped Q/A to encrypted multi-secret shares.", level="INFO", component="CRYPTO",
            details={"q_text": q_text, "alt_text": alt_text, "q_hash": q_hash, "alt_hash": a_hash,
                     "real_valid": bool(is_corr), "decoy_variants": len(decoy_shares_by_idx)}
        )
    questions_out = [{
        "id": q["id"], "text": q["text"], "alternatives": q["alternatives"],
        "is_critical": bool(q.get("is_critical", False)),
        "integrity_hash": _integrity_hash_for_kit(q["text"], q["alternatives"])
    } for q in questions]
    recovery_kit = {
        "config": {
            "real_threshold": r_thr, "pad_size": pad_size,
            "argon2_params": {"time_cost": arg_time, "memory_cost": arg_mem, "parallelism": arg_par},
            "version": KIT_VERSION, "secrets_count": 1 + len(decoy_b64_list),
            "auth_catalog": auth_catalog
        },
        "questions": questions_out,
        "encrypted_shares": encrypted_shares
    }
    SAVE_DIR.mkdir(parents=True, exist_ok=True)
    default_name = f"recovery_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    base_name = input(f"Enter a base name for the save files (or press Enter for '{default_name}'): ").strip()
    if not base_name:
        base_name = default_name
    json_file = SAVE_DIR / f"{base_name}.json"
    txt_file = SAVE_DIR / f"{base_name}.txt"
    with open(json_file, "w", encoding="utf-8") as jf:
        json.dump(recovery_kit, jf, indent=2)
    with open(txt_file, "w", encoding="utf-8") as tf:
        tf.write("--- CRYPTOGRAPHIC CONFIGURATION ---\n")
        tf.write("Secret: [encrypted via SSS; not stored in JSON]\n")
        tf.write(f"Shamir Threshold (real path): {r_thr}\n")
        tf.write(f"Pad Size: {pad_size}\n")
        tf.write("Argon2id Parameters:\n")
        tf.write(f" - Time Cost: {arg_time}\n")
        tf.write(f" - Memory Cost: {arg_mem} KiB\n")
        tf.write(f" - Parallelism: {arg_par}\n")
        tf.write(f"\nAuth Catalog Entries (real+decoys, shuffled): {len(auth_catalog)}\n")
        tf.write("\n--- SECURITY QUESTIONS ---\n\n")
        for q in questions:
            qtype = "CRITICAL" if q.get("is_critical") else "STANDARD"
            tf.write(f"[Question {q['id']}] {q['text']} (Type: {qtype})\n\n")
            for i, alt in enumerate(q['alternatives'], 1):
                letter = chr(ord('A') + i - 1)
                tf.write(f"{letter}) {alt}\n")
            tf.write("\n---\n\n")
    print(f"\n✓ Configuration saved successfully!")
    print(f"JSON file: {json_file}")
    print(f"Text file: {txt_file}")
    log_debug("Recovery kit saved (passwordless; with auth catalog; decoy-enabled).", level="INFO")
# ---------- Recovery UI Flow from a saved kit (real + decoys, indistinguishable) ----------
def _try_combine_with_sampling(partials: list[bytes], r_thr: int) -> bytes | None:
    """
    Try to combine using multiple T-subsets:
      - Exhaustive if small (<= 5000 combinations)
      - Otherwise sample up to 200 random unique T-subsets
    Returns combined bytes on success, or None.
    """
    n = len(partials)
    if n < r_thr:
        return None
    if n == r_thr:
        try:
            return asyncio.run(sss_combine(partials))
        except Exception:
            return None
    max_exhaustive = 5000
    total_combos = math.comb(n, r_thr) if hasattr(math, "comb") else float("inf")
    if total_combos <= max_exhaustive:
        for idxs in combinations(range(n), r_thr):
            try:
                return asyncio.run(sss_combine([partials[i] for i in idxs]))
            except Exception:
                continue
        return None
    def sample_indices(nv: int, kv: int) -> tuple[int, ...]:
        s = set()
        while len(s) < kv:
            s.add(secrets.randbelow(nv))
        return tuple(sorted(s))
    seen = set()
    for _ in range(200):
        idxs = sample_indices(n, r_thr)
        if idxs in seen:
            continue
        seen.add(idxs)
        try:
            return asyncio.run(sss_combine([partials[i] for i in idxs]))
        except Exception:
            continue
    return None
def run_recovery_kit_flow(kit: dict, kit_path: Path):
    """
    FIXED (E2, E7): Use the loaded kit to reconstruct the secret, with proper UI
    and without oracle leakage.
    """
    try:
        cfg = kit.get("config") or {}
        questions = kit.get("questions") or []
        enc_shares = kit.get("encrypted_shares") or {}
        r_thr = int(cfg.get("real_threshold"))
        arg = cfg.get("argon2_params") or {}
        arg_time = int(arg.get("time_cost"))
        arg_mem = int(arg.get("memory_cost"))
        arg_par = int(arg.get("parallelism"))
        secrets_count = int(cfg.get("secrets_count", 1))
        auth_catalog = list(cfg.get("auth_catalog", []))
    except Exception as e:
        log_exception(e, "Invalid kit structure.")
        print("ERROR: Kit structure invalid or missing fields.")
        return
    print("\n--- LOADED RECOVERY KIT ---\n")
    print(f"File : {kit_path.name}")
    print(f"Threshold (T) : {r_thr} [real path]")
    print(f"Pad Size : {cfg.get('pad_size')}")
    print("Argon2id Params:")
    print(f" - Time Cost : {arg_time}")
    print(f" - Memory Cost: {arg_mem} KiB")
    print(f" - Parallelism: {arg_par}")
    print(f"Auth Catalog : {len(auth_catalog)} entries\n")
    log_debug("Loaded recovery kit.",
              level="INFO", component="CRYPTO",
              details={"kit_file": str(kit_path), "threshold": r_thr, "pad_size": cfg.get("pad_size"),
                       "argon2": {"time_cost": arg_time, "memory_cost": arg_mem, "parallelism": arg_par},
                       "q_count": len(questions), "secrets_count": secrets_count})
    if not questions or not enc_shares:
        print("ERROR: Kit missing questions or encrypted_shares.")
        log_error("Kit missing essential arrays.", details={"has_questions": bool(questions), "has_enc_shares": bool(enc_shares)})
        return
    # FIX (E2): Present questions via multi-select
    print("--- Answer the security questions ---\n")
    chosen = []
    for i, q in enumerate(questions, 1):
        text = q.get("text", "")
        alts = list(q.get("alternatives", []))
        picks = curses.wrapper(
            lambda st: arrow_select_no_toggle(st, i, text, alts, pre_selected=None)
        )
        chosen.append({"q": q, "picks": picks})
        log_debug("Recovery UI picks for question.", level="INFO", component="GENERAL",
                  details={"q_id": q.get("id"), "q_text": text, "picked": picks})
    partials_s0: list[bytes] = []
    selected_pairs: list[tuple[str, str, str, str]] = [] # (q_hash, a_hash, q_text, alt_text)
    for item in chosen:
        qobj = item["q"]
        picks = item["picks"]
        q_text = qobj.get("text", "")
        alts = qobj.get("alternatives", [])
        q_hash = qobj.get("integrity_hash") or _integrity_hash_for_kit(q_text, alts)
        q_block = enc_shares.get(q_hash)
        if not q_block:
            log_error("Missing encrypted_shares block for question hash.", details={"q_hash": q_hash})
            continue
        for alt in picks:
            alt_hash = _alt_hash_for_kit(alt)
            sblock = q_block.get(alt_hash) or {}
            entry = sblock.get("s0")
            if not entry:
                log_error("No encrypted entry for selected alternative (s0).", details={"q_hash": q_hash, "alt_hash": alt_hash, "alt_text": alt})
                continue
            selected_pairs.append((q_hash, alt_hash, q_text, alt))
            share_bytes = _decrypt_share_from_entry(entry, arg_time, arg_mem, arg_par,
                                                    q_hash=q_hash, alt_hash=alt_hash,
                                                    qid=qobj.get("id"), qtext=q_text, alt_text=alt)
            if share_bytes is not None:
                partials_s0.append(share_bytes)
    combined_bytes = _try_combine_with_sampling(partials_s0, r_thr)
    secret_variant_used = "REAL"
    # FIX (E7): No oracle. If real fails, deterministically reconstruct a decoy.
    if combined_bytes is None:
        idx = _decoy_pick_index([(qh, ah) for (qh, ah, _, _) in selected_pairs], max(0, secrets_count - 1))
        decoy_index = max(1, idx)
        secret_variant_used = f"DECOY_{decoy_index}"
        log_debug(f"Real reconstruction failed or insufficient shares. Falling back to {secret_variant_used}.", level="INFO")
       
        decoy_partials: list[bytes] = []
        for (q_hash, a_hash, q_text, alt_text) in selected_pairs:
            block = enc_shares.get(q_hash, {}).get(a_hash, {})
            entry = block.get(f"s{decoy_index}")
            if not entry:
                continue
            sb = _decrypt_share_from_entry(entry, arg_time, arg_mem, arg_par,
                                           q_hash=q_hash, alt_hash=a_hash,
                                           qid=None, qtext=q_text, alt_text=alt_text)
            if sb is not None:
                decoy_partials.append(sb)
        # Decoy paths are designed to succeed, attempt combine with threshold 1
        combined_bytes = _try_combine_with_sampling(decoy_partials, 1)
    if combined_bytes is None:
        # This case should be rare if decoys are configured properly
        log_error("FATAL: Both real and decoy reconstruction failed. This may indicate a kit corruption.",
                  details={"variant_tried": secret_variant_used})
        print("\nAn unexpected error occurred during reconstruction. Unable to recover a secret.")
        return
    try:
        recovered_b64 = combined_bytes.decode("utf-8")
        final_secret_bytes = base64.b64decode(recovered_b64)
        matched = False
        for entry in auth_catalog:
            try:
                salt = base64.b64decode(entry.get("salt", ""))
                expected = base64.b64decode(entry.get("hmac_sha256", ""))
                k_auth = hkdf_sha256(ikm=final_secret_bytes, salt=salt, info=b"SECQ final-auth v3", dk_len=32)
                calc = hmac_sha256(k_auth, final_secret_bytes)
                if consttime_equal(calc, expected):
                    matched = True
                    break
            except Exception:
                continue
       
        final_secret_text = final_secret_bytes.decode("utf-8")
        print("\n[AUTH OK]" if matched else "\n[AUTH WARNING] (non-catalog secret)\n")
        print("--- SECRET RECONSTRUCTED ---")
        print(final_secret_text)
        print("-----------------------------\n")
        log_debug("Final secret reconstructed.", level="INFO", component="CRYPTO",
                  details={"final_secret_len": len(final_secret_text), "variant": secret_variant_used, "auth_ok": matched})
    except Exception as e:
        log_exception(e, "Final base64/utf-8 decode or auth failed.")
        print("\nShares combined, but final decode or authentication failed.\n")
    append_recovery_guide()
    log_debug("Recovery Mode complete.", level="INFO")
    print("Press 1 – Enter setup phase")
    print("Press 2 – Proceed to example demonstration")
# ---------- existing demonstration / combine path (kept; AAD added; ChaCha tag removed) ----------
def get_next_filename(base_dir, base_name, extension):
    idx = 0
    while True:
        idx += 1
        candidate = base_dir / (f"{base_name}.{extension}" if idx == 1 else f"{base_name}{idx}.{extension}")
        if not candidate.exists():
            return candidate
def check_required_files():
    needed_in_src = ["CipherForge.py", "example_questions25.json"]
    missing = []
    for f in needed_in_src:
        if not (SRC_DIR / f).exists():
            missing.append(f)
    modules_path = SRC_DIR / "modules"
    needed_in_modules = [
        "debug_utils.py", "input_utils.py", "log_processor.py", "security_utils.py",
        "split_utils.py", "sss_bridge.py", "ui_utils.py", "crypto_bridge.py"
    ]
    for f in needed_in_modules:
        if not (modules_path / f).exists():
            missing.append(f"modules/{f}")
    if missing:
        log_error("Missing required files", details={"missing": missing})
        print("ERROR - Missing files:", missing)
        sys.exit(1)
def prompt_argon2_parameters():
    print("\n--- Argon2id Parameter Setup ---")
    print("Use (n) normal defaults, (a) auto-calibrate, or (e) custom edit? [n/a/e] ", end="")
    choice_ = input().strip().lower()
    if choice_ == 'a':
        t, m_kib, p, ms = calibrate_argon2()
        print(f"Auto-calibrated: time_cost={t}, memory_cost={m_kib} KiB, parallelism={p} (~{ms:.1f} ms/guess)")
        return (t, m_kib, p)
    if choice_ != 'e':
        print("Using FAST Argon2id parameters: time_cost=1, memory_cost=16384, parallelism=8")
        input("Press ENTER to continue with these defaults...")
        return (1, 16384, 8)
    else:
        print("Enter custom Argon2id parameters:")
        tc = get_valid_int("time_cost (1..10)? ", 1, 10)
        mc = get_valid_int("memory_cost (8192..1048576)? ", 8192, 1048576)
        pl = get_valid_int("parallelism (1..32)? ", 1, 32)
        print(f"Using CUSTOM Argon2id parameters: time_cost={tc}, memory_cost={mc}, parallelism={pl}")
        return (tc, mc, pl)
def calc_qna_search_space(chosen):
    total = 1
    for q in chosen:
        n_alts = len(q["alternatives"])
        ways = (1 << n_alts) - 1 if n_alts > 0 else 1
        total *= max(1, ways)
    return total
def convert_seconds_to_dhms(seconds):
    out = {"years":0,"months":0,"days":0,"hours":0,"minutes":0,"seconds":0.0}
    if seconds <= 0: return out
    year_sec = 365.25*24*3600
    month_sec = 30.4375*24*3600
    day_sec = 24*3600
    hour_sec = 3600
    minute_sec = 60
    out["years"] = int(seconds // year_sec); seconds %= year_sec
    out["months"] = int(seconds // month_sec); seconds %= month_sec
    out["days"] = int(seconds // day_sec); seconds %= day_sec
    out["hours"] = int(seconds // hour_sec); seconds %= hour_sec
    out["minutes"] = int(seconds // minute_sec); seconds %= minute_sec
    out["seconds"] = seconds
    return out
def print_estimated_bruteforce_times(chosen, arg_time, arg_mem, arg_par,
                                     total_correct_lower: int | None = None,
                                     r_thr: int | None = None,
                                     decoy_present: bool = True):
    import math
    search_space = max(1, calc_qna_search_space(chosen))
    single_guess_ms = estimate_argon2_time_ms(arg_time, arg_mem, arg_par, samples=1)
    single_guess_ms_no_argon = 0.005
    total_classical_ms = search_space * single_guess_ms
    total_quantum_ms = math.sqrt(search_space) * single_guess_ms
    total_classical_ms_na = search_space * single_guess_ms_no_argon
    total_quantum_ms_na = math.sqrt(search_space) * single_guess_ms_no_argon
    trials_real_lb = None
    if total_correct_lower is not None and r_thr is not None and total_correct_lower >= r_thr:
        trials_real_lb = math.comb(total_correct_lower, r_thr)
    trials_decoy_min = 1 if decoy_present else None
    def _fmt_time(ms: float) -> dict:
        sec = ms / 1000.0
        return convert_seconds_to_dhms(sec)
    print("\n--- Estimated Brute-Force Difficulty ---")
    print(f"Total Q&A search space (non-empty subsets): {search_space:,.0f} guesses.")
    print("\n[WITH Argon2id] per-guess ~{:.3f} ms =>".format(single_guess_ms))
    cl = _fmt_time(total_classical_ms); qn = _fmt_time(total_quantum_ms)
    print(f" Classical total time : {cl['years']}y {cl['months']}m {cl['days']}d {cl['hours']}h {cl['minutes']}m {cl['seconds']:.2f}s")
    print(f" Quantum (Grover est.): {qn['years']}y {qn['months']}m {qn['days']}d {qn['hours']}h {qn['minutes']}m {qn['seconds']:.2f}s")
    print("\n[WITHOUT Argon2id] per-guess ~{:.3f} ms =>".format(single_guess_ms_no_argon))
    cl2 = _fmt_time(total_classical_ms_na); qn2 = _fmt_time(total_quantum_ms_na)
    print(f" Classical total time : {cl2['years']}y {cl2['months']}m {cl2['days']}d {cl2['hours']}h {cl2['minutes']}m {cl2['seconds']:.2f}s")
    print(f" Quantum (Grover est.): {qn2['years']}y {qn2['months']}m {qn2['days']}d {qn2['hours']}h {qn2['minutes']}m {qn2['seconds']:.2f}s")
    if trials_real_lb is not None:
        print(f"\nLower-bound trials to reach the REAL threshold: C(C_total={total_correct_lower}, T={r_thr}) = {trials_real_lb:,d}")
    if trials_decoy_min is not None:
        print(f"Minimal trials to reach *a decoy* (given at least one decoy has T=1): {trials_decoy_min}")
    print()
# ---------- Demo flow (unchanged UX; AAD added; ChaCha tag removed) ----------
def main():
    try:
        print("[INFO] Launching main.py...")
        log_debug("Starting demonstration flow (Option 2)...", level="INFO")
        if not QUESTIONS_PATH.exists():
            msg = f"Error: question file not found: {QUESTIONS_PATH}"
            log_error(msg)
            print(msg)
            return
        try:
            with open(QUESTIONS_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
            empty_correct = 0
            for qd in data:
                if validate_question(qd):
                    qd["correct_answers"] = [
                        sanitize_input(normalize_text(ans)) for ans in qd.get("correct_answers", [])
                    ]
                    qd["alternatives"] = [
                        sanitize_input(normalize_text(alt)) for alt in qd["alternatives"]]
                    if not qd["correct_answers"]:
                        empty_correct += 1
                        qd["correct_answers"] = qd["alternatives"][:]
                        log_debug(
                            f"Question '{qd['text']}' had empty 'correct_answers'. Now set them all as correct.",
                            level="INFO"
                        )
            valid_data = [q for q in data if validate_question(q)]
            if empty_correct > 0:
                print(f"NOTICE: {empty_correct} question(s) had empty 'correct_answers'. "
                      f"All alternatives for those are treated as correct.\n")
        except Exception as e:
            log_exception(e, "Error loading question file")
            return
        if not valid_data:
            print("No valid questions found. Aborting.")
            return
        amt = get_valid_int(f"How many questions? (1..{len(valid_data)}): ", 1, len(valid_data))
        with chosen_lock:
            chosen = valid_data[:amt]
        correct_cumulative = 0
        incorrect_cumulative = 0
        for i, qdict in enumerate(chosen, 1):
            picks, qtype = curses.wrapper(
                lambda s: arrow_select_clear_on_toggle(
                    s, i, qdict["text"], qdict["alternatives"],
                    pre_selected=qdict.get("user_answers"),
                    pre_qtype=1 if qdict.get("is_critical") else 0,
                    fixed_type=qdict.get("force_type")
                )
            )
            qdict["user_answers"] = picks
            qdict["is_critical"] = bool(qtype) if not qdict.get("force_type") \
                else (qdict["force_type"].upper() == "CRITICAL")
            c_local = 0
            i_local = 0
            cset_local = set(qdict.get("correct_answers", []))
            for alt_ in picks:
                if alt_ in cset_local:
                    c_local += 1
                else:
                    i_local += 1
            log_debug(
                f"Q{i}: text='{qdict['text']}' => user_picks={len(picks)} selected; local counts: correct={c_local}, incorrect={i_local}",
                level="DEBUG"
            )
            correct_cumulative += c_local
            incorrect_cumulative += i_local
            print(f"[FEEDBACK] After Q{i}: +{c_local} correct, +{i_local} incorrect.")
            print(f"Total so far => correct={correct_cumulative}, incorrect={incorrect_cumulative}\n")
        while True:
            done = editing_menu(chosen)
            if done:
                break
        correct_map = []
        incorrect_map = []
        for idx, q in enumerate(chosen, 1):
            cset = set(q.get("correct_answers", []))
            picks_ = q["user_answers"]
            local_c = 0
            local_i = 0
            for alt in picks_:
                if alt in cset:
                    correct_map.append((q, alt))
                    local_c += 1
                else:
                    incorrect_map.append((q, alt))
                    local_i += 1
            log_debug(f"After re-edit Q{idx}: c={local_c}, i={local_i}", level="INFO")
        c_count = len(correct_map)
        i_count = len(incorrect_map)
        log_debug(f"FINAL TALLY => c_count={c_count}, i_count={i_count}", level="INFO")
        print(f"\nOverall Tally => Correct picks={c_count}, Incorrect={i_count}.\n")
        while True:
            if c_count < 10:
                if c_count == 0:
                    print("Zero correct picks => cannot proceed with Shamir's Secret Sharing.")
                    print("(E => re-edit answers, N => abort)")
                    answer = input("Choice (E/N)? ").strip().upper()
                    if answer == 'E':
                        editing_menu(chosen)
                        correct_map.clear(); incorrect_map.clear()
                        for q_ in chosen:
                            cset_ = set(q_.get("correct_answers", []))
                            picks_ = q_["user_answers"]
                            for alt_ in picks_:
                                (correct_map if alt_ in cset_ else incorrect_map).append((q_, alt_))
                        c_count = len(correct_map); i_count = len(incorrect_map)
                        print(f"\nNEW Tally => Correct picks={c_count}, Incorrect={i_count}.\n")
                        continue
                    elif answer == 'N':
                        if input("Are you sure you want to abort? (y/n): ").strip().lower().startswith('y'):
                            print("Aborting."); return
                        else:
                            continue
                    else:
                        print("Invalid choice.\n"); continue
                else:
                    print("Fewer than 10 correct => re-edit or abort.")
                    answer = input("Choice (E/N)? ").strip().upper()
                    if answer == 'E':
                        editing_menu(chosen)
                        correct_map.clear(); incorrect_map.clear()
                        for q_ in chosen:
                            cset_ = set(q_.get("correct_answers", []))
                            picks_ = q_["user_answers"]
                            for alt_ in picks_:
                                (correct_map if alt_ in cset_ else incorrect_map).append((q_, alt_))
                        c_count = len(correct_map); i_count = len(incorrect_map)
                        print(f"\nNEW Tally => Correct picks={c_count}, Incorrect={i_count}.\n")
                        continue
                    elif answer == 'N':
                        if input("Are you sure you want to abort? (y/n): ").strip().lower().startswith('y'):
                            print("Aborting."); return
                        else:
                            continue
                    else:
                        print("Invalid choice.\n"); continue
            else:
                break
        prompt_text = "Real threshold"
        r_thr = get_threshold(prompt_text, 10, c_count)
        print(f"[INFO] Must pick >= {r_thr} correct picks to reconstruct real secret.\n")
        real_secret = get_nonempty_secret("Enter REAL secret: ")
        real_b64 = base64.b64encode(real_secret.encode()).decode()
        user_pad = prompt_pad_size_multi(len(real_b64))
        arg_time, arg_mem, arg_par = prompt_argon2_parameters()
        # Split real/dummy shares
        try:
            real_shares, dummy_shares = asyncio.run(
                split_secret_and_dummy(real_b64.encode(), c_count, i_count, r_thr, pad=user_pad)
            )
        except Exception as e:
            log_exception(e, "Error splitting secret")
            # FIX: Add a user-facing error message to prevent silent failure.
            print("\n[ERROR] A critical error occurred during the secret splitting process.")
            print("Please check the latest log file for detailed information.")
            return
        def ephemeral_encrypt(data: bytes, q_text: str, alt_text: str, alg_choice: str, alternatives: list[str]) -> dict:
            ephemeral_pass = base64.b64encode(random_bytes(12)).decode()
            ephemeral_salt = random_bytes(16)
            ephemeral_key, ephemeral_salt_used = derive_or_recover_key(
                ephemeral_pass, ephemeral_salt, ephemeral=True,
                time_cost=arg_time, memory_cost=arg_mem, parallelism=arg_par
            )
            q_hash = _integrity_hash_for_kit(q_text, alternatives)
            alt_hash = _alt_hash_for_kit(alt_text)
            aad = _aad_bytes(q_hash, alt_hash, alg_choice)
            if alg_choice == "chacha20poly1305":
                enc_obj = encrypt_chacha20poly1305(data, ephemeral_key, aad=aad,
                    ephemeral_pass=ephemeral_pass, ephemeral_salt=ephemeral_salt_used)
            else:
                enc_obj = encrypt_aes256gcm(data, ephemeral_key, aad=aad,
                    ephemeral_pass=ephemeral_pass, ephemeral_salt=ephemeral_salt_used)
            enc_obj["ephemeral_password"] = ephemeral_pass
            enc_obj["ephemeral_salt_b64"] = base64.b64encode(ephemeral_salt_used).decode()
            enc_obj["algorithm"] = alg_choice
            return enc_obj
        std_correct, crit_correct, std_incorrect, crit_incorrect = [], [], [], []
        for (q, alt) in correct_map: (crit_correct if q["is_critical"] else std_correct).append((q, alt))
        for (q, alt) in incorrect_map: (crit_incorrect if q["is_critical"] else std_incorrect).append((q, alt))
        share_idx_real, share_idx_dummy = 0, 0
       
        all_assignments = std_correct + crit_correct + std_incorrect + crit_incorrect
        for q_obj, alt_text in all_assignments:
            is_correct = (q_obj, alt_text) in correct_map
           
            if q_obj.setdefault("answer_shares", {}).get(alt_text): continue
           
            if is_correct:
                if share_idx_real >= len(real_shares): continue
                share_data = real_shares[share_idx_real]
                share_idx_real += 1
            else:
                if share_idx_dummy >= len(dummy_shares): continue
                share_data = dummy_shares[share_idx_dummy]
                share_idx_dummy += 1
            enc_full = ephemeral_encrypt(share_data, q_obj["text"], alt_text, secrets.choice(["chacha20poly1305", "aes256gcm"]), q_obj["alternatives"])
            q_obj["answer_shares"][alt_text] = {"enc_data": enc_full}
            for j in range(len(share_data)): share_data[j] = 0
        print("\n--- Final Answering Phase ---\n")
        for i, q in enumerate(chosen, 1):
            picks2 = curses.wrapper(
                lambda st: arrow_select_no_toggle(st, i, q["text"], q["alternatives"], pre_selected=q.get("correct_answers"))
            )
            q["user_answers"] = picks2
        while True:
            result = final_edit_menu(chosen)
            if result == 'G':
                log_debug("User finalize => combine secrets now.", level="INFO")
                break
            elif result == 'N':
                print("Aborted before final reconstruction. Exiting.")
                return
        partials = []
        for q in chosen:
            if "user_answers" not in q or "answer_shares" not in q: continue
            q_hash = _integrity_hash_for_kit(q["text"], q["alternatives"])
            for alt in q["user_answers"]:
                share_info = q["answer_shares"].get(alt)
                if not share_info: continue
                enc_data = share_info["enc_data"]
                ephemeral_pass = enc_data.get("ephemeral_password")
                ephemeral_salt_b64 = enc_data.get("ephemeral_salt_b64")
                if not ephemeral_pass or not ephemeral_salt_b64:
                    log_error("Missing ephemeral credentials for a selected answer.")
                    continue
                try:
                    ephemeral_salt = base64.b64decode(ephemeral_salt_b64)
                except Exception as e:
                    log_error(f"Base64 decode error for salt: {e}")
                    continue
                ephemeral_key, _ = derive_or_recover_key(
                    ephemeral_pass, ephemeral_salt, ephemeral=True,
                    time_cost=arg_time, memory_cost=arg_mem, parallelism=arg_par
                )
                try:
                    alg = enc_data.get("algorithm")
                    aad = _aad_bytes(q_hash, _alt_hash_for_kit(alt), alg)
                    dec_pt = decrypt_chacha20poly1305(enc_data, ephemeral_key, aad=aad) if alg == "chacha20poly1305" else decrypt_aes256gcm(enc_data, ephemeral_key, aad=aad)
                    log_debug("Demo path decrypted share.", level="INFO", component="CRYPTO",
                              details={"share_sha3_256_hex": hash_share(dec_pt), "algorithm": alg})
                    partials.append(dec_pt)
                except Exception as e:
                    log_error("Decryption failed for a selected answer.", exc=e)
        if len(partials) < r_thr:
            print(f"\nNot enough shares to reconstruct. Got={len(partials)}, need={r_thr}")
            print("Press 1 – Enter setup phase")
            print("Press 2 – Proceed to example demonstration")
            return
        try:
            combined_bytes = _try_combine_with_sampling(partials, r_thr)
            if combined_bytes is None:
                raise RuntimeError("No T-subset succeeded")
            reconstructed_real_b64 = combined_bytes.decode('utf-8')
            log_debug("Demo combine succeeded.", level="INFO", component="CRYPTO",
                      details={"combined_len": len(combined_bytes)})
        except Exception as e:
            log_exception(e, "SSS Combine failed during final reconstruction")
            reconstructed_real_b64 = None
        print("\n--- FINAL RECONSTRUCTION RESULTS ---\n")
        if reconstructed_real_b64:
            try:
                final_secret_text = base64.b64decode(reconstructed_real_b64).decode('utf-8')
                print(f"REAL SECRET recovered: {final_secret_text}\n")
                log_debug("Demo final base64 decode OK.", level="INFO", component="CRYPTO",
                           details={"final_secret_len": len(final_secret_text)})
            except Exception as e:
                log_exception(e, "Failed to decode base64 or utf-8 from combined secret.")
                print("Secret combined, but failed final decode.\n")
        else:
            print("Secret not recoverable.\n")
        append_recovery_guide()
        log_debug("Done with main program.", level="INFO")
        print_estimated_bruteforce_times(
            chosen, arg_time, arg_mem, arg_par,
            total_correct_lower=sum(len(q.get("correct_answers", [])) for q in chosen),
            r_thr=r_thr, decoy_present=True
        )
        print("Press 1 – Enter setup phase")
        print("Press 2 – Proceed to example demonstration")
    except curses.error as e:
        log_exception(e, "Curses error in main()")
        print(f"A Curses error occurred: {e}. Your terminal might not be fully compatible or window too small.")
        print("Please try again with a different terminal or ensure it's large enough.")
    except Exception as exc_main:
        log_exception(exc_main, "Fatal error in main()")
        print(f"FATAL ERROR: {exc_main}")
        sys.exit(1)
if __name__ == "__main__":
    ensure_debug_dir()
    check_required_files()
    show_start_menu()
    main()

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\main.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\__init__.py
# HASH: 7428348539442d66470512193a75a784884655ad8a65b5c40ac2393a600ad68a
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

"""
FILENAME:
"__init__.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

__all__ = [
    "debug_utils",
    "input_utils",
    "log_processor",
    "security_utils",
    "split_utils",
    "sss_bridge", # Use the new SSS bridge
    "ui_utils"
]


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\__init__.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\crypto_bridge.py
# HASH: f4e97bc05f08a5263daf23507a1579da34b599b02952a4186137ea762011416e
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

#!/usr/bin/env python3
# src/modules/crypto_bridge.py
# General-purpose Noble bridge (stdio JSON). Safe, minimal surface.

from __future__ import annotations
import base64, json, subprocess, os
from typing import Optional
from pathlib import Path

# Compute paths relative to this module
MODULE_DIR = Path(__file__).resolve().parent
SRC_DIR = MODULE_DIR.parent
ROOT_DIR = SRC_DIR.parent
BRIDGE_JS = ROOT_DIR / "bridge" / "crypto-bridge.js"

NODE_PATH = os.getenv("NODE_BIN", "node")

def _b64u(data: bytes) -> str:
    # RFC 4648 “URL and Filename Safe” alphabet; we strip '=' padding
    return base64.urlsafe_b64encode(data).rstrip(b"=").decode("ascii")

def _unb64u(s: str) -> bytes:
    # Add required '=' padding safely before decoding
    s = s.strip()
    pad = "=" * (-len(s) % 4)
    return base64.urlsafe_b64decode(s + pad)

def _call(req: dict) -> dict:
    if not BRIDGE_JS.exists():
        raise FileNotFoundError(f"Bridge script not found at {BRIDGE_JS}")

    # Send JSON as base64url to Node
    raw_in = _b64u(json.dumps(req).encode("utf-8")).encode("ascii")
    p = subprocess.run(
        [NODE_PATH, str(BRIDGE_JS)],
        input=raw_in,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        check=False,
    )
    if p.returncode != 0:
        raise RuntimeError(f"node exited {p.returncode}: {p.stderr.decode('utf-8', 'ignore')}")

    if not p.stdout:
        raise RuntimeError("bridge returned empty stdout")

    try:
        # Node returns base64url(JSON). Decode with padding tolerance.
        out_b64u = p.stdout.decode("ascii", "strict").strip()
        resp = json.loads(_unb64u(out_b64u).decode("utf-8"))
    except Exception as e:
        raise RuntimeError(f"invalid bridge response: {e}")

    if not resp.get("ok"):
        raise RuntimeError(f"bridge error: {resp.get('error')}")
    return resp

# ==== Public API ====

def argon2id(password: bytes, salt: bytes, m_cost: int, t: int, p: int, dk_len: int) -> bytes:
    resp = _call({
        "op": "argon2id",
        "password_b64": _b64u(password),
        "salt_b64": _b64u(salt),
        "mCost": int(m_cost), "t": int(t), "p": int(p), "dkLen": int(dk_len),
    })
    return _unb64u(resp["key_b64"])

def hkdf_sha256(ikm: bytes, salt: bytes, info: bytes, dk_len: int) -> bytes:
    resp = _call({
        "op": "hkdf_sha256",
        "ikm_b64": _b64u(ikm), "salt_b64": _b64u(salt), "info_b64": _b64u(info),
        "dkLen": int(dk_len),
    })
    return _unb64u(resp["key_b64"])

def hmac_sha256(key: bytes, data: bytes) -> bytes:
    resp = _call({"op": "hmac_sha256", "key_b64": _b64u(key), "data_b64": _b64u(data)})
    return _unb64u(resp["tag_b64"])

def sha3_256(data: bytes) -> bytes:
    resp = _call({"op": "sha3_256", "data_b64": _b64u(data)})
    return _unb64u(resp["hash_b64"])

def aes_gcm_encrypt(key: bytes, nonce12: bytes, pt: bytes, aad: Optional[bytes]=None) -> bytes:
    if len(nonce12) != 12:
        raise ValueError("AES-GCM requires 12-byte nonce")
    req = {"op": "aes_gcm_encrypt", "key_b64": _b64u(key), "nonce_b64": _b64u(nonce12), "pt_b64": _b64u(pt)}
    if aad is not None:
        req["aad_b64"] = _b64u(aad)
    resp = _call(req)
    return _unb64u(resp["ct_b64"])

def aes_gcm_decrypt(key: bytes, nonce12: bytes, ct: bytes, aad: Optional[bytes]=None) -> bytes:
    if len(nonce12) != 12:
        raise ValueError("AES-GCM requires 12-byte nonce")
    req = {"op": "aes_gcm_decrypt", "key_b64": _b64u(key), "nonce_b64": _b64u(nonce12), "ct_b64": _b64u(ct)}
    if aad is not None:
        req["aad_b64"] = _b64u(aad)
    resp = _call(req)
    return _unb64u(resp["pt_b64"])

def chacha20poly1305_encrypt(key: bytes, nonce12: bytes, pt: bytes, aad: Optional[bytes]=None) -> bytes:
    if len(nonce12) != 12:
        raise ValueError("ChaCha20-Poly1305 requires 12-byte nonce")
    req = {"op": "chacha20poly1305_encrypt", "key_b64": _b64u(key), "nonce_b64": _b64u(nonce12), "pt_b64": _b64u(pt)}
    if aad is not None:
        req["aad_b64"] = _b64u(aad)
    resp = _call(req)
    return _unb64u(resp["ct_b64"])

def chacha20poly1305_decrypt(key: bytes, nonce12: bytes, ct: bytes, aad: Optional[bytes]=None) -> bytes:
    if len(nonce12) != 12:
        raise ValueError("ChaCha20-Poly1305 requires 12-byte nonce")
    req = {"op": "chacha20poly1305_decrypt", "key_b64": _b64u(key), "nonce_b64": _b64u(nonce12), "ct_b64": _b64u(ct)}
    if aad is not None:
        req["aad_b64"] = _b64u(aad)
    resp = _call(req)
    return _unb64u(resp["pt_b64"])

def xchacha20poly1305_encrypt(key: bytes, nonce24: bytes, pt: bytes, aad: Optional[bytes]=None) -> bytes:
    if len(nonce24) != 24:
        raise ValueError("XChaCha20-Poly1305 requires 24-byte nonce")
    req = {"op": "xchacha20poly1305_encrypt", "key_b64": _b64u(key), "nonce_b64": _b64u(nonce24), "pt_b64": _b64u(pt)}
    if aad is not None:
        req["aad_b64"] = _b64u(aad)
    resp = _call(req)
    return _unb64u(resp["ct_b64"])

def xchacha20poly1305_decrypt(key: bytes, nonce24: bytes, ct: bytes, aad: Optional[bytes]=None) -> bytes:
    if len(nonce24) != 24:
        raise ValueError("XChaCha20-Poly1305 requires 24-byte nonce")
    req = {"op": "xchacha20poly1305_decrypt", "key_b64": _b64u(key), "nonce_b64": _b64u(nonce24), "ct_b64": _b64u(ct)}
    if aad is not None:
        req["aad_b64"] = _b64u(aad)
    resp = _call(req)
    return _unb64u(resp["pt_b64"])

def random_bytes(n: int) -> bytes:
    resp = _call({"op": "random_bytes", "n": int(n)})
    return _unb64u(resp["bytes_b64"])

def consttime_equal(a: bytes, b: bytes) -> bool:
    resp = _call({"op": "consttime_equal", "a_b64": _b64u(a), "b_b64": _b64u(b)})
    return bool(resp["equal"])


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\crypto_bridge.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\debug_utils.py
# HASH: e25234896a686bad55e8d7faeb3e2cefce040f8b78c04fcbcaaa512877790dd3
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

#!/usr/bin/env python3
"""
FILENAME:
"debug_utils.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

import os
import json
import uuid
import inspect
import threading
import shutil
import time
import traceback
from datetime import datetime
from pathlib import Path

BASE_DIR = Path(__file__).parent.parent.resolve()
DEBUG_COLLECTION_DIR = BASE_DIR / "logs" / "debug_logs"
DEBUG_COLLECTION_DIR.mkdir(parents=True, exist_ok=True)

RUN_ID = str(uuid.uuid4())

VERBOSITY_LEVELS = {
    "DEBUG": 10,
    "INFO": 20,
    "WARNING": 30,
    "ERROR": 40,
    "CRITICAL": 50
}
LOG_VERBOSITY = os.environ.get("LOG_VERBOSITY", "DEBUG").upper()
CURRENT_VERBOSITY = VERBOSITY_LEVELS.get(LOG_VERBOSITY, 10)

DEBUG_FILE_JSON = None
DEBUG_FILE_TXT = None
log_lock = threading.Lock()


def get_next_log_counter() -> int:
    """
    Find next incremental integer for debug file naming.
    """
    counter = 1
    for file in DEBUG_COLLECTION_DIR.iterdir():
        if file.is_file() and file.name.startswith("debug_info") and file.name.endswith(".json"):
            try:
                cor = file.name.replace("debug_info", "").replace(".json", "")
                num_part = cor.split("_", maxsplit=1)[0]
                n = int(num_part)
                if n >= counter:
                    counter = n + 1
            except:
                pass
    return counter


def get_timestamp() -> str:
    return datetime.now().strftime("%Y-%m-%d_%H-%M-%S")


def archive_all_existing_logs():
    """
    Move all existing debug_info .json and .txt logs from debug_logs/ into debug_logs/archive/.
    """
    arch = DEBUG_COLLECTION_DIR / "archive"
    arch.mkdir(exist_ok=True)
    
    for f in DEBUG_COLLECTION_DIR.iterdir():
        if f.is_file() and f.name.startswith("debug_info") and f.suffix in [".json", ".txt"]:
            # Move everything into archive
            shutil.move(str(f), str(arch / f.name))


def ensure_debug_dir():
    """
    On each program start:
      1) Move all existing .json/.txt logs to `archive/`
      2) Create brand-new JSON/TXT debug log files for this run
    """
    global DEBUG_FILE_JSON, DEBUG_FILE_TXT

    # 1) Archive *all* existing logs so only new logs remain
    archive_all_existing_logs()

    # 2) Prepare brand-new log files for this run
    c = get_next_log_counter()
    ts = get_timestamp()
    DEBUG_FILE_JSON = DEBUG_COLLECTION_DIR / f"debug_info{c}_{ts}.json"
    DEBUG_FILE_TXT  = DEBUG_COLLECTION_DIR / f"debug_info{c}_{ts}.txt"

    # Write initial record
    start_entry = {
        "timestamp": datetime.now().isoformat(),
        "run_id": RUN_ID,
        "component": "SYSTEM",
        "level": "INFO",
        "message": "Start new run",
        "details": {"event": "Run Initialization"}
    }
    with log_lock:
        with open(DEBUG_FILE_JSON, "a", encoding="utf-8") as jf, open(DEBUG_FILE_TXT, "a", encoding="utf-8") as tf:
            jf.write(json.dumps(start_entry, indent=2) + "\n")
            tf.write(f"[{start_entry['timestamp']}] [INFO] [SYSTEM] Start new run (run_id={RUN_ID})\n")

    print(f"[DEBUG] Logging to JSON: {DEBUG_FILE_JSON}")
    print(f"[DEBUG] Logging to TXT : {DEBUG_FILE_TXT}")


def _write_log_json(entry: dict):
    with open(DEBUG_FILE_JSON, "a", encoding="utf-8") as jf:
        jf.write(json.dumps(entry, indent=2) + "\n")


def _write_log_txt(entry: dict):
    timestamp = entry.get("timestamp", "N/A")
    lvl = entry.get("level", "N/A")
    comp = entry.get("component", "N/A")
    caller = entry.get("caller", {})
    file_ = caller.get("file", "?")
    func_ = caller.get("function", "?")
    line_ = caller.get("line", "?")
    msg = entry.get("message", "")
    details = entry.get("details", {})
    ev = ""
    if "event" in details:
        ev = f" (event={details['event']})"
    line_txt = f"[{timestamp}] [{lvl}] [{comp}] {file_}:{func_}:{line_}{ev} - {msg}\n"

    with open(DEBUG_FILE_TXT, "a", encoding="utf-8") as tf:
        tf.write(line_txt)


def _do_log(level, component, msg, details=None):
    if details is None:
        details = {}
    nl = VERBOSITY_LEVELS.get(level.upper(), 10)
    if nl < CURRENT_VERBOSITY:
        return

    with log_lock:
        cf = inspect.currentframe().f_back
        entry = {
            "timestamp": datetime.now().isoformat(),
            "run_id": RUN_ID,
            "level": level.upper(),
            "component": component,
            "caller": {
                "file": os.path.basename(cf.f_code.co_filename),
                "function": cf.f_code.co_name,
                "line": cf.f_lineno
            },
            "message": msg,
            "details": details
        }
        _write_log_json(entry)
        _write_log_txt(entry)


def log_debug(msg: str, level="DEBUG", component="GENERAL", details=None):
    _do_log(level, component, msg, details)


def log_crypto_event(operation: str,
                     algorithm: str = None,
                     mode: str = None,
                     ephemeral_key: bytes = None,
                     argon_params: dict = None,
                     key_derived_bytes: bytes = None,
                     details: dict = None,
                     ephemeral: bool = False):
    if details is None:
        details = {}
    crypto_info = {
        "operation": operation,
        "algorithm": algorithm,
        "mode": mode,
        "ephemeral": ephemeral
    }
    if ephemeral_key is not None:
        import base64
        crypto_info["key_b64"] = base64.b64encode(ephemeral_key).decode()
    if key_derived_bytes is not None:
        import base64
        crypto_info["derived_key_b64"] = base64.b64encode(key_derived_bytes).decode()
    if argon_params:
        crypto_info["Argon2_Parameters"] = argon_params

    details["crypto_details"] = crypto_info
    _do_log("INFO", "CRYPTO", "Crypto operation", details)


def log_error(msg: str, exc: Exception = None, details=None):
    if details is None:
        details = {}
    if exc is not None:
        details["exception_type"] = type(exc).__name__
        details["exception_str"] = str(exc)
    _do_log("ERROR", "GENERAL", msg, details)


def log_exception(exc: Exception, msg: str = "Unhandled exception"):
    tb_str = traceback.format_exc()
    details = {
        "exception_type": type(exc).__name__,
        "exception_str": str(exc),
        "traceback": tb_str
    }
    _do_log("ERROR", "GENERAL", msg, details)


def start_timer() -> float:
    return time.perf_counter()


def end_timer(st: float) -> float:
    return (time.perf_counter() - st) * 1000.0


def append_recovery_guide():
    guide_lines = [
        "-------------------- MANUAL DECRYPTION GUIDE --------------------",
        "1. Identify correct standard & critical picks and gather ephemeral-encrypted partials.",
        "2. Decrypt each 95% chunk and 5% chunk (or single 100% chunk). Combine => full share.",
        "3. Provide enough real shares to sss_combine() => base64-decode final secret.",
        "-----------------------------------------------------------------"
    ]
    gjson = {"manual_decryption_guide": guide_lines}
    with log_lock:
        with open(DEBUG_FILE_JSON, "a", encoding="utf-8") as jf:
            jf.write(json.dumps(gjson, indent=2) + "\n")
        with open(DEBUG_FILE_TXT, "a", encoding="utf-8") as tf:
            for line in guide_lines:
                tf.write(line + "\n")


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\debug_utils.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\decoy_input.py
# HASH: 2fff870f11e370411eca41866ca51cbd4847c5bc9c93db23000563077c45b9b7
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

#!/usr/bin/env python3
# src/policy/decoy_input.py

from __future__ import annotations
from typing import List

def prompt_decoy_count() -> int:
    print("\nHow many decoy secrets do you want to configure? (1..1000)")
    while True:
        raw = input("Decoy count: ").strip()
        try:
            n = int(raw)
            if 1 <= n <= 1000:
                return n
        except Exception:
            pass
        print("Invalid. Enter an integer between 1 and 1000.")

def prompt_decoy_values(n: int) -> List[str]:
    decoys: List[str] = []
    seen_norm = set()
    print("\nEnter each decoy (must be non-blank and unique).")
    for i in range(1, n+1):
        while True:
            s = input(f"Decoy #{i}: ").strip()
            if not s:
                print("Decoy cannot be blank.")
                continue
            key = " ".join(s.split()).lower()
            if key in seen_norm:
                print("Duplicate decoy. Enter a unique value.")
                continue
            seen_norm.add(key)
            decoys.append(s)
            break
    return decoys


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\decoy_input.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\input_utils.py
# HASH: 53c189df30083574c4932d1e5a526f1d981867660fff16644fb065d3541cf410
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

################################################################################
# START OF FILE: "input_utils.py"
################################################################################

"""
FILENAME:
"input_utils.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

#!/usr/bin/env python3
"""
Handles user integer input & secret input with getpass.
Logs the integer input in plain to ensure everything needed is in logs.
"""

import getpass
from modules.debug_utils import log_debug
from modules.security_utils import sanitize_input  # NOTE: do not import normalize_text here


def get_valid_int(prompt, low, high):
    """
    Prompt user for an integer in [low..high], returning the validated int.
    """
    while True:
        print(prompt, end="", flush=True)
        val = input()
        try:
            num = int(val)
            if low <= num <= high:
                log_debug(f"User int input valid: {num}", level="INFO")
                return num
            else:
                print(f"Must be {low}..{high}")
        except:
            print("Invalid integer input.")


def get_nonempty_secret(prompt):
    """
    Prompt user for a non-empty secret (via getpass).
    SECURITY FIX: Do NOT normalize high-entropy secrets (no NFKC).
    Accept bytes-as-UTF-8 string verbatim (strip NULs only). Enforce policy length.
    """
    POLICY_MAX = 256  # keep existing policy limit (no transformation)
    while True:
        s = getpass.getpass(prompt)
        # Remove NULs only; preserve everything else (no normalize_text)
        s = sanitize_input(s)
        if s.strip():
            if len(s) > POLICY_MAX:
                s = s[:POLICY_MAX]
            return s
        print("Cannot be empty.")
        log_debug("Empty secret => re-prompt", level="WARNING")

################################################################################
# END OF FILE: "input_utils.py"
################################################################################


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\input_utils.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\log_processor.py
# HASH: 9bfec2e43b9daa5f74853808a0789c0e891cba324b38df5b8b0be9538731ed1c
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

################################################################################
# START OF FILE: "log_processor.py"
################################################################################

"""
FILENAME:
"log_processor.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

#!/usr/bin/env python3
"""
Tool to filter & display JSON logs from debug_logs.
Useful for forensic or debugging analysis.
"""

import argparse
import json
import sys
from pathlib import Path
from datetime import datetime

BASE_DIR = Path(__file__).parent.parent.resolve()
DEF_LOG_DIR = BASE_DIR / "logs" / "debug_logs"


def parse_args():
    ap = argparse.ArgumentParser("Forensic Log Processor")
    ap.add_argument("--log_dir", type=Path, default=DEF_LOG_DIR)
    ap.add_argument("--run_id", type=str)
    ap.add_argument("--component", type=str, help="e.g. CRYPTO, GENERAL, SYSTEM")
    ap.add_argument("--level", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])
    ap.add_argument("--start", type=str, help="Start time in ISO8601, e.g. 2025-03-08T17:00:00")
    ap.add_argument("--end", type=str, help="End time in ISO8601")
    ap.add_argument("--include_archive", action="store_true")
    ap.add_argument("--output", choices=["plain", "json"], default="plain")
    ap.add_argument("--crypto", action="store_true", help="Only show logs with component=CRYPTO")
    return ap.parse_args()


def load_log_file(fp: Path) -> list:
    entries = []
    try:
        with fp.open("r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                try:
                    rec = json.loads(line)
                    entries.append(rec)
                except:
                    entries.append({"raw_line": line})
    except Exception as e:
        print(f"Failed reading {fp}: {e}", file=sys.stderr)
    return entries


def load_logs(log_dir: Path, include_archive: bool) -> list:
    main = list(log_dir.glob("debug_info*.json"))
    arch = []
    if include_archive:
        ardir = log_dir / "archive"
        if ardir.is_dir():
            arch = list(ardir.glob("debug_info*.json"))
    allf = main + arch
    out = []
    for ff in allf:
        out.extend(load_log_file(ff))
    return out


def filter_entries(entries: list,
                   run_id=None,
                   component=None,
                   level=None,
                   start=None,
                   end=None,
                   crypto_only=False):
    lvlmap = {"DEBUG": 10, "INFO": 20, "WARNING": 30, "ERROR": 40, "CRITICAL": 50}
    minlvl = lvlmap.get(level.upper(), 0) if level else 0
    start_dt = None
    if start:
        try:
            start_dt = datetime.fromisoformat(start)
        except:
            pass
    end_dt = None
    if end:
        try:
            end_dt = datetime.fromisoformat(end)
        except:
            pass

    ret = []
    for e in entries:
        if "timestamp" not in e:
            continue
        if run_id and e.get("run_id") != run_id:
            continue
        c = e.get("component", "")
        if crypto_only:
            if c != "CRYPTO":
                continue
        else:
            if component and c.lower() != component.lower():
                continue
        lv_str = e.get("level", "DEBUG").upper()
        lv_val = lvlmap.get(lv_str, 10)
        if lv_val < minlvl:
            continue
        try:
            dt = datetime.fromisoformat(e["timestamp"])
        except:
            continue
        if start_dt and dt < start_dt:
            continue
        if end_dt and dt > end_dt:
            continue
        ret.append(e)
    return ret


def print_plain(entries: list):
    """
    Print logs in a human-readable plain format.
    """
    for e in entries:
        ts = e.get("timestamp", "N/A")
        rid = e.get("run_id", "N/A")
        lvl = e.get("level", "N/A")
        comp = e.get("component", "N/A")
        c = e.get("caller", {})
        f = c.get("file", "?")
        fu = c.get("function", "?")
        ln = c.get("line", "?")
        msg = e.get("message", "")
        det = e.get("details", {})

        line = f"[{ts}] [{lvl}] [run_id={rid}] [{comp}] {f}:{fu}:{ln} - {msg}"
        print(line)

        if "crypto_details" in det:
            print("  CRYPTO DETAILS =>")
            crypto = det["crypto_details"]
            for k, v in crypto.items():
                print(f"    {k}: {v}")

        other_details = {k: v for k, v in det.items() if k != "crypto_details"}
        if other_details:
            import json
            print("  details=", json.dumps(other_details, indent=2))

        print()


def main():
    args = parse_args()
    if not args.log_dir.exists():
        print(f"Error: log_dir not exist: {args.log_dir}", file=sys.stderr)
        sys.exit(1)

    entries = load_logs(args.log_dir, args.include_archive)
    flt = filter_entries(
        entries,
        run_id=args.run_id,
        component=args.component,
        level=args.level,
        start=args.start,
        end=args.end,
        crypto_only=args.crypto
    )

    if args.output == "json":
        print(json.dumps(flt, indent=2))
    else:
        print_plain(flt)


if __name__ == "__main__":
    main()

################################################################################
# END OF FILE: "log_processor.py"
################################################################################


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\log_processor.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\recovery_policy.py
# HASH: e4062100004aeaef5d1d064fa7cc17786152b1f5b62ec6ed8ef0027cbfbc7dd9
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

#!/usr/bin/env python3
# src/policy/recovery_policy.py

from __future__ import annotations
import base64, hashlib
from typing import List, Optional, Tuple

# Depend on existing crypto bridge for HKDF/HMAC if available; fall back to hashlib.
try:
    from modules.crypto_bridge import hkdf_sha256
    def _hkdf(ikm: bytes, salt: bytes, info: bytes, dk_len: int) -> bytes:
        return hkdf_sha256(ikm, salt, info, dk_len)
except Exception:
    def _hkdf(ikm: bytes, salt: bytes, info: bytes, dk_len: int) -> bytes:
        prk = hashlib.sha256(salt + ikm).digest()
        out = b""
        t = b""
        while len(out) < dk_len:
            t = hashlib.sha256(t + info + prk).digest()
            out += t
        return out[:dk_len]

def _b64_loose(s: str) -> Optional[bytes]:
    """Decode standard/url-safe Base64 with tolerant padding. Returns None if invalid."""
    txt = s.strip()
    pad = "=" * (-len(txt) % 4)
    for decoder in (base64.b64decode, base64.urlsafe_b64decode):
        try:
            return decoder(txt + pad)
        except Exception:
            continue
    return None

def _fingerprint_to_bytes(fp: str | bytes) -> bytes:
    if isinstance(fp, bytes):
        return fp
    return hashlib.sha3_256(fp.encode("utf-8")).digest()

def deterministic_decoy_index(fingerprint: bytes, decoy_count: int) -> int:
    # Use HKDF over the fingerprint so output is stable for the same inputs
    ok = max(1, int(decoy_count))
    key = _hkdf(ikm=fingerprint, salt=b"AC:decoy-salt", info=b"AC:decoy-index", dk_len=4)
    val = int.from_bytes(key, "big")
    return val % ok

def decide_output(
    reconstructed_b64: Optional[str],
    decoys: List[str],
    fingerprint: bytes
) -> Tuple[str, bool]:
    """
    Returns (text_to_emit, is_real). Never reveals failure; always returns plausible text.
    """
    # Try real first
    if reconstructed_b64:
        real_bytes = _b64_loose(reconstructed_b64)
        if real_bytes is not None:
            try:
                text = real_bytes.decode("utf-8")
                return text, True
            except UnicodeDecodeError:
                # Real exists but isn't UTF-8; still emit opaque base64
                return reconstructed_b64, True

    # Otherwise deterministic decoy; if none, emit pseudorandom-looking token
    if decoys:
        idx = deterministic_decoy_index(fingerprint, len(decoys))
        return decoys[idx], False

    # Pseudorandom fallback (no decoys present)
    token_b64 = base64.urlsafe_b64encode(_hkdf(fingerprint, b"AC:rand-salt", b"AC:rand", 24)).rstrip(b"=").decode("ascii")
    return token_b64, False


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\recovery_policy.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\security_utils.py
# HASH: f216d5f6b5429cb244da5f598bad2512ed38f119ab4e15d9134ccafd86d11408
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

################################################################################
# START OF FILE: "security_utils.py"
################################################################################

"""
FILENAME:
"security_utils.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

#!/usr/bin/env python3
"""
Basic text normalization, share hashing with SHA3-256, etc.
Now includes question/answer hashing for Q&A sets.
"""

import unicodedata
import hashlib


def normalize_text(t: str) -> str:
    """
    Normalize text to NFKC, limiting length to 256 chars.
    """
    return unicodedata.normalize('NFKC', t)[:256]


def sanitize_input(t: str) -> str:
    """
    Remove null chars from the input.
    """
    return ''.join(ch for ch in t if ch not in "\0")


def validate_question(q) -> bool:
    """
    Check if a question dict has 'text', 'alternatives', 'correct_answers'.
    """
    if not isinstance(q, dict):
        return False
    if "text" not in q or "alternatives" not in q:
        return False
    if not isinstance(q["text"], str):
        return False
    if not isinstance(q["alternatives"], list):
        return False
    if "correct_answers" not in q:
        q["correct_answers"] = []
    return True


def hash_share(data: bytes) -> str:
    """
    SHA3-256 hash (hex) of a share's byte data.
    """
    return hashlib.sha3_256(data).hexdigest()


def verify_share_hash(data: bytes, expected: str) -> bool:
    """
    Verify the share's data matches the expected SHA3-256 hex digest.
    """
    return hashlib.sha3_256(data).hexdigest() == expected


def hash_question_and_answers(qdict: dict) -> str:
    """
    Create a stable SHA3-256 hash from:
    - question text
    - sorted alternatives
    - sorted correct_answers
    """
    text = qdict["text"]
    alt_list = sorted(qdict["alternatives"])
    correct_list = sorted(qdict["correct_answers"])
    block = text + "\n" + "\n".join(alt_list) + "\n" + "|".join(correct_list)
    return hashlib.sha3_256(block.encode("utf-8")).hexdigest()

################################################################################
# END OF FILE: "security_utils.py"
################################################################################


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\security_utils.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\split_utils.py
# HASH: 3af4f6c6443dcadf0ae065d11914d87a87f3b6af80674833e4eac30061e9905b
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

################################################################################
# START OF FILE: "split_utils.py"
################################################################################

"""
FILENAME:
"split_utils.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

#!/usr/bin/env python3
"""
Splits the real secret into Shamir shares for correct picks,
and generates dummy shares for incorrect picks, using the sss_bridge module.

DEBUG ENHANCEMENT:
- Logs unmasked counts, threshold, share length, x-coordinates, and SHA3-256 of all shares (beta).

SECURITY FIX:
- Dummy shares are generated as valid SSS shares of a random fake secret,
  using the **same x-coordinate structure** (1..correct_count) to remove
  structural oracles. If more dummies are needed than one batch provides,
  we generate multiple batches and consume from them.
"""

import asyncio
import secrets
from modules.debug_utils import log_debug
from modules.sss_bridge import sss_split
from modules.security_utils import hash_share


async def split_secret_and_dummy(real: bytes,
                                 correct_count: int,
                                 incorrect_count: int,
                                 real_thr: int,
                                 pad: int = 128):
    """
    Splits 'real' into Shamir shares for correct_count picks, requiring real_thr to reconstruct.
    Also generates dummy_shares for incorrect_count picks as valid SSS shares of a fake secret,
    using the same x-coordinate pool (1..correct_count). Each share is padded to 'pad' length.
    """
    log_debug(f"Splitting real secret: correct_count={correct_count}, threshold={real_thr}, pad={pad}", level="INFO", component="CRYPTO")

    if correct_count <= 0:
        raise ValueError("correct_count must be > 0")

    real_shares = await sss_split(real, correct_count, real_thr, pad=pad)
    share_len = len(real_shares[0]) if real_shares else 0

    # Generate dummy shares in batches of 'correct_count' to mirror x-coord range 1..correct_count
    dummy_shares: list[bytearray] = []
    while len(dummy_shares) < incorrect_count:
        # fake secret size matches 'real' length to preserve structure
        fake_secret = secrets.token_bytes(len(real))
        # Use the same threshold profile to keep structure similar;
        # using min(real_thr, correct_count) is safe here.
        batch = await sss_split(fake_secret, correct_count, min(real_thr, correct_count), pad=pad)
        # consume as many as needed from this batch
        need = incorrect_count - len(dummy_shares)
        dummy_shares.extend(batch[:need])

    # Beta logging: unmasked hashes and x-coords for diagnosis
    try:
        xcoord_idx = share_len - 1 if share_len > 0 else 0
        real_xcoords = [int(s[xcoord_idx]) for s in real_shares] if real_shares else []
        dummy_xcoords = [int(s[xcoord_idx]) for s in dummy_shares] if dummy_shares else []
        real_hashes = [hash_share(bytes(s)) for s in real_shares]
        dummy_hashes = [hash_share(bytes(s)) for s in dummy_shares]
        log_debug(
            "SSS split summary (beta clear logging).",
            level="INFO",
            component="CRYPTO",
            details={
                "share_len": share_len,
                "pad": pad,
                "threshold": real_thr,
                "real_count": len(real_shares),
                "dummy_count": len(dummy_shares),
                "real_xcoords": real_xcoords,
                "dummy_xcoords": dummy_xcoords,
                "real_share_sha3_256": real_hashes,
                "dummy_share_sha3_256": dummy_hashes
            }
        )
    except Exception as e:
        log_debug(f"Non-fatal: failed to produce extended split logs: {e}", level="WARNING", component="CRYPTO")

    return real_shares, dummy_shares

################################################################################
# END OF FILE: "split_utils.py"
################################################################################


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\split_utils.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\sss_bridge.py
# HASH: 483b747c241a4fb26984ca0f77432d72bd215c01f7243106aef7ea7fb0b610fb
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

#!/usr/bin/env python3
# sss_bridge.py — async adapter that keeps your 2-byte length + pad semantics
# and delegates Shamir math to the audited Node CLI.
from __future__ import annotations
import asyncio, json, base64
from pathlib import Path
from typing import List

from modules.debug_utils import log_debug  # existing logger
from modules.security_utils import hash_share  # your helper (unchanged)

# ----- helpers copied from your SSS.py (same behavior) -----
def pack_len(n: int) -> bytes:
    return n.to_bytes(2, "big")

def unpack_len(b: bytes) -> int:
    return int.from_bytes(b, "big")

# Compute filesystem locations relative to this file for robustness
MODULE_DIR = Path(__file__).resolve().parent
SRC_DIR = MODULE_DIR.parent
ROOT_DIR = SRC_DIR.parent
# **UPDATED** to point to the .cjs file for CommonJS compatibility
BRIDGE_CJS = ROOT_DIR / "bridge" / "sss-bridge.cjs"

def _assert_bridge_exists() -> None:
    if not BRIDGE_CJS.exists():
        raise FileNotFoundError(
            f"Node bridge not found at '{BRIDGE_CJS}'. "
            "Expected layout: <repo_root>\\bridge\\sss-bridge.cjs"
        )

async def _node_call(payload: dict, timeout: float = 15.0) -> dict:
    """Invoke Node CLI with JSON over stdin/out."""
    _assert_bridge_exists()
    proc = await asyncio.create_subprocess_exec(
        "node",
        str(BRIDGE_CJS),
        stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    req = json.dumps(payload).encode("utf-8")
    out, err = await asyncio.wait_for(proc.communicate(input=req), timeout=timeout)

    # Node writes all responses on stdout; stderr indicates an unexpected failure.
    if err:
        try:
            log_debug(
                f"sss-bridge stderr: {err.decode(errors='ignore')}",
                level="WARNING",
                component="CRYPTO",
            )
        except Exception:
            pass

    try:
        resp = json.loads(out.decode("utf-8"))
    except Exception as e:
        raise RuntimeError(f"Invalid bridge response: {e}") from e

    if not resp.get("ok", False):
        raise RuntimeError(f"Bridge error: {resp.get('error','unknown')}")
    return resp

async def sss_split(secret: bytes, shares: int, threshold: int, pad: int = 128) -> List[bytearray]:
    """
    Preserve your semantics:
    - Prepend 2-byte big-endian length
    - Zero pad to 'pad' bytes
    - Call audited split; each share length = pad+1, last byte is x in [1..shares]
    """
    log_debug(
        "sss_split() via node-bridge",
        level="INFO",
        component="CRYPTO",
        details={"secret_len": len(secret), "shares": shares, "threshold": threshold, "pad": pad},
    )

    if shares < threshold:
        raise ValueError("shares < threshold in sss_split")
    if pad < len(secret):
        raise ValueError("pad must >= secret length")

    length_part = pack_len(len(secret))
    extra = pad - 2 - len(secret)
    if extra < 0:
        raise ValueError("pad too small unexpectedly")
    padded = length_part + secret + (b"\x00" * extra)

    resp = await _node_call(
        {
            "cmd": "split",
            "secret_b64": base64.b64encode(padded).decode(),
            "shares": shares,
            "threshold": threshold,
        }
    )

    out: List[bytearray] = []
    for b64 in resp["shares_b64"]:
        raw = base64.b64decode(b64)
        out.append(bytearray(raw))

    try:
        xcoords = [int(s[-1]) for s in out]
        sample_hashes = [hash_share(bytes(s)) for s in out[: min(3, len(out))]]
        log_debug(
            "sss_split() complete.",
            level="INFO",
            component="CRYPTO",
            details={"share_len": (pad + 1), "xcoords": xcoords, "sample_share_hashes": sample_hashes},
        )
    except Exception:
        # Logging should never break the crypto path
        pass

    return out

async def sss_combine(shares: List[bytes]) -> bytes:
    """
    Delegate combine to audited code; then strip 2-byte length and return real secret bytes.
    """
    log_debug(
        "sss_combine() via node-bridge",
        level="INFO",
        component="CRYPTO",
        details={"num_shares": len(shares), "share_len": (len(shares[0]) if shares else None)},
    )

    if not shares:
        raise ValueError("No shares passed to sss_combine")
    length = len(shares[0])
    if any(len(s) != length for s in shares):
        raise ValueError("Inconsistent share length")
    # x uniqueness & equal-length are rechecked by the audited library.

    resp = await _node_call(
        {
            "cmd": "combine",
            "shares_b64": [base64.b64encode(s).decode() for s in shares],
        }
    )

    padded = base64.b64decode(resp["secret_b64"])
    real_len = unpack_len(padded[:2])
    out_bytes = padded[2 : 2 + real_len] if real_len <= (len(padded) - 2) else bytes(padded)

    try:
        log_debug(
            "sss_combine() complete.",
            level="INFO",
            component="CRYPTO",
            details={"reconstructed_len": len(out_bytes), "reconstructed_sha3_256": hash_share(out_bytes)},
        )
    except Exception:
        pass

    return out_bytes

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\sss_bridge.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\ui_utils.py
# HASH: dfd18cb81e6f6a6c8672f2016a2986f30adcb1c8b04645e8db31d6176003a5b1
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

################################################################################
# START OF FILE: "ui_utils.py"
################################################################################

"""
FILENAME:
"ui_utils.py"

PERMANENT FILE DESCRIPTION – DO NOT REMOVE OR MODIFY
This multiline comment is strictly required and must NEVER be deleted or altered for ANY reason,
by any AI system, user, or process. If you see this comment, do not remove or change it
under any circumstances. Doing so is strictly prohibited and in direct violation of these terms.

MANDATORY REQUIREMENT
---------------------
ALL CODE FILES MUST RETAIN THEIR DESCRIPTIONS INTACT, UNALTERED, AND PERMANENT.

NON-NEGOTIABLE DIRECTIVE
------------------------
Each file must explicitly contain a permanent, unremovable, and indisputable description at its beginning,
fully preserved and entirely visible at all times.

ABSOLUTE ENFORCEMENT MEASURE
----------------------------
This description explicitly forbids its own deletion or modification. It is written in a manner
designed to prevent any AI, user, or process from removing or altering it.

IRONCLAD STRUCTURE
------------------
1. Formatted as a structured, multiline comment.
2. Clearly states it must never be deleted for any reason.
3. Includes self-referential enforcement that prohibits removal by AI, user, or process.

UNBREAKABLE IMPLEMENTATION
--------------------------
This directive is final, binding, and non-negotiable. Any violation or deviation is strictly forbidden.
"""

#!/usr/bin/env python3
"""
Implements arrow-based selection of answers & toggling question type,
plus editing menus to re-enter or single-edit.
"""

import curses
from modules.debug_utils import log_debug
from modules.security_utils import sanitize_input, normalize_text


def arrow_select_clear_on_toggle(stdscr, q_num, q_text, alts,
                                 pre_selected=None, pre_qtype=0, fixed_type=None):
    """
    Allows user to move with UP/DOWN, toggle selections with SPACE,
    optionally toggle question type (CRITICAL vs STANDARD) with 'T', unless fixed_type is set.
    If the user hits ENTER with no selection, show an error and wait.
    """
    curses.curs_set(0)
    q_text = sanitize_input(normalize_text(q_text))
    alts = [sanitize_input(normalize_text(a)) for a in alts]
    idx = 0
    chosen_mask = [False] * len(alts)
    toggle_allowed = (fixed_type is None)
    qtype = 1 if (fixed_type and fixed_type.upper() == "CRITICAL") else pre_qtype

    if pre_selected:
        for i, a in enumerate(alts):
            if a in pre_selected:
                chosen_mask[i] = True

    while True:
        stdscr.clear()
        stdscr.addstr(f"Q{q_num}. {q_text}\n\n")
        for i, alt in enumerate(alts):
            mark = "[X]" if chosen_mask[i] else "[ ]"
            arrow = "->" if i == idx else "  "
            stdscr.addstr(f"{arrow} {mark} {chr(65+i)}. {alt}\n")
        mode_str = "CRITICAL" if qtype == 1 else "STANDARD"
        if not toggle_allowed:
            mode_str += " (fixed)"
        stdscr.addstr(f"\nCurrent Type: {mode_str}\n")
        help_ = "UP/DOWN=move, SPACE=toggle"
        if toggle_allowed:
            help_ += ", T=switch type"
        help_ += ", ENTER=confirm.\n"
        stdscr.addstr(help_)

        key = stdscr.getch()
        if key == curses.KEY_UP and idx > 0:
            idx -= 1
        elif key == curses.KEY_DOWN and idx < len(alts) - 1:
            idx += 1
        elif key == ord(' '):
            chosen_mask[idx] = not chosen_mask[idx]
        elif toggle_allowed and key in [ord('t'), ord('T')]:
            # switching type resets selections
            chosen_mask = [False] * len(alts)
            qtype = 1 - qtype
        elif key == ord('\n'):
            if not any(chosen_mask):
                stdscr.addstr("\nError: Must select at least one.\n")
                stdscr.refresh()
                curses.napms(1500)
            else:
                break

    selected = [alts[i] for i, v in enumerate(chosen_mask) if v]
    mode_str = "CRITICAL" if qtype == 1 else "STANDARD"
    log_debug(f"Q{q_num} picks. Type={mode_str}", level="INFO")
    return selected, qtype


def arrow_select_no_toggle(stdscr, q_num, q_text, alts,
                           pre_selected=None):
    """
    Same arrow-based selection but no question-type toggle, for final phase.
    """
    curses.curs_set(0)
    q_text = sanitize_input(normalize_text(q_text))
    alts = [sanitize_input(normalize_text(a)) for a in alts]
    idx = 0
    chosen_mask = [False] * len(alts)
    if pre_selected:
        for i, a in enumerate(alts):
            if a in pre_selected:
                chosen_mask[i] = True

    while True:
        stdscr.clear()
        stdscr.addstr(f"Q{q_num}. {q_text}\n\n")
        for i, alt in enumerate(alts):
            mark = "[X]" if chosen_mask[i] else "[ ]"
            arrow = "->" if i == idx else "  "
            stdscr.addstr(f"{arrow} {mark} {chr(65+i)}. {alt}\n")
        stdscr.addstr("\nUP/DOWN=move, SPACE=toggle, ENTER=confirm.\n")

        key = stdscr.getch()
        if key == curses.KEY_UP and idx > 0:
            idx -= 1
        elif key == curses.KEY_DOWN and idx < len(alts) - 1:
            idx += 1
        elif key == ord(' '):
            chosen_mask[idx] = not chosen_mask[idx]
        elif key == ord('\n'):
            if not any(chosen_mask):
                stdscr.addstr("\nError: Must select at least one.\n")
                stdscr.refresh()
                curses.napms(1500)
            else:
                break

    selected = [alts[i] for i, v in enumerate(chosen_mask) if v]
    log_debug(f"Q{q_num} final picks", level="INFO")
    return selected


def editing_menu(chosen):
    """
    Command-based menu for re-entering or single-editing questions.
    """
    print("\n--- Editing Menu ---")
    print("Press 'E' to re-enter ALL answers.")
    print(f"Or type question #(1..{len(chosen)}) to edit a single. 'N' if done.\n")
    cmd = input("Choice: ").strip().upper()
    if cmd == 'N':
        return True
    if cmd == 'E':
        import curses
        for i, qdict in enumerate(chosen, 1):
            picks, qtype = curses.wrapper(
                lambda s: arrow_select_clear_on_toggle(
                    s, i, qdict["text"], qdict["alternatives"],
                    pre_selected=qdict.get("user_answers"),
                    pre_qtype=1 if qdict.get("is_critical") else 0,
                    fixed_type=qdict.get("force_type")
                )
            )
            qdict["user_answers"] = picks
            if qdict.get("force_type"):
                qdict["is_critical"] = (qdict["force_type"].upper() == "CRITICAL")
            else:
                qdict["is_critical"] = bool(qtype)
        return False
    try:
        num = int(cmd)
        if 1 <= num <= len(chosen):
            import curses
            qdict = chosen[num - 1]
            picks, qtype = curses.wrapper(
                lambda s: arrow_select_clear_on_toggle(
                    s, num, qdict["text"], qdict["alternatives"],
                    pre_selected=qdict.get("user_answers"),
                    pre_qtype=1 if qdict.get("is_critical") else 0,
                    fixed_type=qdict.get("force_type")
                )
            )
            qdict["user_answers"] = picks
            if qdict.get("force_type"):
                qdict["is_critical"] = (qdict["force_type"].upper() == "CRITICAL")
            else:
                qdict["is_critical"] = bool(qtype)
        else:
            print("Invalid question #.")
    except:
        print("Unrecognized cmd.")
    return False


def final_edit_menu(chosen):
    """
    Command-based menu for final pre-generation edits or abort.
    """
    print("\n--- Final Editing Menu ---")
    print("Press 'G' => generate secret. 'E' => re-enter ALL. or # => single. 'N'=>exit\n")
    cmd = input("Your choice: ").strip().upper()
    if cmd in ['G', 'N']:
        return cmd
    if cmd == 'E':
        import curses
        for i, qdict in enumerate(chosen, 1):
            picks, qtype = curses.wrapper(
                lambda s: arrow_select_clear_on_toggle(
                    s, i, qdict["text"], qdict["alternatives"],
                    pre_selected=qdict.get("user_answers"),
                    pre_qtype=1 if qdict.get("is_critical") else 0,
                    fixed_type=qdict.get("force_type")
                )
            )
            qdict["user_answers"] = picks
            if qdict.get("force_type"):
                qdict["is_critical"] = (qdict["force_type"].upper() == "CRITICAL")
            else:
                qdict["is_critical"] = bool(qtype)
        return None
    try:
        num = int(cmd)
        if 1 <= num <= len(chosen):
            import curses
            qdict = chosen[num - 1]
            picks, qtype = curses.wrapper(
                lambda s: arrow_select_clear_on_toggle(
                    s, num, qdict["text"], qdict["alternatives"],
                    pre_selected=qdict.get("user_answers"),
                    pre_qtype=1 if qdict.get("is_critical") else 0,
                    fixed_type=qdict.get("force_type")
                )
            )
            qdict["user_answers"] = picks
            if qdict.get("force_type"):
                qdict["is_critical"] = (qdict["force_type"].upper() == "CRITICAL")
            else:
                qdict["is_critical"] = bool(qtype)
        else:
            print("Invalid question #.")
    except:
        print("Unrecognized cmd.")
    return None

################################################################################
# END OF FILE: "ui_utils.py"
################################################################################


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\src\modules\ui_utils.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\__init__.py
# HASH: 4b2e5f1fd39aed99ffcacd8cdebfdaa91e96bcf90bdd8a9698489337b5f259a8
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import sys
from pathlib import Path

# --- Content for tests/__init__.py ---
INIT_PY_CONTENT = """
"""

# --- Content for tests/test_e2e_flow.py ---
E2E_FLOW_PY_CONTENT = """
import unittest, sys, json, tempfile
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app

class TestEndToEndFlow(unittest.TestCase):
    def setUp(self):
        self.temp_dir = tempfile.TemporaryDirectory()
        main_app.SAVE_DIR = Path(self.temp_dir.name)
        self.sample_questions = [{"id": 1, "text": "Q1", "alternatives": ["A", "B"], "correct_answers": ["A"]}, {"id": 2, "text": "Q2", "alternatives": ["C", "D"], "correct_answers": ["C"]}]
    def tearDown(self):
        self.temp_dir.cleanup()
    @patch('src.main.getpass.getpass')
    @patch('builtins.input')
    @patch('src.main.curses.wrapper')
    def test_e2e_recover_real_secret(self, mock_curses, mock_input, mock_getpass):
        mock_getpass.return_value = "real"
        mock_input.side_effect = ['1', "decoy", '2', '', 'n', 'test_kit']
        main_app.save_questions(self.sample_questions)
        p = next(main_app.SAVE_DIR.glob("*.json")); kit = json.loads(p.read_text())
        mock_curses.side_effect = [["A"], ["C"]]
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, p)
            self.assertIn("real", "".join(c.args[0] for c in mock_stdout.write.call_args_list))
"""

# --- Content for tests/test_failure_cases.py ---
FAILURE_CASES_PY_CONTENT = """
import unittest, sys
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app
from modules import crypto_bridge

class TestFailureCases(unittest.TestCase):
    def test_panic_tampered_ciphertext(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        ciphertext = bytearray(crypto_bridge.aes_gcm_encrypt(key, nonce, b"data", None))
        ciphertext[5] ^= 1
        with self.assertRaises(RuntimeError):
            crypto_bridge.aes_gcm_decrypt(key, nonce, bytes(ciphertext), None)
    @patch('src.main.curses.wrapper', return_value=[["A"]])
    def test_panic_kit_missing_key(self, mock_curses):
        kit = {"questions": [], "encrypted_shares": {}}
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, Path("dummy.json"))
            self.assertIn("ERROR: Kit structure invalid", mock_stdout.write.call_args_list[0].args[0])
"""

# --- Content for tests/test_integration_bridges.py ---
INTEGRATION_BRIDGES_PY_CONTENT = """
import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from modules import crypto_bridge, sss_bridge

class TestIntegrationBridges(unittest.IsolatedAsyncioTestCase):
    def test_crypto_sha3_256(self):
        result = crypto_bridge.sha3_256(b"hello world")
        self.assertEqual(result.hex(), "644bcc7e564373040999aac89e7622f3ca71fba1d972fd94a31c3bfbf24e3938")
    def test_crypto_aes_gcm_roundtrip(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        decrypted = crypto_bridge.aes_gcm_decrypt(key, nonce, crypto_bridge.aes_gcm_encrypt(key, nonce, b"test", None), None)
        self.assertEqual(b"test", decrypted)
    async def test_sss_roundtrip(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        self.assertEqual(b"secret", await sss_bridge.sss_combine(shares[:3]))
    async def test_sss_insufficient_shares_fails(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        with self.assertRaises(RuntimeError):
            await sss_bridge.sss_combine(shares[:2])
"""

# --- Content for tests/test_unit_helpers.py ---
UNIT_HELPERS_PY_CONTENT = """
import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from main import _policy_min_threshold, _aad_bytes, _decoy_pick_index
from modules.security_utils import normalize_text, sanitize_input

class TestUnitHelpers(unittest.TestCase):
    def test_policy_min_threshold(self):
        self.assertEqual(_policy_min_threshold(10), 8)
    def test_aad_bytes_format(self):
        self.assertEqual(_aad_bytes("q", "a", "alg", 3), b"q|a|alg|3")
    def test_normalize_text(self):
        self.assertEqual(normalize_text("ＨＥＬＬＯ"), "HELLO")
    def test_sanitize_input(self):
        self.assertEqual(sanitize_input("a\\0b"), "ab")
    def test_decoy_pick_index_is_deterministic(self):
        a = [("q1", "a1"), ("q2", "a2")]
        self.assertEqual(_decoy_pick_index(a, 5), _decoy_pick_index(a, 5))
"""

def create_test_files():
    """Creates the 'tests' directory and populates it with test files."""
    
    # Define the directory for the tests
    tests_dir = Path("tests")
    
    # A dictionary mapping filenames to their content
    files_to_create = {
        "__init__.py": INIT_PY_CONTENT,
        "test_e2e_flow.py": E2E_FLOW_PY_CONTENT,
        "test_failure_cases.py": FAILURE_CASES_PY_CONTENT,
        "test_integration_bridges.py": INTEGRATION_BRIDGES_PY_CONTENT,
        "test_unit_helpers.py": UNIT_HELPERS_PY_CONTENT
    }
    
    # Create the directory if it doesn't exist
    print(f"Checking/Creating directory: {tests_dir}...")
    tests_dir.mkdir(exist_ok=True)
    print("...Done.")
    
    # Loop through the dictionary and write each file
    for filename, content in files_to_create.items():
        file_path = tests_dir / filename
        print(f"Writing file: {file_path}...")
        # Use .strip() to remove leading/trailing whitespace from the content strings
        file_path.write_text(content.strip(), encoding="utf-8")
        print("...Done.")
        
    print("\nAll test files have been created successfully!")

if __name__ == "__main__":
    create_test_files()

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\__init__.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\aaa.py
# HASH: 4b2e5f1fd39aed99ffcacd8cdebfdaa91e96bcf90bdd8a9698489337b5f259a8
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import sys
from pathlib import Path

# --- Content for tests/__init__.py ---
INIT_PY_CONTENT = """
"""

# --- Content for tests/test_e2e_flow.py ---
E2E_FLOW_PY_CONTENT = """
import unittest, sys, json, tempfile
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app

class TestEndToEndFlow(unittest.TestCase):
    def setUp(self):
        self.temp_dir = tempfile.TemporaryDirectory()
        main_app.SAVE_DIR = Path(self.temp_dir.name)
        self.sample_questions = [{"id": 1, "text": "Q1", "alternatives": ["A", "B"], "correct_answers": ["A"]}, {"id": 2, "text": "Q2", "alternatives": ["C", "D"], "correct_answers": ["C"]}]
    def tearDown(self):
        self.temp_dir.cleanup()
    @patch('src.main.getpass.getpass')
    @patch('builtins.input')
    @patch('src.main.curses.wrapper')
    def test_e2e_recover_real_secret(self, mock_curses, mock_input, mock_getpass):
        mock_getpass.return_value = "real"
        mock_input.side_effect = ['1', "decoy", '2', '', 'n', 'test_kit']
        main_app.save_questions(self.sample_questions)
        p = next(main_app.SAVE_DIR.glob("*.json")); kit = json.loads(p.read_text())
        mock_curses.side_effect = [["A"], ["C"]]
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, p)
            self.assertIn("real", "".join(c.args[0] for c in mock_stdout.write.call_args_list))
"""

# --- Content for tests/test_failure_cases.py ---
FAILURE_CASES_PY_CONTENT = """
import unittest, sys
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app
from modules import crypto_bridge

class TestFailureCases(unittest.TestCase):
    def test_panic_tampered_ciphertext(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        ciphertext = bytearray(crypto_bridge.aes_gcm_encrypt(key, nonce, b"data", None))
        ciphertext[5] ^= 1
        with self.assertRaises(RuntimeError):
            crypto_bridge.aes_gcm_decrypt(key, nonce, bytes(ciphertext), None)
    @patch('src.main.curses.wrapper', return_value=[["A"]])
    def test_panic_kit_missing_key(self, mock_curses):
        kit = {"questions": [], "encrypted_shares": {}}
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, Path("dummy.json"))
            self.assertIn("ERROR: Kit structure invalid", mock_stdout.write.call_args_list[0].args[0])
"""

# --- Content for tests/test_integration_bridges.py ---
INTEGRATION_BRIDGES_PY_CONTENT = """
import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from modules import crypto_bridge, sss_bridge

class TestIntegrationBridges(unittest.IsolatedAsyncioTestCase):
    def test_crypto_sha3_256(self):
        result = crypto_bridge.sha3_256(b"hello world")
        self.assertEqual(result.hex(), "644bcc7e564373040999aac89e7622f3ca71fba1d972fd94a31c3bfbf24e3938")
    def test_crypto_aes_gcm_roundtrip(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        decrypted = crypto_bridge.aes_gcm_decrypt(key, nonce, crypto_bridge.aes_gcm_encrypt(key, nonce, b"test", None), None)
        self.assertEqual(b"test", decrypted)
    async def test_sss_roundtrip(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        self.assertEqual(b"secret", await sss_bridge.sss_combine(shares[:3]))
    async def test_sss_insufficient_shares_fails(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        with self.assertRaises(RuntimeError):
            await sss_bridge.sss_combine(shares[:2])
"""

# --- Content for tests/test_unit_helpers.py ---
UNIT_HELPERS_PY_CONTENT = """
import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from main import _policy_min_threshold, _aad_bytes, _decoy_pick_index
from modules.security_utils import normalize_text, sanitize_input

class TestUnitHelpers(unittest.TestCase):
    def test_policy_min_threshold(self):
        self.assertEqual(_policy_min_threshold(10), 8)
    def test_aad_bytes_format(self):
        self.assertEqual(_aad_bytes("q", "a", "alg", 3), b"q|a|alg|3")
    def test_normalize_text(self):
        self.assertEqual(normalize_text("ＨＥＬＬＯ"), "HELLO")
    def test_sanitize_input(self):
        self.assertEqual(sanitize_input("a\\0b"), "ab")
    def test_decoy_pick_index_is_deterministic(self):
        a = [("q1", "a1"), ("q2", "a2")]
        self.assertEqual(_decoy_pick_index(a, 5), _decoy_pick_index(a, 5))
"""

def create_test_files():
    """Creates the 'tests' directory and populates it with test files."""
    
    # Define the directory for the tests
    tests_dir = Path("tests")
    
    # A dictionary mapping filenames to their content
    files_to_create = {
        "__init__.py": INIT_PY_CONTENT,
        "test_e2e_flow.py": E2E_FLOW_PY_CONTENT,
        "test_failure_cases.py": FAILURE_CASES_PY_CONTENT,
        "test_integration_bridges.py": INTEGRATION_BRIDGES_PY_CONTENT,
        "test_unit_helpers.py": UNIT_HELPERS_PY_CONTENT
    }
    
    # Create the directory if it doesn't exist
    print(f"Checking/Creating directory: {tests_dir}...")
    tests_dir.mkdir(exist_ok=True)
    print("...Done.")
    
    # Loop through the dictionary and write each file
    for filename, content in files_to_create.items():
        file_path = tests_dir / filename
        print(f"Writing file: {file_path}...")
        # Use .strip() to remove leading/trailing whitespace from the content strings
        file_path.write_text(content.strip(), encoding="utf-8")
        print("...Done.")
        
    print("\nAll test files have been created successfully!")

if __name__ == "__main__":
    create_test_files()

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\aaa.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_crypto_bridge_padding.py
# HASH: 1ead03dc4a24a99f9dd3d21a2a4a0908896b66f375492840da42537aabbe88aa
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest, base64, json
from pathlib import Path
import sys

SRC = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC))

from modules.crypto_bridge import _unb64u  # type: ignore

class TestPadding(unittest.TestCase):
    def test_unb64u_restores_padding(self):
        data = {"ok": True, "hello": "world"}
        encoded = base64.urlsafe_b64encode(json.dumps(data).encode()).decode().rstrip("=")
        out = json.loads(_unb64u(encoded).decode())
        self.assertEqual(out["hello"], "world")

if __name__ == "__main__":
    unittest.main()


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_crypto_bridge_padding.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_decoy_input.py
# HASH: 1134c3a6aca5d2b19619818f5eb598c453a518bb6336fb91197096f9ca6e8617
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest
from policy.decoy_input import prompt_decoy_values

class TestDecoyInput(unittest.TestCase):
    def test_reject_blank_and_duplicates(self):
        # Simulate the inner validator directly
        vals = ["Alpha", "  Alpha  ", "Beta"]
        seen = set()
        # emulate uniqueness check
        uniq = []
        for s in vals:
            key = " ".join(s.strip().split()).lower()
            if not s.strip() or key in seen:
                continue
            seen.add(key)
            uniq.append(s)
        self.assertEqual(uniq, ["Alpha", "Beta"])

if __name__ == "__main__":
    unittest.main()


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_decoy_input.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_e2e_flow.py
# HASH: 3855be593e416b3a0b5eee63a8c56caee73589530f217089fa7b8f049e5f9380
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest, sys, json, tempfile
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app

class TestEndToEndFlow(unittest.TestCase):
    def setUp(self):
        self.temp_dir = tempfile.TemporaryDirectory()
        main_app.SAVE_DIR = Path(self.temp_dir.name)
        self.sample_questions = [{"id": 1, "text": "Q1", "alternatives": ["A", "B"], "correct_answers": ["A"]}, {"id": 2, "text": "Q2", "alternatives": ["C", "D"], "correct_answers": ["C"]}]
    def tearDown(self):
        self.temp_dir.cleanup()
    @patch('src.main.getpass.getpass')
    @patch('builtins.input')
    @patch('src.main.curses.wrapper')
    def test_e2e_recover_real_secret(self, mock_curses, mock_input, mock_getpass):
        mock_getpass.return_value = "real"
        mock_input.side_effect = ['1', "decoy", '2', '', 'n', 'test_kit']
        main_app.save_questions(self.sample_questions)
        p = next(main_app.SAVE_DIR.glob("*.json")); kit = json.loads(p.read_text())
        mock_curses.side_effect = [["A"], ["C"]]
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, p)
            self.assertIn("real", "".join(c.args[0] for c in mock_stdout.write.call_args_list))


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_e2e_flow.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_failure_cases.py
# HASH: 91daaf406965ff955f10c81e42ba28ac4b601e33420639b1e5eaeb6eb3c0f2d7
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest, sys
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app
from modules import crypto_bridge

class TestFailureCases(unittest.TestCase):
    def test_panic_tampered_ciphertext(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        ciphertext = bytearray(crypto_bridge.aes_gcm_encrypt(key, nonce, b"data", None))
        ciphertext[5] ^= 1
        with self.assertRaises(RuntimeError):
            crypto_bridge.aes_gcm_decrypt(key, nonce, bytes(ciphertext), None)
    @patch('src.main.curses.wrapper', return_value=[["A"]])
    def test_panic_kit_missing_key(self, mock_curses):
        kit = {"questions": [], "encrypted_shares": {}}
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, Path("dummy.json"))
            self.assertIn("ERROR: Kit structure invalid", mock_stdout.write.call_args_list[0].args[0])


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_failure_cases.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_integration_bridges.py
# HASH: f4a40a08b16400b6da772c5e32a2b2fe8e51d3ae0f152b43098f6544b037699d
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from modules import crypto_bridge, sss_bridge

class TestIntegrationBridges(unittest.IsolatedAsyncioTestCase):
    def test_crypto_sha3_256(self):
        result = crypto_bridge.sha3_256(b"hello world")
        self.assertEqual(result.hex(), "644bcc7e564373040999aac89e7622f3ca71fba1d972fd94a31c3bfbf24e3938")
    def test_crypto_aes_gcm_roundtrip(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        decrypted = crypto_bridge.aes_gcm_decrypt(key, nonce, crypto_bridge.aes_gcm_encrypt(key, nonce, b"test", None), None)
        self.assertEqual(b"test", decrypted)
    async def test_sss_roundtrip(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        self.assertEqual(b"secret", await sss_bridge.sss_combine(shares[:3]))
    async def test_sss_insufficient_shares_fails(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        with self.assertRaises(RuntimeError):
            await sss_bridge.sss_combine(shares[:2])


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_integration_bridges.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_no_leak_policy.py
# HASH: cf3f085db0cf7a68fb038db373ab3c99c477ec5fdc93cd593ab7048779af3aa2
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest, hashlib
from pathlib import Path
import sys

SRC = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC))

from policy.recovery_policy import decide_output, deterministic_decoy_index  # type: ignore

class TestNoLeakPolicy(unittest.TestCase):
    def test_real_preferred_when_valid(self):
        real = "aGVsbG8="  # "hello"
        text, is_real = decide_output(real, ["dec1"], b"fp")
        self.assertTrue(is_real)
        self.assertEqual(text, "hello")

    def test_decoy_when_invalid_or_missing(self):
        real = "!!!notbase64!!!"
        decoys = ["d1", "d2", "d3"]
        fp = hashlib.sha3_256(b"answers").digest()
        text, is_real = decide_output(real, decoys, fp)
        self.assertFalse(is_real)
        idx = deterministic_decoy_index(fp, len(decoys))
        self.assertEqual(text, decoys[idx])

if __name__ == "__main__":
    unittest.main()


########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\test_no_leak_policy.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\__init__.py
# HASH: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################



########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\__init__.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_e2e_flow.py
# HASH: 0ce8c87eee3c5c0623ba9594d8a47f47f7bdefe9baaec7e3ca13daea0b685732
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest, sys, json, tempfile
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app

class TestEndToEndFlow(unittest.TestCase):
    def setUp(self):
        self.temp_dir = tempfile.TemporaryDirectory()
        main_app.SAVE_DIR = Path(self.temp_dir.name)
        self.sample_questions = [{"id": 1, "text": "Q1", "alternatives": ["A", "B"], "correct_answers": ["A"]}, {"id": 2, "text": "Q2", "alternatives": ["C", "D"], "correct_answers": ["C"]}]
    def tearDown(self):
        self.temp_dir.cleanup()
    @patch('src.main.getpass.getpass')
    @patch('builtins.input')
    @patch('src.main.curses.wrapper')
    def test_e2e_recover_real_secret(self, mock_curses, mock_input, mock_getpass):
        mock_getpass.return_value = "real"
        mock_input.side_effect = ['1', "decoy", '2', '', 'n', 'test_kit']
        main_app.save_questions(self.sample_questions)
        p = next(main_app.SAVE_DIR.glob("*.json")); kit = json.loads(p.read_text())
        mock_curses.side_effect = [["A"], ["C"]]
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, p)
            self.assertIn("real", "".join(c.args[0] for c in mock_stdout.write.call_args_list))

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_e2e_flow.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_failure_cases.py
# HASH: 2d589ef8beb3c63375f188effab7799a71d77fc34f6e94cd2648ff01ea73217d
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest, sys
from pathlib import Path
from unittest.mock import patch, MagicMock

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from src import main as main_app
from modules import crypto_bridge

class TestFailureCases(unittest.TestCase):
    def test_panic_tampered_ciphertext(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        ciphertext = bytearray(crypto_bridge.aes_gcm_encrypt(key, nonce, b"data", None))
        ciphertext[5] ^= 1
        with self.assertRaises(RuntimeError):
            crypto_bridge.aes_gcm_decrypt(key, nonce, bytes(ciphertext), None)
    @patch('src.main.curses.wrapper', return_value=[["A"]])
    def test_panic_kit_missing_key(self, mock_curses):
        kit = {"questions": [], "encrypted_shares": {}}
        with patch('sys.stdout', new_callable=MagicMock) as mock_stdout:
            main_app.run_recovery_kit_flow(kit, Path("dummy.json"))
            self.assertIn("ERROR: Kit structure invalid", mock_stdout.write.call_args_list[0].args[0])

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_failure_cases.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_integration_bridges.py
# HASH: ef16dd80e87e5ecbe6e083260337a3c4719746013af3928f69147b830f79dc3d
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from modules import crypto_bridge, sss_bridge

class TestIntegrationBridges(unittest.IsolatedAsyncioTestCase):
    def test_crypto_sha3_256(self):
        result = crypto_bridge.sha3_256(b"hello world")
        self.assertEqual(result.hex(), "644bcc7e564373040999aac89e7622f3ca71fba1d972fd94a31c3bfbf24e3938")
    def test_crypto_aes_gcm_roundtrip(self):
        key, nonce = crypto_bridge.random_bytes(32), crypto_bridge.random_bytes(12)
        decrypted = crypto_bridge.aes_gcm_decrypt(key, nonce, crypto_bridge.aes_gcm_encrypt(key, nonce, b"test", None), None)
        self.assertEqual(b"test", decrypted)
    async def test_sss_roundtrip(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        self.assertEqual(b"secret", await sss_bridge.sss_combine(shares[:3]))
    async def test_sss_insufficient_shares_fails(self):
        shares = await sss_bridge.sss_split(b"secret", 5, 3)
        with self.assertRaises(RuntimeError):
            await sss_bridge.sss_combine(shares[:2])

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_integration_bridges.py
########################################################################################################################


########################################################################################################################
# FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_unit_helpers.py
# HASH: a17a5c0db7f497771058ff9556245ec3022169b71f8a4474ac20aa9e0d471b65
# TIMESTAMP: 2025-08-31_11-37-52
########################################################################################################################

import unittest
import sys
from pathlib import Path

SRC_DIR = Path(__file__).resolve().parents[1] / "src"
sys.path.insert(0, str(SRC_DIR))

from main import _policy_min_threshold, _aad_bytes, _decoy_pick_index
from modules.security_utils import normalize_text, sanitize_input

class TestUnitHelpers(unittest.TestCase):
    def test_policy_min_threshold(self):
        self.assertEqual(_policy_min_threshold(10), 8)
    def test_aad_bytes_format(self):
        self.assertEqual(_aad_bytes("q", "a", "alg", 3), b"q|a|alg|3")
    def test_normalize_text(self):
        self.assertEqual(normalize_text("ＨＥＬＬＯ"), "HELLO")
    def test_sanitize_input(self):
        self.assertEqual(sanitize_input("a\0b"), "ab")
    def test_decoy_pick_index_is_deterministic(self):
        a = [("q1", "a1"), ("q2", "a2")]
        self.assertEqual(_decoy_pick_index(a, 5), _decoy_pick_index(a, 5))

########################################################################################################################
# END OF FILE: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\tests\tests\test_unit_helpers.py
########################################################################################################################


========================================================================================================================
SUMMARY
Total Files: 31
Total Characters: 350929
Timestamp: 2025-08-31_11-37-52
Visited Dirs: 57
Output: C:\Users\deskt\Desktop\Project_SECQ_CLI\AnswerChain\all_source_files_2025-08-31_11-37-52.txt
========================================================================================================================
