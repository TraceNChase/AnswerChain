name: Semgrep PR Analysis

on:
  pull_request:
    branches: [ main, master ]

jobs:
  semgrep-pr:
    name: Semgrep PR Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep Action
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/default
            p/security-audit
            p/owasp-top-ten
            semgrep-security-setup/configs/semgrep-rules.yaml
          generateSarif: "1"
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Process scan results
        id: process-results
        if: success() || failure()
        run: |
          if [ -f "semgrep-results.json" ]; then
            echo "Creating PR report from semgrep-results.json"
            # Get number of findings
            findings=$(jq '.results | length' semgrep-results.json)
            
            if [ "$findings" -gt 0 ]; then
              echo "FINDINGS_COUNT=$findings" >> $GITHUB_OUTPUT
              echo "HAS_FINDINGS=true" >> $GITHUB_OUTPUT
              
              # Create markdown report
              echo "## 🔍 Semgrep Security Analysis Results" > semgrep-pr-report.md
              echo "" >> semgrep-pr-report.md
              echo "Found **$findings** potential issues in this PR." >> semgrep-pr-report.md
              echo "" >> semgrep-pr-report.md
              
              # Count findings by severity
              critical=$(jq '[.results[] | select(.extra.severity == "ERROR" or .extra.severity == "CRITICAL")] | length' semgrep-results.json)
              high=$(jq '[.results[] | select(.extra.severity == "WARNING" or .extra.severity == "HIGH")] | length' semgrep-results.json)
              medium=$(jq '[.results[] | select(.extra.severity == "INFO" or .extra.severity == "MEDIUM")] | length' semgrep-results.json)
              low=$(jq '[.results[] | select(.extra.severity == "LOW")] | length' semgrep-results.json)
              
              echo "### Summary" >> semgrep-pr-report.md
              echo "" >> semgrep-pr-report.md
              echo "| Severity | Count |" >> semgrep-pr-report.md
              echo "|----------|-------|" >> semgrep-pr-report.md
              echo "| 🔴 Critical/Error | $critical |" >> semgrep-pr-report.md
              echo "| 🟠 High/Warning | $high |" >> semgrep-pr-report.md
              echo "| 🟡 Medium/Info | $medium |" >> semgrep-pr-report.md
              echo "| 🟢 Low | $low |" >> semgrep-pr-report.md
              echo "" >> semgrep-pr-report.md
              
              # Add details for each finding
              echo "### Findings" >> semgrep-pr-report.md
              echo "" >> semgrep-pr-report.md
              
              jq -r '.results[] | "#### 🔍 \(.check_id)\n\n**Severity:** \(.extra.severity // "MEDIUM")\n\n**File:** \(.path) (lines \(.start.line)-\(.end.line))\n\n**Message:** \(.extra.message)\n\n```\n\(.extra.lines)\n```\n\n---\n"' semgrep-results.json >> semgrep-pr-report.md
            else
              echo "HAS_FINDINGS=false" >> $GITHUB_OUTPUT
              echo "## ✅ Semgrep Security Analysis Results" > semgrep-pr-report.md
              echo "" >> semgrep-pr-report.md
              echo "No security issues found in this PR. Great job!" >> semgrep-pr-report.md
            fi
          else
            echo "HAS_FINDINGS=false" >> $GITHUB_OUTPUT
            echo "## ⚠️ Semgrep Security Analysis" > semgrep-pr-report.md
            echo "" >> semgrep-pr-report.md
            echo "The analysis completed but no results file was found." >> semgrep-pr-report.md
          fi

      - name: Comment on PR
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            if (fs.existsSync('semgrep-pr-report.md')) {
              const reportContent = fs.readFileSync('semgrep-pr-report.md', 'utf8');
              
              const issueNumber = context.issue.number;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: reportContent
              });
              
              // Add label if findings found
              if ('${{ steps.process-results.outputs.HAS_FINDINGS }}' === 'true') {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['security-review-needed']
                });
              }
            }
