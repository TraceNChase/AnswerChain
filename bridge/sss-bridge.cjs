#!/usr/bin/env node
// sss-bridge.cjs â€” Shamir Secret Sharing Bridge (GF(2^8))

const fs = require("fs");
const crypto = require("crypto");

// Lookup tables from HashiCorp Vault (generator 0xe5)
const LOG_TABLE = new Uint8Array([
  0x00, 0xff, 0xc8, 0x08, 0x91, 0x10, 0xd0, 0x36, 0x5a, 0x3e, 0xd8, 0x43, 0x99, 0x77, 0xfe, 0x18,
  0x23, 0x20, 0x07, 0x70, 0xa1, 0x6c, 0x0c, 0x7f, 0x62, 0x8b, 0x40, 0x46, 0xc7, 0x4b, 0xe0, 0x0e,
  0xeb, 0x16, 0xe8, 0xad, 0xcf, 0xcd, 0x39, 0x53, 0x6a, 0x27, 0x35, 0x93, 0xd4, 0x4e, 0x48, 0xc3,
  0x2b, 0x79, 0x54, 0x28, 0x09, 0x78, 0x0f, 0x21, 0x90, 0x87, 0x14, 0x2a, 0xa9, 0x9c, 0xd6, 0x74,
  0xb4, 0x7c, 0xde, 0xed, 0xb1, 0x86, 0x76, 0xa4, 0x98, 0xe2, 0x96, 0x8f, 0x02, 0x32, 0x1c, 0xc1,
  0x33, 0xee, 0xef, 0x81, 0xfd, 0x30, 0x5c, 0x13, 0x9d, 0x29, 0x17, 0xc4, 0x11, 0x44, 0x8c, 0x80,
  0xf3, 0x73, 0x42, 0x1e, 0x1d, 0xb5, 0xf0, 0x12, 0xd1, 0x5b, 0x41, 0xa2, 0xd7, 0x2c, 0xe9, 0xd5,
  0x59, 0xcb, 0x50, 0xa8, 0xdc, 0xfc, 0xf2, 0x56, 0x72, 0xa6, 0x65, 0x2f, 0x9f, 0x9b, 0x3d, 0xba,
  0x7d, 0xc2, 0x45, 0x82, 0xa7, 0x57, 0xb6, 0xa3, 0x7a, 0x75, 0x4f, 0xae, 0x3f, 0x37, 0x6d, 0x47,
  0x61, 0xbe, 0xab, 0xd3, 0x5f, 0xb0, 0x58, 0xaf, 0xca, 0x5e, 0xfa, 0x85, 0xe4, 0x4d, 0x8a, 0x05,
  0xfb, 0x60, 0xb7, 0x7b, 0xb8, 0x26, 0x4a, 0x67, 0xc6, 0x1a, 0xf8, 0x69, 0x25, 0xb3, 0xdb, 0xbd,
  0x66, 0xdd, 0xf1, 0xd2, 0xdf, 0x03, 0x8d, 0x34, 0xd9, 0x92, 0x0d, 0x63, 0x55, 0xaa, 0x49, 0xec,
  0xbc, 0x95, 0x3c, 0x84, 0x0b, 0xf5, 0xe6, 0xe7, 0xe5, 0xac, 0x7e, 0x6e, 0xb9, 0xf9, 0xda, 0x8e,
  0x9a, 0xc9, 0x24, 0xe1, 0x0a, 0x15, 0x6b, 0x3a, 0xa0, 0x51, 0xf4, 0xea, 0xb2, 0x97, 0x9e, 0x5d,
  0x22, 0x88, 0x94, 0xce, 0x19, 0x01, 0x71, 0x4c, 0xa5, 0xe3, 0xc5, 0x31, 0xbb, 0xcc, 0x1f, 0x2d,
  0x3b, 0x52, 0x6f, 0xf6, 0x2e, 0x89, 0xf7, 0xc0, 0x68, 0x1b, 0x64, 0x04, 0x06, 0xbf, 0x83, 0x38,
]);
const EXP_TABLE = new Uint8Array([
  0x01, 0xe5, 0x4c, 0xb5, 0xfb, 0x9f, 0xfc, 0x12, 0x03, 0x34, 0xd4, 0xc4, 0x16, 0xba, 0x1f, 0x36,
  0x05, 0x5c, 0x67, 0x57, 0x3a, 0xd5, 0x21, 0x5a, 0x0f, 0xe4, 0xa9, 0xf9, 0x4e, 0x64, 0x63, 0xee,
  0x11, 0x37, 0xe0, 0x10, 0xd2, 0xac, 0xa5, 0x29, 0x33, 0x59, 0x3b, 0x30, 0x6d, 0xef, 0xf4, 0x7b,
  0x55, 0xeb, 0x4d, 0x50, 0xb7, 0x2a, 0x07, 0x8d, 0xff, 0x26, 0xd7, 0xf0, 0xc2, 0x7e, 0x09, 0x8c,
  0x1a, 0x6a, 0x62, 0x0b, 0x5d, 0x82, 0x1b, 0x8f, 0x2e, 0xbe, 0xa6, 0x1d, 0xe7, 0x9d, 0x2d, 0x8a,
  0x72, 0xd9, 0xf1, 0x27, 0x32, 0xbc, 0x77, 0x85, 0x96, 0x70, 0x08, 0x69, 0x56, 0xdf, 0x99, 0x94,
  0xa1, 0x90, 0x18, 0xbb, 0xfa, 0x7a, 0xb0, 0xa7, 0xf8, 0xab, 0x28, 0xd6, 0x15, 0x8e, 0xcb, 0xf2,
  0x13, 0xe6, 0x78, 0x61, 0x3f, 0x89, 0x46, 0x0d, 0x35, 0x31, 0x88, 0xa3, 0x41, 0x80, 0xca, 0x17,
  0x5f, 0x53, 0x83, 0xfe, 0xc3, 0x9b, 0x45, 0x39, 0xe1, 0xf5, 0x9e, 0x19, 0x5e, 0xb6, 0xcf, 0x4b,
  0x38, 0x04, 0xb9, 0x2b, 0xe2, 0xc1, 0x4a, 0xdd, 0x48, 0x0c, 0xd0, 0x7d, 0x3d, 0x58, 0xde, 0x7c,
  0xd8, 0x14, 0x6b, 0x87, 0x47, 0xe8, 0x79, 0x84, 0x73, 0x3c, 0xbd, 0x92, 0xc9, 0x23, 0x8b, 0x97,
  0x95, 0x44, 0xdc, 0xad, 0x40, 0x65, 0x86, 0xa2, 0xa4, 0xcc, 0x7f, 0xec, 0xc0, 0xaf, 0x91, 0xfd,
  0xf7, 0x4f, 0x81, 0x2f, 0x5b, 0xea, 0xa8, 0x1c, 0x02, 0xd1, 0x98, 0x71, 0xed, 0x25, 0xe3, 0x24,
  0x06, 0x68, 0xb3, 0x93, 0x2c, 0x6f, 0x3e, 0x6c, 0x0a, 0xb8, 0xce, 0xae, 0x74, 0xb1, 0x42, 0xb4,
  0x1e, 0xd3, 0x49, 0xe9, 0x9c, 0xc8, 0xc6, 0xc7, 0x22, 0x6e, 0xdb, 0x20, 0xbf, 0x43, 0x51, 0x52,
  0x66, 0xb2, 0x76, 0x60, 0xda, 0xc5, 0xf3, 0xf6, 0xaa, 0xcd, 0x9a, 0xa0, 0x75, 0x54, 0x0e, 0x01,
]);

function add(a, b) { return (a ^ b) & 0xff; }
function mult(a, b) {
  if (a === 0 || b === 0) return 0;
  const sum = (LOG_TABLE[a] + LOG_TABLE[b]) % 255;
  return EXP_TABLE[sum];
}
function div(a, b) {
  if (a === 0) return 0;
  if (b === 0) throw new Error('cannot divide by zero');
  const diff = (LOG_TABLE[a] - LOG_TABLE[b] + 255) % 255;
  return EXP_TABLE[diff];
}
function evaluate(coeff, x, degree) {
  if (x === 0) throw new Error('cannot evaluate at zero');
  let result = coeff[degree];
  for (let i = degree - 1; i >= 0; i--) {
    result = add(mult(result, x), coeff[i]);
  }
  return result;
}
function interpolatePolynomial(xSamples, ySamples, x) {
  const n = xSamples.length;
  let result = 0;
  for (let i = 0; i < n; i++) {
    let basis = 1;
    for (let j = 0; j < n; j++) {
      if (i === j) continue;
      const num = add(x, xSamples[j]);
      const den = add(xSamples[i], xSamples[j]);
      basis = mult(basis, div(num, den));
    }
    result = add(result, mult(ySamples[i], basis));
  }
  return result;
}
function newCoefficients(intercept, degree) {
  const coeff = new Uint8Array(degree + 1);
  coeff[0] = intercept;
  for (let i = 1; i <= degree; i++) {
    // ensure highest degree coeff != 0
    coeff[i] = (i === degree) ? Math.max(1, crypto.randomBytes(1)[0]) : crypto.randomBytes(1)[0];
  }
  return coeff;
}
function newCoordinates(shares) {
  // Random permutation of 1..255, pick first 'shares'
  const coords = new Uint8Array(255);
  for (let i = 0; i < 255; i++) coords[i] = i + 1;
  const rnd = crypto.randomBytes(255);
  for (let i = 0; i < 255; i++) {
    const j = rnd[i] % 255;
    const t = coords[i]; coords[i] = coords[j]; coords[j] = t;
  }
  return coords.slice(0, shares);
}

async function sssSplit(secret, shares, threshold) {
  if (shares < 2 || shares > 255) throw new Error('shares must be 2..255');
  if (threshold < 2 || threshold > 255) throw new Error('threshold must be 2..255');
  if (shares < threshold) throw new Error('shares cannot be less than threshold');
  const secretLen = secret.length;
  const xCoords = newCoordinates(shares);
  const out = Array.from({ length: shares }, () => new Uint8Array(secretLen + 1));
  for (let j = 0; j < shares; j++) out[j][secretLen] = xCoords[j];
  const degree = threshold - 1;
  for (let i = 0; i < secretLen; i++) {
    const coeff = newCoefficients(secret[i], degree);
    for (let j = 0; j < shares; j++) {
      const x = xCoords[j];
      out[j][i] = evaluate(coeff, x, degree);
    }
  }
  return out;
}

async function sssCombine(shares) {
  if (!shares || shares.length < 2) throw new Error('need >=2 shares');
  const shareLen = shares[0].length;
  if (shareLen < 2) throw new Error('share too short');
  for (const s of shares) if (s.length !== shareLen) throw new Error('inconsistent share length');
  const secretLen = shareLen - 1;
  const xSamples = new Uint8Array(shares.length);
  const ySamples = new Uint8Array(shares.length);
  const seen = new Set();
  for (let i = 0; i < shares.length; i++) {
    const x = shares[i][secretLen];
    if (seen.has(x)) throw new Error('duplicate x');
    seen.add(x); xSamples[i] = x;
  }
  const secret = new Uint8Array(secretLen);
  for (let i = 0; i < secretLen; i++) {
    for (let j = 0; j < shares.length; j++) ySamples[j] = shares[j][i];
    secret[i] = interpolatePolynomial(xSamples, ySamples, 0);
  }
  return secret;
}

// Main execution
const main = () => {
  try {
    // Read input synchronously
    const input = fs.readFileSync(process.stdin.fd, 'utf8');
    
    if (!input.trim()) {
      console.log(JSON.stringify({ ok: false, error: "No input provided" }));
      return;
    }

    const req = JSON.parse(input);

    if (req.cmd === "split") {
      if (typeof req.secret_b64 !== "string") {
        throw new Error("secret_b64 missing");
      }
      if (typeof req.shares !== "number" || typeof req.threshold !== "number") {
        throw new Error("shares/threshold missing");
      }
      
      const secret = new Uint8Array(Buffer.from(req.secret_b64, "base64"));
      const shares = sssSplit(secret, req.shares, req.threshold);
      // handle promise
      Promise.resolve(shares).then((arr)=>{
        const shares_b64 = arr.map(share => Buffer.from(share).toString("base64"));
        console.log(JSON.stringify({ ok: true, shares_b64 }));
      }).catch(e=>{
        console.log(JSON.stringify({ ok:false, error: String(e && e.message ? e.message : e) }));
      });
      return;
    }

    if (req.cmd === "combine") {
      if (!Array.isArray(req.shares_b64)) {
        throw new Error("shares_b64 missing");
      }
      
      const shares = req.shares_b64.map(b64 => new Uint8Array(Buffer.from(b64, "base64")));
      Promise.resolve(sssCombine(shares)).then((secret)=>{
        console.log(JSON.stringify({ ok: true, secret_b64: Buffer.from(secret).toString("base64") }));
      }).catch(e=>{
        console.log(JSON.stringify({ ok:false, error: String(e && e.message ? e.message : e) }));
      });
      return;
    }

    if (req.cmd === "combine_batch") {
      if (!Array.isArray(req.shares_b64) || !Array.isArray(req.sets)) {
        throw new Error("shares_b64 or sets missing/invalid");
      }
      const sharesAll = req.shares_b64.map(b64 => new Uint8Array(Buffer.from(b64, "base64")));
      const doCombine = async () => {
        const results = [];
        for (const idxs of req.sets) {
          try {
            const subset = idxs.map(i => sharesAll[i]);
            const secret = await sssCombine(subset);
            results.push(Buffer.from(secret).toString("base64"));
          } catch (e) {
            results.push(null);
          }
        }
        console.log(JSON.stringify({ ok: true, secrets_b64: results }));
      };
      doCombine().catch(e=>{
        console.log(JSON.stringify({ ok:false, error: String(e && e.message ? e.message : e) }));
      });
      return;
    }

    throw new Error("unknown cmd");
  } catch (e) {
    console.log(JSON.stringify({ 
      ok: false, 
      error: String(e && e.message ? e.message : e) 
    }));
  }
};

// Execute main function
main();
