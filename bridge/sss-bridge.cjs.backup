#!/usr/bin/env node
// sss-bridge.cjs â€” JSON-over-stdin CLI with built-in Shamir Secret Sharing

const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

// Simple Shamir Secret Sharing implementation
// Based on standard Galois Field GF(256) arithmetic
class ShamirSecretSharing {
  constructor() {
    // GF(256) log and exp tables for arithmetic
    this.LOG_TABLE = new Uint8Array([
      0x00, 0xff, 0xc8, 0x08, 0x91, 0x10, 0xd0, 0x36, 0x5a, 0x3e, 0xd8, 0x43, 0x99, 0x77, 0xfe, 0x18,
      0x23, 0x20, 0x07, 0x70, 0xa1, 0x6c, 0x0c, 0x7f, 0x62, 0x8b, 0x40, 0x46, 0xc7, 0x4b, 0xe0, 0x0e,
      0xeb, 0x16, 0xe8, 0xad, 0xcf, 0xcd, 0x39, 0x53, 0x6a, 0x27, 0x35, 0x93, 0xd4, 0x4e, 0x48, 0xc3,
      0x2b, 0x79, 0x54, 0x28, 0x09, 0x78, 0x0f, 0x21, 0x90, 0x87, 0x14, 0x2a, 0xa9, 0x9c, 0xd6, 0x74,
      0xb4, 0x7c, 0xde, 0xed, 0xb1, 0x86, 0x76, 0xa4, 0x98, 0xe2, 0x96, 0x8f, 0x02, 0x32, 0x1c, 0xc1,
      0x33, 0xee, 0xef, 0x81, 0xfd, 0x30, 0x5c, 0x13, 0x9d, 0x29, 0x17, 0xc4, 0x11, 0x44, 0x8c, 0x80,
      0xf3, 0x73, 0x42, 0x1e, 0x1d, 0xb5, 0xf0, 0x12, 0xd1, 0x5b, 0x41, 0xa2, 0xd7, 0x2c, 0xe9, 0xd5,
      0x59, 0xcb, 0x50, 0xa8, 0xdc, 0xfc, 0xf2, 0x56, 0x72, 0xa6, 0x65, 0x2f, 0x9f, 0x9b, 0x3d, 0xba,
      0x7d, 0xc2, 0x45, 0x82, 0xa7, 0x57, 0xb6, 0xa3, 0x7a, 0x75, 0x4f, 0xae, 0x3f, 0x37, 0x6d, 0x47,
      0x61, 0xbe, 0xab, 0xd3, 0x5f, 0xb0, 0x58, 0xaf, 0xca, 0x5e, 0xfa, 0x85, 0xe4, 0x4d, 0x8a, 0x05,
      0xfb, 0x60, 0xb7, 0x7b, 0xb8, 0x26, 0x4a, 0x67, 0xc6, 0x1a, 0xf8, 0x69, 0x25, 0xb3, 0xdb, 0xbd,
      0x66, 0xdd, 0xf1, 0xd2, 0xdf, 0x03, 0x8d, 0x34, 0xd9, 0x92, 0x0d, 0x63, 0x55, 0xaa, 0x49, 0xec,
      0xbc, 0x95, 0x3c, 0x84, 0x0b, 0xf5, 0xe6, 0xe7, 0xe5, 0xac, 0x7e, 0x6e, 0xb9, 0xf9, 0xda, 0x8e,
      0x9a, 0xc9, 0x24, 0xe1, 0x0a, 0x15, 0x6b, 0x3a, 0xa0, 0x51, 0xf4, 0xea, 0xb2, 0x97, 0x9e, 0x5d,
      0x22, 0x88, 0x94, 0xce, 0x19, 0x01, 0x71, 0x4c, 0xa5, 0xe3, 0xc5, 0x31, 0xbb, 0xcc, 0x1f, 0x2d,
      0x3b, 0x52, 0x6f, 0xf6, 0x2e, 0x89, 0xf7, 0xc0, 0x68, 0x1b, 0x64, 0x04, 0x06, 0xbf, 0x83, 0x38,
    ]);

    this.EXP_TABLE = new Uint8Array([
      0x01, 0xe5, 0x4c, 0xb5, 0xfb, 0x9f, 0xfc, 0x12, 0x03, 0x34, 0xd4, 0xc4, 0x16, 0xba, 0x1f, 0x36,
      0x05, 0x5c, 0x67, 0x57, 0x3a, 0xd5, 0x21, 0x5a, 0x0f, 0xe4, 0xa9, 0xf9, 0x4e, 0x64, 0x63, 0xee,
      0x11, 0x37, 0xe0, 0x10, 0xd2, 0xac, 0xa5, 0x29, 0x33, 0x59, 0x3b, 0x30, 0x6d, 0xef, 0xf4, 0x7b,
      0x55, 0xeb, 0x4d, 0x50, 0xb7, 0x2a, 0x07, 0x8d, 0xff, 0x26, 0xd7, 0xf0, 0xc2, 0x7e, 0x09, 0x8c,
      0x17, 0x6a, 0xb8, 0x8a, 0xdf, 0x20, 0xbf, 0x47, 0x77, 0xf3, 0x27, 0xcf, 0x42, 0x61, 0xc7, 0x73,
      0x19, 0x65, 0xf8, 0x7f, 0x04, 0xa7, 0x35, 0x79, 0x80, 0x25, 0xd3, 0xbe, 0x40, 0x43, 0xa2, 0xb1,
      0x60, 0x13, 0xbd, 0x28, 0xbf, 0x5b, 0xda, 0x85, 0xd1, 0xae, 0xa6, 0xb9, 0xb2, 0xa8, 0x8e, 0x5e,
      0xc6, 0xdb, 0xcf, 0xd6, 0xa4, 0x54, 0xc2, 0xcc, 0xf7, 0xfe, 0x41, 0xc0, 0x3c, 0x4b, 0xe1, 0xc4,
      0xef, 0x66, 0xf5, 0x68, 0x19, 0x9e, 0x81, 0xac, 0xdd, 0xbc, 0x7d, 0x38, 0x33, 0xf8, 0x7c, 0xa0,
      0x1a, 0x9d, 0x2f, 0x9b, 0xb6, 0x81, 0x86, 0x96, 0x6b, 0xa3, 0xbe, 0x52, 0x6e, 0x46, 0x16, 0x92,
      0x04, 0x2e, 0xbc, 0x2c, 0x2d, 0x8a, 0x53, 0x44, 0x4a, 0x75, 0x12, 0x56, 0x78, 0x06, 0xcc, 0x8b,
      0xb0, 0x47, 0xe7, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f,
      0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d,
      0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78,
      0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8,
      0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15,
    ]);
  }

  // GF(256) arithmetic operations
  gfAdd(a, b) {
    return a ^ b;
  }

  gfMul(a, b) {
    if (a === 0 || b === 0) return 0;
    return this.EXP_TABLE[(this.LOG_TABLE[a] + this.LOG_TABLE[b]) % 255];
  }

  gfDiv(a, b) {
    if (a === 0) return 0;
    if (b === 0) throw new Error("Division by zero in GF(256)");
    return this.EXP_TABLE[(this.LOG_TABLE[a] - this.LOG_TABLE[b] + 255) % 255];
  }

  // Evaluate polynomial at point x
  evaluatePolynomial(coefficients, x) {
    let result = 0;
    let xPower = 1;
    
    for (let i = 0; i < coefficients.length; i++) {
      result = this.gfAdd(result, this.gfMul(coefficients[i], xPower));
      xPower = this.gfMul(xPower, x);
    }
    
    return result;
  }

  // Lagrange interpolation at x=0
  lagrangeInterpolate(xCoords, yCoords) {
    let result = 0;
    const n = xCoords.length;
    
    for (let i = 0; i < n; i++) {
      let numerator = 1;
      let denominator = 1;
      
      for (let j = 0; j < n; j++) {
        if (i !== j) {
          numerator = this.gfMul(numerator, xCoords[j]);
          denominator = this.gfMul(denominator, this.gfAdd(xCoords[i], xCoords[j]));
        }
      }
      
      const lagrangeCoeff = this.gfDiv(numerator, denominator);
      result = this.gfAdd(result, this.gfMul(yCoords[i], lagrangeCoeff));
    }
    
    return result;
  }

  // Split secret into shares
  split(secret, numShares, threshold) {
    if (threshold > numShares) {
      throw new Error("Threshold cannot be greater than number of shares");
    }
    if (threshold < 1) {
      throw new Error("Threshold must be at least 1");
    }
    if (numShares > 255) {
      throw new Error("Cannot create more than 255 shares");
    }

    const shares = [];
    
    for (let shareIndex = 1; shareIndex <= numShares; shareIndex++) {
      const share = new Uint8Array(secret.length + 1);
      
      for (let byteIndex = 0; byteIndex < secret.length; byteIndex++) {
        // Generate random coefficients for this byte's polynomial
        const coefficients = new Uint8Array(threshold);
        coefficients[0] = secret[byteIndex]; // Secret is the constant term
        
        for (let i = 1; i < threshold; i++) {
          coefficients[i] = crypto.randomBytes(1)[0];
        }
        
        // Evaluate polynomial at x = shareIndex
        share[byteIndex] = this.evaluatePolynomial(coefficients, shareIndex);
      }
      
      // Store the x-coordinate as the last byte
      share[secret.length] = shareIndex;
      shares.push(share);
    }
    
    return shares;
  }

  // Combine shares to reconstruct secret
  combine(shares) {
    if (shares.length === 0) {
      throw new Error("No shares provided");
    }
    
    // Extract x-coordinates and validate share format
    const xCoords = [];
    const shareLength = shares[0].length;
    
    for (let i = 0; i < shares.length; i++) {
      if (shares[i].length !== shareLength) {
        throw new Error("All shares must have the same length");
      }
      xCoords.push(shares[i][shareLength - 1]);
    }
    
    // Check for duplicate x-coordinates
    const uniqueX = new Set(xCoords);
    if (uniqueX.size !== xCoords.length) {
      throw new Error("Shares must have unique x-coordinates");
    }
    
    const secretLength = shareLength - 1;
    const secret = new Uint8Array(secretLength);
    
    // Reconstruct each byte of the secret
    for (let byteIndex = 0; byteIndex < secretLength; byteIndex++) {
      const yCoords = shares.map(share => share[byteIndex]);
      secret[byteIndex] = this.lagrangeInterpolate(xCoords, yCoords);
    }
    
    return secret;
  }
}

// Create instance
const sss = new ShamirSecretSharing();

// FIX: Keep the fallback logic for compatibility but use built-in implementation
let split, combine;
try {
  // Try to use the vendored package first
  const vendorPath = path.join(__dirname, "vendor", "shamir-secret-sharing-0.0.3");
  ({ split, combine } = require(vendorPath));
} catch (e1) {
  try {
    // Try globally installed package
    ({ split, combine } = require("shamir-secret-sharing"));
  } catch (e2) {
    // Use our built-in implementation (make them async compatible)
    split = async (secret, shares, threshold) => sss.split(secret, shares, threshold);
    combine = async (shares) => sss.combine(shares);
    // Debug: Verify functions are set
    if (typeof split !== 'function') {
      throw new Error("Failed to set split function");
    }
  }
}

const readStdin = () => fs.readFileSync(0, "utf8");
const ok = (obj) => process.stdout.write(JSON.stringify({ ok: true, ...obj }) + "\n");
const fail = (err) =>
  process.stdout.write(JSON.stringify({ ok: false, error: String(err && err.message ? err.message : err) }) + "\n");

(async () => {
  try {
    const req = JSON.parse(readStdin());

    if (req.cmd === "split") {
      if (typeof req.secret_b64 !== "string") throw new Error("secret_b64 missing");
      if (typeof req.shares !== "number" || typeof req.threshold !== "number") throw new Error("shares/threshold missing");
      const secret = new Uint8Array(Buffer.from(req.secret_b64, "base64"));
      const shares = await split(secret, req.shares, req.threshold);
      const shares_b64 = shares.map((u8) => Buffer.from(u8).toString("base64"));
      ok({ shares_b64 });
      return;
    }

    if (req.cmd === "combine") {
      if (!Array.isArray(req.shares_b64)) throw new Error("shares_b64 missing");
      const shares = req.shares_b64.map((b64) => new Uint8Array(Buffer.from(b64, "base64")));
      const secret = await combine(shares);
      ok({ secret_b64: Buffer.from(secret).toString("base64") });
      return;
    }

    throw new Error("unknown cmd");
  } catch (e) {
    fail(e);
  }
})();